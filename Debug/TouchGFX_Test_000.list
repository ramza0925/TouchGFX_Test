
TouchGFX_Test_000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f88  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007138  08007138  00017138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071a8  080071a8  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  080071a8  080071a8  000171a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071b0  080071b0  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071b0  080071b0  000171b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071b4  080071b4  000171b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  080071b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002004c  2**0
                  CONTENTS
 10 .bss          000086dc  2000004c  2000004c  0002004c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008728  20008728  0002004c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023769  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ef0  00000000  00000000  000437e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d60  00000000  00000000  000486d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b40  00000000  00000000  0004a438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028e29  00000000  00000000  0004bf78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022ed8  00000000  00000000  00074da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efabf  00000000  00000000  00097c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00187738  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007938  00000000  00000000  0018778c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000004c 	.word	0x2000004c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007120 	.word	0x08007120

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000050 	.word	0x20000050
 80001ec:	08007120 	.word	0x08007120

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96e 	b.w	80004e4 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468c      	mov	ip, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	f040 8083 	bne.w	8000336 <__udivmoddi4+0x116>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d947      	bls.n	80002c6 <__udivmoddi4+0xa6>
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	b142      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023c:	f1c2 0020 	rsb	r0, r2, #32
 8000240:	fa24 f000 	lsr.w	r0, r4, r0
 8000244:	4091      	lsls	r1, r2
 8000246:	4097      	lsls	r7, r2
 8000248:	ea40 0c01 	orr.w	ip, r0, r1
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbbc f6f8 	udiv	r6, ip, r8
 8000258:	fa1f fe87 	uxth.w	lr, r7
 800025c:	fb08 c116 	mls	r1, r8, r6, ip
 8000260:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000264:	fb06 f10e 	mul.w	r1, r6, lr
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 8119 	bcs.w	80004a8 <__udivmoddi4+0x288>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8116 	bls.w	80004a8 <__udivmoddi4+0x288>
 800027c:	3e02      	subs	r6, #2
 800027e:	443b      	add	r3, r7
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fe0e 	mul.w	lr, r0, lr
 8000294:	45a6      	cmp	lr, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	193c      	adds	r4, r7, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295
 800029e:	f080 8105 	bcs.w	80004ac <__udivmoddi4+0x28c>
 80002a2:	45a6      	cmp	lr, r4
 80002a4:	f240 8102 	bls.w	80004ac <__udivmoddi4+0x28c>
 80002a8:	3802      	subs	r0, #2
 80002aa:	443c      	add	r4, r7
 80002ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b0:	eba4 040e 	sub.w	r4, r4, lr
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	b902      	cbnz	r2, 80002ca <__udivmoddi4+0xaa>
 80002c8:	deff      	udf	#255	; 0xff
 80002ca:	fab2 f282 	clz	r2, r2
 80002ce:	2a00      	cmp	r2, #0
 80002d0:	d150      	bne.n	8000374 <__udivmoddi4+0x154>
 80002d2:	1bcb      	subs	r3, r1, r7
 80002d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d8:	fa1f f887 	uxth.w	r8, r7
 80002dc:	2601      	movs	r6, #1
 80002de:	fbb3 fcfe 	udiv	ip, r3, lr
 80002e2:	0c21      	lsrs	r1, r4, #16
 80002e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002ec:	fb08 f30c 	mul.w	r3, r8, ip
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0xe4>
 80002f4:	1879      	adds	r1, r7, r1
 80002f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0xe2>
 80002fc:	428b      	cmp	r3, r1
 80002fe:	f200 80e9 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 8000302:	4684      	mov	ip, r0
 8000304:	1ac9      	subs	r1, r1, r3
 8000306:	b2a3      	uxth	r3, r4
 8000308:	fbb1 f0fe 	udiv	r0, r1, lr
 800030c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000310:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000314:	fb08 f800 	mul.w	r8, r8, r0
 8000318:	45a0      	cmp	r8, r4
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x10c>
 800031c:	193c      	adds	r4, r7, r4
 800031e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x10a>
 8000324:	45a0      	cmp	r8, r4
 8000326:	f200 80d9 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 800032a:	4618      	mov	r0, r3
 800032c:	eba4 0408 	sub.w	r4, r4, r8
 8000330:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000334:	e7bf      	b.n	80002b6 <__udivmoddi4+0x96>
 8000336:	428b      	cmp	r3, r1
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x12e>
 800033a:	2d00      	cmp	r5, #0
 800033c:	f000 80b1 	beq.w	80004a2 <__udivmoddi4+0x282>
 8000340:	2600      	movs	r6, #0
 8000342:	e9c5 0100 	strd	r0, r1, [r5]
 8000346:	4630      	mov	r0, r6
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f683 	clz	r6, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d14a      	bne.n	80003ec <__udivmoddi4+0x1cc>
 8000356:	428b      	cmp	r3, r1
 8000358:	d302      	bcc.n	8000360 <__udivmoddi4+0x140>
 800035a:	4282      	cmp	r2, r0
 800035c:	f200 80b8 	bhi.w	80004d0 <__udivmoddi4+0x2b0>
 8000360:	1a84      	subs	r4, r0, r2
 8000362:	eb61 0103 	sbc.w	r1, r1, r3
 8000366:	2001      	movs	r0, #1
 8000368:	468c      	mov	ip, r1
 800036a:	2d00      	cmp	r5, #0
 800036c:	d0a8      	beq.n	80002c0 <__udivmoddi4+0xa0>
 800036e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000374:	f1c2 0320 	rsb	r3, r2, #32
 8000378:	fa20 f603 	lsr.w	r6, r0, r3
 800037c:	4097      	lsls	r7, r2
 800037e:	fa01 f002 	lsl.w	r0, r1, r2
 8000382:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000386:	40d9      	lsrs	r1, r3
 8000388:	4330      	orrs	r0, r6
 800038a:	0c03      	lsrs	r3, r0, #16
 800038c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000390:	fa1f f887 	uxth.w	r8, r7
 8000394:	fb0e 1116 	mls	r1, lr, r6, r1
 8000398:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800039c:	fb06 f108 	mul.w	r1, r6, r8
 80003a0:	4299      	cmp	r1, r3
 80003a2:	fa04 f402 	lsl.w	r4, r4, r2
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x19c>
 80003a8:	18fb      	adds	r3, r7, r3
 80003aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ae:	f080 808d 	bcs.w	80004cc <__udivmoddi4+0x2ac>
 80003b2:	4299      	cmp	r1, r3
 80003b4:	f240 808a 	bls.w	80004cc <__udivmoddi4+0x2ac>
 80003b8:	3e02      	subs	r6, #2
 80003ba:	443b      	add	r3, r7
 80003bc:	1a5b      	subs	r3, r3, r1
 80003be:	b281      	uxth	r1, r0
 80003c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003cc:	fb00 f308 	mul.w	r3, r0, r8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1c4>
 80003d4:	1879      	adds	r1, r7, r1
 80003d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003da:	d273      	bcs.n	80004c4 <__udivmoddi4+0x2a4>
 80003dc:	428b      	cmp	r3, r1
 80003de:	d971      	bls.n	80004c4 <__udivmoddi4+0x2a4>
 80003e0:	3802      	subs	r0, #2
 80003e2:	4439      	add	r1, r7
 80003e4:	1acb      	subs	r3, r1, r3
 80003e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ea:	e778      	b.n	80002de <__udivmoddi4+0xbe>
 80003ec:	f1c6 0c20 	rsb	ip, r6, #32
 80003f0:	fa03 f406 	lsl.w	r4, r3, r6
 80003f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f8:	431c      	orrs	r4, r3
 80003fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000402:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000406:	fa21 f10c 	lsr.w	r1, r1, ip
 800040a:	431f      	orrs	r7, r3
 800040c:	0c3b      	lsrs	r3, r7, #16
 800040e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000412:	fa1f f884 	uxth.w	r8, r4
 8000416:	fb0e 1119 	mls	r1, lr, r9, r1
 800041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041e:	fb09 fa08 	mul.w	sl, r9, r8
 8000422:	458a      	cmp	sl, r1
 8000424:	fa02 f206 	lsl.w	r2, r2, r6
 8000428:	fa00 f306 	lsl.w	r3, r0, r6
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x220>
 800042e:	1861      	adds	r1, r4, r1
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	d248      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 8000436:	458a      	cmp	sl, r1
 8000438:	d946      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	4421      	add	r1, r4
 8000440:	eba1 010a 	sub.w	r1, r1, sl
 8000444:	b2bf      	uxth	r7, r7
 8000446:	fbb1 f0fe 	udiv	r0, r1, lr
 800044a:	fb0e 1110 	mls	r1, lr, r0, r1
 800044e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45b8      	cmp	r8, r7
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x24a>
 800045a:	19e7      	adds	r7, r4, r7
 800045c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000460:	d22e      	bcs.n	80004c0 <__udivmoddi4+0x2a0>
 8000462:	45b8      	cmp	r8, r7
 8000464:	d92c      	bls.n	80004c0 <__udivmoddi4+0x2a0>
 8000466:	3802      	subs	r0, #2
 8000468:	4427      	add	r7, r4
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba7 0708 	sub.w	r7, r7, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454f      	cmp	r7, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	4649      	mov	r1, r9
 800047c:	d31a      	bcc.n	80004b4 <__udivmoddi4+0x294>
 800047e:	d017      	beq.n	80004b0 <__udivmoddi4+0x290>
 8000480:	b15d      	cbz	r5, 800049a <__udivmoddi4+0x27a>
 8000482:	ebb3 020e 	subs.w	r2, r3, lr
 8000486:	eb67 0701 	sbc.w	r7, r7, r1
 800048a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048e:	40f2      	lsrs	r2, r6
 8000490:	ea4c 0202 	orr.w	r2, ip, r2
 8000494:	40f7      	lsrs	r7, r6
 8000496:	e9c5 2700 	strd	r2, r7, [r5]
 800049a:	2600      	movs	r6, #0
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e70b      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e9      	b.n	8000280 <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fd      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b0:	4543      	cmp	r3, r8
 80004b2:	d2e5      	bcs.n	8000480 <__udivmoddi4+0x260>
 80004b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b8:	eb69 0104 	sbc.w	r1, r9, r4
 80004bc:	3801      	subs	r0, #1
 80004be:	e7df      	b.n	8000480 <__udivmoddi4+0x260>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e7d2      	b.n	800046a <__udivmoddi4+0x24a>
 80004c4:	4660      	mov	r0, ip
 80004c6:	e78d      	b.n	80003e4 <__udivmoddi4+0x1c4>
 80004c8:	4681      	mov	r9, r0
 80004ca:	e7b9      	b.n	8000440 <__udivmoddi4+0x220>
 80004cc:	4666      	mov	r6, ip
 80004ce:	e775      	b.n	80003bc <__udivmoddi4+0x19c>
 80004d0:	4630      	mov	r0, r6
 80004d2:	e74a      	b.n	800036a <__udivmoddi4+0x14a>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	4439      	add	r1, r7
 80004da:	e713      	b.n	8000304 <__udivmoddi4+0xe4>
 80004dc:	3802      	subs	r0, #2
 80004de:	443c      	add	r4, r7
 80004e0:	e724      	b.n	800032c <__udivmoddi4+0x10c>
 80004e2:	bf00      	nop

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <MX_CRC_Init+0x20>)
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <MX_CRC_Init+0x24>)
 80004f0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <MX_CRC_Init+0x20>)
 80004f4:	f001 fd3c 	bl	8001f70 <HAL_CRC_Init>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80004fe:	f000 fe19 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20008478 	.word	0x20008478
 800050c:	40023000 	.word	0x40023000

08000510 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <HAL_CRC_MspInit+0x3c>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d10d      	bne.n	800053e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <HAL_CRC_MspInit+0x40>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a09      	ldr	r2, [pc, #36]	; (8000550 <HAL_CRC_MspInit+0x40>)
 800052c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <HAL_CRC_MspInit+0x40>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40023000 	.word	0x40023000
 8000550:	40023800 	.word	0x40023800

08000554 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <MX_DMA2D_Init+0x5c>)
 800055a:	4a16      	ldr	r2, [pc, #88]	; (80005b4 <MX_DMA2D_Init+0x60>)
 800055c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <MX_DMA2D_Init+0x5c>)
 8000560:	2200      	movs	r2, #0
 8000562:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <MX_DMA2D_Init+0x5c>)
 8000566:	2202      	movs	r2, #2
 8000568:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800056a:	4b11      	ldr	r3, [pc, #68]	; (80005b0 <MX_DMA2D_Init+0x5c>)
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000570:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <MX_DMA2D_Init+0x5c>)
 8000572:	2200      	movs	r2, #0
 8000574:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8000576:	4b0e      	ldr	r3, [pc, #56]	; (80005b0 <MX_DMA2D_Init+0x5c>)
 8000578:	2202      	movs	r2, #2
 800057a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <MX_DMA2D_Init+0x5c>)
 800057e:	2200      	movs	r2, #0
 8000580:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000582:	4b0b      	ldr	r3, [pc, #44]	; (80005b0 <MX_DMA2D_Init+0x5c>)
 8000584:	2200      	movs	r2, #0
 8000586:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000588:	4809      	ldr	r0, [pc, #36]	; (80005b0 <MX_DMA2D_Init+0x5c>)
 800058a:	f001 fd0d 	bl	8001fa8 <HAL_DMA2D_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000594:	f000 fdce 	bl	8001134 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000598:	2101      	movs	r1, #1
 800059a:	4805      	ldr	r0, [pc, #20]	; (80005b0 <MX_DMA2D_Init+0x5c>)
 800059c:	f001 fe5e 	bl	800225c <HAL_DMA2D_ConfigLayer>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005a6:	f000 fdc5 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20008480 	.word	0x20008480
 80005b4:	4002b000 	.word	0x4002b000

080005b8 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <HAL_DMA2D_MspInit+0x48>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d115      	bne.n	80005f6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <HAL_DMA2D_MspInit+0x4c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a0c      	ldr	r2, [pc, #48]	; (8000604 <HAL_DMA2D_MspInit+0x4c>)
 80005d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b0a      	ldr	r3, [pc, #40]	; (8000604 <HAL_DMA2D_MspInit+0x4c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2105      	movs	r1, #5
 80005ea:	205a      	movs	r0, #90	; 0x5a
 80005ec:	f001 fc96 	bl	8001f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80005f0:	205a      	movs	r0, #90	; 0x5a
 80005f2:	f001 fcaf 	bl	8001f54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	4002b000 	.word	0x4002b000
 8000604:	40023800 	.word	0x40023800

08000608 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b088      	sub	sp, #32
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
 800061c:	615a      	str	r2, [r3, #20]
 800061e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000620:	4b1f      	ldr	r3, [pc, #124]	; (80006a0 <MX_FMC_Init+0x98>)
 8000622:	4a20      	ldr	r2, [pc, #128]	; (80006a4 <MX_FMC_Init+0x9c>)
 8000624:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <MX_FMC_Init+0x98>)
 8000628:	2201      	movs	r2, #1
 800062a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800062c:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_FMC_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000632:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <MX_FMC_Init+0x98>)
 8000634:	2204      	movs	r2, #4
 8000636:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000638:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_FMC_Init+0x98>)
 800063a:	2210      	movs	r2, #16
 800063c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800063e:	4b18      	ldr	r3, [pc, #96]	; (80006a0 <MX_FMC_Init+0x98>)
 8000640:	2240      	movs	r2, #64	; 0x40
 8000642:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000644:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <MX_FMC_Init+0x98>)
 8000646:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800064a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_FMC_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_FMC_Init+0x98>)
 8000654:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000658:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_FMC_Init+0x98>)
 800065c:	2200      	movs	r2, #0
 800065e:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_FMC_Init+0x98>)
 8000662:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000666:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000668:	2302      	movs	r3, #2
 800066a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800066c:	2307      	movs	r3, #7
 800066e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000674:	2307      	movs	r3, #7
 8000676:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000678:	2303      	movs	r3, #3
 800067a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800067c:	2302      	movs	r3, #2
 800067e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000680:	2302      	movs	r3, #2
 8000682:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_FMC_Init+0x98>)
 800068a:	f003 fcf1 	bl	8004070 <HAL_SDRAM_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000694:	f000 fd4e 	bl	8001134 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200084c0 	.word	0x200084c0
 80006a4:	a0000140 	.word	0xa0000140

080006a8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006bc:	4b3b      	ldr	r3, [pc, #236]	; (80007ac <HAL_FMC_MspInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d16f      	bne.n	80007a4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80006c4:	4b39      	ldr	r3, [pc, #228]	; (80007ac <HAL_FMC_MspInit+0x104>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	4b38      	ldr	r3, [pc, #224]	; (80007b0 <HAL_FMC_MspInit+0x108>)
 80006d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006d2:	4a37      	ldr	r2, [pc, #220]	; (80007b0 <HAL_FMC_MspInit+0x108>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6393      	str	r3, [r2, #56]	; 0x38
 80006da:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <HAL_FMC_MspInit+0x108>)
 80006dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80006e6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80006ea:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2302      	movs	r3, #2
 80006ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006f4:	2303      	movs	r3, #3
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006f8:	230c      	movs	r3, #12
 80006fa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4619      	mov	r1, r3
 8000700:	482c      	ldr	r0, [pc, #176]	; (80007b4 <HAL_FMC_MspInit+0x10c>)
 8000702:	f001 fe3d 	bl	8002380 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000706:	2301      	movs	r3, #1
 8000708:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070a:	2302      	movs	r3, #2
 800070c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000716:	230c      	movs	r3, #12
 8000718:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4619      	mov	r1, r3
 800071e:	4826      	ldr	r0, [pc, #152]	; (80007b8 <HAL_FMC_MspInit+0x110>)
 8000720:	f001 fe2e 	bl	8002380 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000724:	f248 1333 	movw	r3, #33075	; 0x8133
 8000728:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072a:	2302      	movs	r3, #2
 800072c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000732:	2303      	movs	r3, #3
 8000734:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000736:	230c      	movs	r3, #12
 8000738:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	4619      	mov	r1, r3
 800073e:	481f      	ldr	r0, [pc, #124]	; (80007bc <HAL_FMC_MspInit+0x114>)
 8000740:	f001 fe1e 	bl	8002380 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000744:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000748:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800074a:	2302      	movs	r3, #2
 800074c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000752:	2303      	movs	r3, #3
 8000754:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000756:	230c      	movs	r3, #12
 8000758:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	4619      	mov	r1, r3
 800075e:	4818      	ldr	r0, [pc, #96]	; (80007c0 <HAL_FMC_MspInit+0x118>)
 8000760:	f001 fe0e 	bl	8002380 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000764:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000768:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076a:	2302      	movs	r3, #2
 800076c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000772:	2303      	movs	r3, #3
 8000774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000776:	230c      	movs	r3, #12
 8000778:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	4619      	mov	r1, r3
 800077e:	4811      	ldr	r0, [pc, #68]	; (80007c4 <HAL_FMC_MspInit+0x11c>)
 8000780:	f001 fdfe 	bl	8002380 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000784:	2360      	movs	r3, #96	; 0x60
 8000786:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000790:	2303      	movs	r3, #3
 8000792:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000794:	230c      	movs	r3, #12
 8000796:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4619      	mov	r1, r3
 800079c:	480a      	ldr	r0, [pc, #40]	; (80007c8 <HAL_FMC_MspInit+0x120>)
 800079e:	f001 fdef 	bl	8002380 <HAL_GPIO_Init>
 80007a2:	e000      	b.n	80007a6 <HAL_FMC_MspInit+0xfe>
    return;
 80007a4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80007a6:	3718      	adds	r7, #24
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000068 	.word	0x20000068
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40021400 	.word	0x40021400
 80007b8:	40020800 	.word	0x40020800
 80007bc:	40021800 	.word	0x40021800
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40020c00 	.word	0x40020c00
 80007c8:	40020400 	.word	0x40020400

080007cc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80007d4:	f7ff ff68 	bl	80006a8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b083      	sub	sp, #12
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
	...

08000814 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4a07      	ldr	r2, [pc, #28]	; (8000840 <vApplicationGetIdleTaskMemory+0x2c>)
 8000824:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	4a06      	ldr	r2, [pc, #24]	; (8000844 <vApplicationGetIdleTaskMemory+0x30>)
 800082a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000832:	bf00      	nop
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	2000006c 	.word	0x2000006c
 8000844:	200000c4 	.word	0x200000c4

08000848 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000848:	b5b0      	push	{r4, r5, r7, lr}
 800084a:	b08e      	sub	sp, #56	; 0x38
 800084c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_FREERTOS_Init+0x58>)
 8000850:	f107 041c 	add.w	r4, r7, #28
 8000854:	461d      	mov	r5, r3
 8000856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800085e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f005 f9b8 	bl	8005bde <osThreadCreate>
 800086e:	4603      	mov	r3, r0
 8000870:	4a0c      	ldr	r2, [pc, #48]	; (80008a4 <MX_FREERTOS_Init+0x5c>)
 8000872:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(touchTask, TouchGFX_Task, osPriorityNormal, 0, 4086);
 8000874:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_FREERTOS_Init+0x60>)
 8000876:	463c      	mov	r4, r7
 8000878:	461d      	mov	r5, r3
 800087a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800087c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800087e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000882:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  touchGFXTaskHandle = osThreadCreate(osThread(touchTask), NULL);
 8000886:	463b      	mov	r3, r7
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f005 f9a7 	bl	8005bde <osThreadCreate>
 8000890:	4603      	mov	r3, r0
 8000892:	4a06      	ldr	r2, [pc, #24]	; (80008ac <MX_FREERTOS_Init+0x64>)
 8000894:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

}
 8000896:	bf00      	nop
 8000898:	3738      	adds	r7, #56	; 0x38
 800089a:	46bd      	mov	sp, r7
 800089c:	bdb0      	pop	{r4, r5, r7, pc}
 800089e:	bf00      	nop
 80008a0:	08007150 	.word	0x08007150
 80008a4:	200084f4 	.word	0x200084f4
 80008a8:	0800716c 	.word	0x0800716c
 80008ac:	200084f8 	.word	0x200084f8

080008b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 80008b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <StartDefaultTask+0x1c>)
 80008be:	f002 f830 	bl	8002922 <HAL_GPIO_TogglePin>
	  osDelay(500);
 80008c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008c6:	f005 f9d6 	bl	8005c76 <osDelay>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 80008ca:	e7f5      	b.n	80008b8 <StartDefaultTask+0x8>
 80008cc:	40021800 	.word	0x40021800

080008d0 <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08e      	sub	sp, #56	; 0x38
 80008d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
 80008ea:	4b89      	ldr	r3, [pc, #548]	; (8000b10 <MX_GPIO_Init+0x240>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a88      	ldr	r2, [pc, #544]	; (8000b10 <MX_GPIO_Init+0x240>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b86      	ldr	r3, [pc, #536]	; (8000b10 <MX_GPIO_Init+0x240>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	623b      	str	r3, [r7, #32]
 8000900:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
 8000906:	4b82      	ldr	r3, [pc, #520]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	4a81      	ldr	r2, [pc, #516]	; (8000b10 <MX_GPIO_Init+0x240>)
 800090c:	f043 0320 	orr.w	r3, r3, #32
 8000910:	6313      	str	r3, [r2, #48]	; 0x30
 8000912:	4b7f      	ldr	r3, [pc, #508]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	f003 0320 	and.w	r3, r3, #32
 800091a:	61fb      	str	r3, [r7, #28]
 800091c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
 8000922:	4b7b      	ldr	r3, [pc, #492]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a7a      	ldr	r2, [pc, #488]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b78      	ldr	r3, [pc, #480]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000936:	61bb      	str	r3, [r7, #24]
 8000938:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	4b74      	ldr	r3, [pc, #464]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a73      	ldr	r2, [pc, #460]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b71      	ldr	r3, [pc, #452]	; (8000b10 <MX_GPIO_Init+0x240>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	4b6d      	ldr	r3, [pc, #436]	; (8000b10 <MX_GPIO_Init+0x240>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a6c      	ldr	r2, [pc, #432]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b6a      	ldr	r3, [pc, #424]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	4b66      	ldr	r3, [pc, #408]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a65      	ldr	r2, [pc, #404]	; (8000b10 <MX_GPIO_Init+0x240>)
 800097c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b63      	ldr	r3, [pc, #396]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	4b5f      	ldr	r3, [pc, #380]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a5e      	ldr	r2, [pc, #376]	; (8000b10 <MX_GPIO_Init+0x240>)
 8000998:	f043 0310 	orr.w	r3, r3, #16
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b5c      	ldr	r3, [pc, #368]	; (8000b10 <MX_GPIO_Init+0x240>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0310 	and.w	r3, r3, #16
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	4b58      	ldr	r3, [pc, #352]	; (8000b10 <MX_GPIO_Init+0x240>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a57      	ldr	r2, [pc, #348]	; (8000b10 <MX_GPIO_Init+0x240>)
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b55      	ldr	r3, [pc, #340]	; (8000b10 <MX_GPIO_Init+0x240>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0308 	and.w	r3, r3, #8
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2116      	movs	r1, #22
 80009ca:	4852      	ldr	r0, [pc, #328]	; (8000b14 <MX_GPIO_Init+0x244>)
 80009cc:	f001 ff90 	bl	80028f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2180      	movs	r1, #128	; 0x80
 80009d4:	4850      	ldr	r0, [pc, #320]	; (8000b18 <MX_GPIO_Init+0x248>)
 80009d6:	f001 ff8b 	bl	80028f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80009e0:	484e      	ldr	r0, [pc, #312]	; (8000b1c <MX_GPIO_Init+0x24c>)
 80009e2:	f001 ff85 	bl	80028f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80009ec:	484c      	ldr	r0, [pc, #304]	; (8000b20 <MX_GPIO_Init+0x250>)
 80009ee:	f001 ff7f 	bl	80028f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80009f2:	2316      	movs	r3, #22
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4619      	mov	r1, r3
 8000a08:	4842      	ldr	r0, [pc, #264]	; (8000b14 <MX_GPIO_Init+0x244>)
 8000a0a:	f001 fcb9 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000a0e:	f248 0307 	movw	r3, #32775	; 0x8007
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a14:	4b43      	ldr	r3, [pc, #268]	; (8000b24 <MX_GPIO_Init+0x254>)
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	483d      	ldr	r0, [pc, #244]	; (8000b18 <MX_GPIO_Init+0x248>)
 8000a24:	f001 fcac 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4836      	ldr	r0, [pc, #216]	; (8000b18 <MX_GPIO_Init+0x248>)
 8000a40:	f001 fc9e 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000a44:	2320      	movs	r3, #32
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a48:	4b36      	ldr	r3, [pc, #216]	; (8000b24 <MX_GPIO_Init+0x254>)
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	482f      	ldr	r0, [pc, #188]	; (8000b14 <MX_GPIO_Init+0x244>)
 8000a58:	f001 fc92 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a5c:	2304      	movs	r3, #4
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	482e      	ldr	r0, [pc, #184]	; (8000b28 <MX_GPIO_Init+0x258>)
 8000a70:	f001 fc86 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a74:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000a86:	230c      	movs	r3, #12
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4825      	ldr	r0, [pc, #148]	; (8000b28 <MX_GPIO_Init+0x258>)
 8000a92:	f001 fc75 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000a96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	481f      	ldr	r0, [pc, #124]	; (8000b28 <MX_GPIO_Init+0x258>)
 8000aac:	f001 fc68 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000ab0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4815      	ldr	r0, [pc, #84]	; (8000b1c <MX_GPIO_Init+0x24c>)
 8000ac6:	f001 fc5b 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000aca:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480e      	ldr	r0, [pc, #56]	; (8000b1c <MX_GPIO_Init+0x24c>)
 8000ae4:	f001 fc4c 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000ae8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000afe:	4619      	mov	r1, r3
 8000b00:	4807      	ldr	r0, [pc, #28]	; (8000b20 <MX_GPIO_Init+0x250>)
 8000b02:	f001 fc3d 	bl	8002380 <HAL_GPIO_Init>

}
 8000b06:	bf00      	nop
 8000b08:	3738      	adds	r7, #56	; 0x38
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020800 	.word	0x40020800
 8000b18:	40020000 	.word	0x40020000
 8000b1c:	40020c00 	.word	0x40020c00
 8000b20:	40021800 	.word	0x40021800
 8000b24:	10120000 	.word	0x10120000
 8000b28:	40020400 	.word	0x40020400

08000b2c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <MX_I2C3_Init+0x74>)
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <MX_I2C3_Init+0x78>)
 8000b34:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_I2C3_Init+0x74>)
 8000b38:	4a1b      	ldr	r2, [pc, #108]	; (8000ba8 <MX_I2C3_Init+0x7c>)
 8000b3a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <MX_I2C3_Init+0x74>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <MX_I2C3_Init+0x74>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b48:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_I2C3_Init+0x74>)
 8000b4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b4e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_I2C3_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_I2C3_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <MX_I2C3_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_I2C3_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b68:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <MX_I2C3_Init+0x74>)
 8000b6a:	f001 fef5 	bl	8002958 <HAL_I2C_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b74:	f000 fade 	bl	8001134 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4809      	ldr	r0, [pc, #36]	; (8000ba0 <MX_I2C3_Init+0x74>)
 8000b7c:	f002 f830 	bl	8002be0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000b86:	f000 fad5 	bl	8001134 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_I2C3_Init+0x74>)
 8000b8e:	f002 f863 	bl	8002c58 <HAL_I2CEx_ConfigDigitalFilter>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b98:	f000 facc 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	200084fc 	.word	0x200084fc
 8000ba4:	40005c00 	.word	0x40005c00
 8000ba8:	000186a0 	.word	0x000186a0

08000bac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a29      	ldr	r2, [pc, #164]	; (8000c70 <HAL_I2C_MspInit+0xc4>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d14b      	bne.n	8000c66 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <HAL_I2C_MspInit+0xc8>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a27      	ldr	r2, [pc, #156]	; (8000c74 <HAL_I2C_MspInit+0xc8>)
 8000bd8:	f043 0304 	orr.w	r3, r3, #4
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <HAL_I2C_MspInit+0xc8>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0304 	and.w	r3, r3, #4
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <HAL_I2C_MspInit+0xc8>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a20      	ldr	r2, [pc, #128]	; (8000c74 <HAL_I2C_MspInit+0xc8>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <HAL_I2C_MspInit+0xc8>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0c:	2312      	movs	r3, #18
 8000c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c18:	2304      	movs	r3, #4
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	4815      	ldr	r0, [pc, #84]	; (8000c78 <HAL_I2C_MspInit+0xcc>)
 8000c24:	f001 fbac 	bl	8002380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000c28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2e:	2312      	movs	r3, #18
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <HAL_I2C_MspInit+0xd0>)
 8000c46:	f001 fb9b 	bl	8002380 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_I2C_MspInit+0xc8>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_I2C_MspInit+0xc8>)
 8000c54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_I2C_MspInit+0xc8>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c66:	bf00      	nop
 8000c68:	3728      	adds	r7, #40	; 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40005c00 	.word	0x40005c00
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08e      	sub	sp, #56	; 0x38
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2234      	movs	r2, #52	; 0x34
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f006 fa3f 	bl	8007110 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c92:	4b39      	ldr	r3, [pc, #228]	; (8000d78 <MX_LTDC_Init+0xf8>)
 8000c94:	4a39      	ldr	r2, [pc, #228]	; (8000d7c <MX_LTDC_Init+0xfc>)
 8000c96:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c98:	4b37      	ldr	r3, [pc, #220]	; (8000d78 <MX_LTDC_Init+0xf8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c9e:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <MX_LTDC_Init+0xf8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ca4:	4b34      	ldr	r3, [pc, #208]	; (8000d78 <MX_LTDC_Init+0xf8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000caa:	4b33      	ldr	r3, [pc, #204]	; (8000d78 <MX_LTDC_Init+0xf8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000cb0:	4b31      	ldr	r3, [pc, #196]	; (8000d78 <MX_LTDC_Init+0xf8>)
 8000cb2:	2209      	movs	r2, #9
 8000cb4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000cb6:	4b30      	ldr	r3, [pc, #192]	; (8000d78 <MX_LTDC_Init+0xf8>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000cbc:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <MX_LTDC_Init+0xf8>)
 8000cbe:	221d      	movs	r2, #29
 8000cc0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000cc2:	4b2d      	ldr	r3, [pc, #180]	; (8000d78 <MX_LTDC_Init+0xf8>)
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	; (8000d78 <MX_LTDC_Init+0xf8>)
 8000cca:	f240 120d 	movw	r2, #269	; 0x10d
 8000cce:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000cd0:	4b29      	ldr	r3, [pc, #164]	; (8000d78 <MX_LTDC_Init+0xf8>)
 8000cd2:	f240 1243 	movw	r2, #323	; 0x143
 8000cd6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000cd8:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <MX_LTDC_Init+0xf8>)
 8000cda:	f240 1217 	movw	r2, #279	; 0x117
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000ce0:	4b25      	ldr	r3, [pc, #148]	; (8000d78 <MX_LTDC_Init+0xf8>)
 8000ce2:	f240 1247 	movw	r2, #327	; 0x147
 8000ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ce8:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <MX_LTDC_Init+0xf8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000cf0:	4b21      	ldr	r3, [pc, #132]	; (8000d78 <MX_LTDC_Init+0xf8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000cf8:	4b1f      	ldr	r3, [pc, #124]	; (8000d78 <MX_LTDC_Init+0xf8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000d00:	481d      	ldr	r0, [pc, #116]	; (8000d78 <MX_LTDC_Init+0xf8>)
 8000d02:	f001 ffe9 	bl	8002cd8 <HAL_LTDC_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000d0c:	f000 fa12 	bl	8001134 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000d14:	23f0      	movs	r3, #240	; 0xf0
 8000d16:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000d1c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d20:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000d22:	2302      	movs	r3, #2
 8000d24:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000d26:	23ff      	movs	r3, #255	; 0xff
 8000d28:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d32:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d34:	2305      	movs	r3, #5
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000d38:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8000d3e:	23f0      	movs	r3, #240	; 0xf0
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 8000d42:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d46:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_LTDC_Init+0xf8>)
 8000d62:	f002 f94b 	bl	8002ffc <HAL_LTDC_ConfigLayer>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000d6c:	f000 f9e2 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d70:	bf00      	nop
 8000d72:	3738      	adds	r7, #56	; 0x38
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20008550 	.word	0x20008550
 8000d7c:	40016800 	.word	0x40016800

08000d80 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b09a      	sub	sp, #104	; 0x68
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9c:	2230      	movs	r2, #48	; 0x30
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4618      	mov	r0, r3
 8000da2:	f006 f9b5 	bl	8007110 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a85      	ldr	r2, [pc, #532]	; (8000fc0 <HAL_LTDC_MspInit+0x240>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	f040 8102 	bne.w	8000fb6 <HAL_LTDC_MspInit+0x236>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000db2:	2308      	movs	r3, #8
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 49;
 8000db6:	2331      	movs	r3, #49	; 0x31
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2.0;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f002 ff94 	bl	8003cf4 <HAL_RCCEx_PeriphCLKConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000dd2:	f000 f9af 	bl	8001134 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]
 8000dda:	4b7a      	ldr	r3, [pc, #488]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	4a79      	ldr	r2, [pc, #484]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000de0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000de4:	6453      	str	r3, [r2, #68]	; 0x44
 8000de6:	4b77      	ldr	r3, [pc, #476]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dee:	623b      	str	r3, [r7, #32]
 8000df0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
 8000df6:	4b73      	ldr	r3, [pc, #460]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a72      	ldr	r2, [pc, #456]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000dfc:	f043 0320 	orr.w	r3, r3, #32
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b70      	ldr	r3, [pc, #448]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0320 	and.w	r3, r3, #32
 8000e0a:	61fb      	str	r3, [r7, #28]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
 8000e12:	4b6c      	ldr	r3, [pc, #432]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a6b      	ldr	r2, [pc, #428]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b69      	ldr	r3, [pc, #420]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	61bb      	str	r3, [r7, #24]
 8000e28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	4b65      	ldr	r3, [pc, #404]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a64      	ldr	r2, [pc, #400]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b62      	ldr	r3, [pc, #392]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	617b      	str	r3, [r7, #20]
 8000e44:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b5e      	ldr	r3, [pc, #376]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a5d      	ldr	r2, [pc, #372]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b5b      	ldr	r3, [pc, #364]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b57      	ldr	r3, [pc, #348]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a56      	ldr	r2, [pc, #344]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b54      	ldr	r3, [pc, #336]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0304 	and.w	r3, r3, #4
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b50      	ldr	r3, [pc, #320]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a4f      	ldr	r2, [pc, #316]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b4d      	ldr	r3, [pc, #308]	; (8000fc4 <HAL_LTDC_MspInit+0x244>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e9e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eac:	230e      	movs	r3, #14
 8000eae:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4844      	ldr	r0, [pc, #272]	; (8000fc8 <HAL_LTDC_MspInit+0x248>)
 8000eb8:	f001 fa62 	bl	8002380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000ebc:	f641 0358 	movw	r3, #6232	; 0x1858
 8000ec0:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ece:	230e      	movs	r3, #14
 8000ed0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	483c      	ldr	r0, [pc, #240]	; (8000fcc <HAL_LTDC_MspInit+0x24c>)
 8000eda:	f001 fa51 	bl	8002380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000eee:	2309      	movs	r3, #9
 8000ef0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4835      	ldr	r0, [pc, #212]	; (8000fd0 <HAL_LTDC_MspInit+0x250>)
 8000efa:	f001 fa41 	bl	8002380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000efe:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f02:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f10:	230e      	movs	r3, #14
 8000f12:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f18:	4619      	mov	r1, r3
 8000f1a:	482d      	ldr	r0, [pc, #180]	; (8000fd0 <HAL_LTDC_MspInit+0x250>)
 8000f1c:	f001 fa30 	bl	8002380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000f20:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000f24:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f26:	2302      	movs	r3, #2
 8000f28:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f32:	230e      	movs	r3, #14
 8000f34:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4825      	ldr	r0, [pc, #148]	; (8000fd4 <HAL_LTDC_MspInit+0x254>)
 8000f3e:	f001 fa1f 	bl	8002380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000f42:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000f46:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f54:	230e      	movs	r3, #14
 8000f56:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f58:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	481e      	ldr	r0, [pc, #120]	; (8000fd8 <HAL_LTDC_MspInit+0x258>)
 8000f60:	f001 fa0e 	bl	8002380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000f64:	2348      	movs	r3, #72	; 0x48
 8000f66:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f70:	2300      	movs	r3, #0
 8000f72:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f74:	230e      	movs	r3, #14
 8000f76:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4817      	ldr	r0, [pc, #92]	; (8000fdc <HAL_LTDC_MspInit+0x25c>)
 8000f80:	f001 f9fe 	bl	8002380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000f84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f88:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f96:	2309      	movs	r3, #9
 8000f98:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <HAL_LTDC_MspInit+0x254>)
 8000fa2:	f001 f9ed 	bl	8002380 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2105      	movs	r1, #5
 8000faa:	2058      	movs	r0, #88	; 0x58
 8000fac:	f000 ffb6 	bl	8001f1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000fb0:	2058      	movs	r0, #88	; 0x58
 8000fb2:	f000 ffcf 	bl	8001f54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	3768      	adds	r7, #104	; 0x68
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40016800 	.word	0x40016800
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	40021400 	.word	0x40021400
 8000fcc:	40020000 	.word	0x40020000
 8000fd0:	40020400 	.word	0x40020400
 8000fd4:	40021800 	.word	0x40021800
 8000fd8:	40020800 	.word	0x40020800
 8000fdc:	40020c00 	.word	0x40020c00

08000fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe4:	f000 fe7c 	bl	8001ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe8:	f000 f828 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fec:	f7ff fc70 	bl	80008d0 <MX_GPIO_Init>
  MX_CRC_Init();
 8000ff0:	f7ff fa7a 	bl	80004e8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000ff4:	f7ff faae 	bl	8000554 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000ff8:	f7ff fb06 	bl	8000608 <MX_FMC_Init>
  MX_I2C3_Init();
 8000ffc:	f7ff fd96 	bl	8000b2c <MX_I2C3_Init>
  MX_LTDC_Init();
 8001000:	f7ff fe3e 	bl	8000c80 <MX_LTDC_Init>
  MX_SPI5_Init();
 8001004:	f000 f89c 	bl	8001140 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001008:	f000 fa02 	bl	8001410 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800100c:	f000 fa72 	bl	80014f4 <MX_USART1_UART_Init>
  MX_TouchGFX_Init();
 8001010:	f006 f848 	bl	80070a4 <MX_TouchGFX_Init>
  /* USER CODE BEGIN 2 */
  LcdDrv = &ili9341_drv;
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <main+0x54>)
 8001016:	4a08      	ldr	r2, [pc, #32]	; (8001038 <main+0x58>)
 8001018:	601a      	str	r2, [r3, #0]
  LcdDrv->Init();
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <main+0x54>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4798      	blx	r3
  LcdDrv->DisplayOff();
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <main+0x54>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	4798      	blx	r3
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800102a:	f7ff fc0d 	bl	8000848 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800102e:	f004 fdcf 	bl	8005bd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001032:	e7fe      	b.n	8001032 <main+0x52>
 8001034:	200002c4 	.word	0x200002c4
 8001038:	20000004 	.word	0x20000004

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b094      	sub	sp, #80	; 0x50
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0320 	add.w	r3, r7, #32
 8001046:	2230      	movs	r2, #48	; 0x30
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f006 f860 	bl	8007110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001060:	2300      	movs	r3, #0
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	4b28      	ldr	r3, [pc, #160]	; (8001108 <SystemClock_Config+0xcc>)
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	4a27      	ldr	r2, [pc, #156]	; (8001108 <SystemClock_Config+0xcc>)
 800106a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800106e:	6413      	str	r3, [r2, #64]	; 0x40
 8001070:	4b25      	ldr	r3, [pc, #148]	; (8001108 <SystemClock_Config+0xcc>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800107c:	2300      	movs	r3, #0
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	4b22      	ldr	r3, [pc, #136]	; (800110c <SystemClock_Config+0xd0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001088:	4a20      	ldr	r2, [pc, #128]	; (800110c <SystemClock_Config+0xd0>)
 800108a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b1e      	ldr	r3, [pc, #120]	; (800110c <SystemClock_Config+0xd0>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800109c:	2301      	movs	r3, #1
 800109e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a6:	2302      	movs	r3, #2
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010b0:	2310      	movs	r3, #16
 80010b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80010b4:	2348      	movs	r3, #72	; 0x48
 80010b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80010bc:	2303      	movs	r3, #3
 80010be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c0:	f107 0320 	add.w	r3, r7, #32
 80010c4:	4618      	mov	r0, r3
 80010c6:	f002 f96f 	bl	80033a8 <HAL_RCC_OscConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010d0:	f000 f830 	bl	8001134 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d4:	230f      	movs	r3, #15
 80010d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d8:	2302      	movs	r3, #2
 80010da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	2102      	movs	r1, #2
 80010f0:	4618      	mov	r0, r3
 80010f2:	f002 fbd1 	bl	8003898 <HAL_RCC_ClockConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010fc:	f000 f81a 	bl	8001134 <Error_Handler>
  }
}
 8001100:	bf00      	nop
 8001102:	3750      	adds	r7, #80	; 0x50
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000

08001110 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d101      	bne.n	8001126 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001122:	f000 fdff 	bl	8001d24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40001000 	.word	0x40001000

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	e7fe      	b.n	800113c <Error_Handler+0x8>
	...

08001140 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001144:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <MX_SPI5_Init+0x64>)
 8001146:	4a18      	ldr	r2, [pc, #96]	; (80011a8 <MX_SPI5_Init+0x68>)
 8001148:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800114a:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_SPI5_Init+0x64>)
 800114c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001150:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <MX_SPI5_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_SPI5_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_SPI5_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_SPI5_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_SPI5_Init+0x64>)
 800116c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001170:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_SPI5_Init+0x64>)
 8001174:	2218      	movs	r2, #24
 8001176:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <MX_SPI5_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_SPI5_Init+0x64>)
 8001180:	2200      	movs	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <MX_SPI5_Init+0x64>)
 8001186:	2200      	movs	r2, #0
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_SPI5_Init+0x64>)
 800118c:	220a      	movs	r2, #10
 800118e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_SPI5_Init+0x64>)
 8001192:	f002 ffa1 	bl	80040d8 <HAL_SPI_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800119c:	f7ff ffca 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200085f8 	.word	0x200085f8
 80011a8:	40015000 	.word	0x40015000

080011ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a19      	ldr	r2, [pc, #100]	; (8001230 <HAL_SPI_MspInit+0x84>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d12c      	bne.n	8001228 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <HAL_SPI_MspInit+0x88>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	4a17      	ldr	r2, [pc, #92]	; (8001234 <HAL_SPI_MspInit+0x88>)
 80011d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80011dc:	6453      	str	r3, [r2, #68]	; 0x44
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <HAL_SPI_MspInit+0x88>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <HAL_SPI_MspInit+0x88>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a10      	ldr	r2, [pc, #64]	; (8001234 <HAL_SPI_MspInit+0x88>)
 80011f4:	f043 0320 	orr.w	r3, r3, #32
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_SPI_MspInit+0x88>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0320 	and.w	r3, r3, #32
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001206:	f44f 7360 	mov.w	r3, #896	; 0x380
 800120a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001218:	2305      	movs	r3, #5
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <HAL_SPI_MspInit+0x8c>)
 8001224:	f001 f8ac 	bl	8002380 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	; 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40015000 	.word	0x40015000
 8001234:	40023800 	.word	0x40023800
 8001238:	40021400 	.word	0x40021400

0800123c <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI5)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a08      	ldr	r2, [pc, #32]	; (800126c <HAL_SPI_MspDeInit+0x30>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d10a      	bne.n	8001264 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <HAL_SPI_MspDeInit+0x34>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a07      	ldr	r2, [pc, #28]	; (8001270 <HAL_SPI_MspDeInit+0x34>)
 8001254:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800125a:	f44f 7160 	mov.w	r1, #896	; 0x380
 800125e:	4805      	ldr	r0, [pc, #20]	; (8001274 <HAL_SPI_MspDeInit+0x38>)
 8001260:	f001 fa3a 	bl	80026d8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40015000 	.word	0x40015000
 8001270:	40023800 	.word	0x40023800
 8001274:	40021400 	.word	0x40021400

08001278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_MspInit+0x54>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a11      	ldr	r2, [pc, #68]	; (80012cc <HAL_MspInit+0x54>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_MspInit+0x54>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <HAL_MspInit+0x54>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <HAL_MspInit+0x54>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_MspInit+0x54>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	210f      	movs	r1, #15
 80012ba:	f06f 0001 	mvn.w	r0, #1
 80012be:	f000 fe2d 	bl	8001f1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800

080012d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80012e0:	2200      	movs	r2, #0
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	2036      	movs	r0, #54	; 0x36
 80012e6:	f000 fe19 	bl	8001f1c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012ea:	2036      	movs	r0, #54	; 0x36
 80012ec:	f000 fe32 	bl	8001f54 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <HAL_InitTick+0xa4>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	4a1e      	ldr	r2, [pc, #120]	; (8001374 <HAL_InitTick+0xa4>)
 80012fa:	f043 0310 	orr.w	r3, r3, #16
 80012fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001300:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <HAL_InitTick+0xa4>)
 8001302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800130c:	f107 0210 	add.w	r2, r7, #16
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4611      	mov	r1, r2
 8001316:	4618      	mov	r0, r3
 8001318:	f002 fcba 	bl	8003c90 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800131c:	f002 fc90 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 8001320:	4603      	mov	r3, r0
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001328:	4a13      	ldr	r2, [pc, #76]	; (8001378 <HAL_InitTick+0xa8>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	0c9b      	lsrs	r3, r3, #18
 8001330:	3b01      	subs	r3, #1
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_InitTick+0xac>)
 8001336:	4a12      	ldr	r2, [pc, #72]	; (8001380 <HAL_InitTick+0xb0>)
 8001338:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <HAL_InitTick+0xac>)
 800133c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001340:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001342:	4a0e      	ldr	r2, [pc, #56]	; (800137c <HAL_InitTick+0xac>)
 8001344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001346:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <HAL_InitTick+0xac>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_InitTick+0xac>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001354:	4809      	ldr	r0, [pc, #36]	; (800137c <HAL_InitTick+0xac>)
 8001356:	f003 fc9d 	bl	8004c94 <HAL_TIM_Base_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d104      	bne.n	800136a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001360:	4806      	ldr	r0, [pc, #24]	; (800137c <HAL_InitTick+0xac>)
 8001362:	f003 fce7 	bl	8004d34 <HAL_TIM_Base_Start_IT>
 8001366:	4603      	mov	r3, r0
 8001368:	e000      	b.n	800136c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3730      	adds	r7, #48	; 0x30
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40023800 	.word	0x40023800
 8001378:	431bde83 	.word	0x431bde83
 800137c:	20008650 	.word	0x20008650
 8001380:	40001000 	.word	0x40001000

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <NMI_Handler+0x4>

0800138a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <MemManage_Handler+0x4>

08001396 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80013b4:	4802      	ldr	r0, [pc, #8]	; (80013c0 <TIM6_DAC_IRQHandler+0x10>)
 80013b6:	f003 fd2d 	bl	8004e14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20008650 	.word	0x20008650

080013c4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <LTDC_IRQHandler+0x10>)
 80013ca:	f001 fd55 	bl	8002e78 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20008550 	.word	0x20008550

080013d8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80013dc:	4802      	ldr	r0, [pc, #8]	; (80013e8 <DMA2D_IRQHandler+0x10>)
 80013de:	f000 fe2c 	bl	800203a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20008480 	.word	0x20008480

080013ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <SystemInit+0x20>)
 80013f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <SystemInit+0x20>)
 80013f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001424:	463b      	mov	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800142c:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <MX_TIM1_Init+0x98>)
 800142e:	4a1f      	ldr	r2, [pc, #124]	; (80014ac <MX_TIM1_Init+0x9c>)
 8001430:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <MX_TIM1_Init+0x98>)
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <MX_TIM1_Init+0x98>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_TIM1_Init+0x98>)
 8001440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001444:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <MX_TIM1_Init+0x98>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MX_TIM1_Init+0x98>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_TIM1_Init+0x98>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001458:	4813      	ldr	r0, [pc, #76]	; (80014a8 <MX_TIM1_Init+0x98>)
 800145a:	f003 fc1b 	bl	8004c94 <HAL_TIM_Base_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001464:	f7ff fe66 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	4619      	mov	r1, r3
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <MX_TIM1_Init+0x98>)
 8001476:	f003 fdd5 	bl	8005024 <HAL_TIM_ConfigClockSource>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001480:	f7ff fe58 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001484:	2300      	movs	r3, #0
 8001486:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800148c:	463b      	mov	r3, r7
 800148e:	4619      	mov	r1, r3
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_TIM1_Init+0x98>)
 8001492:	f003 ffed 	bl	8005470 <HAL_TIMEx_MasterConfigSynchronization>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800149c:	f7ff fe4a 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014a0:	bf00      	nop
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20008698 	.word	0x20008698
 80014ac:	40010000 	.word	0x40010000

080014b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0b      	ldr	r2, [pc, #44]	; (80014ec <HAL_TIM_Base_MspInit+0x3c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d10d      	bne.n	80014de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_TIM_Base_MspInit+0x40>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <HAL_TIM_Base_MspInit+0x40>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6453      	str	r3, [r2, #68]	; 0x44
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <HAL_TIM_Base_MspInit+0x40>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40010000 	.word	0x40010000
 80014f0:	40023800 	.word	0x40023800

080014f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	; (8001544 <MX_USART1_UART_Init+0x50>)
 80014fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 8001500:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001504:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 800151a:	220c      	movs	r2, #12
 800151c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_USART1_UART_Init+0x4c>)
 800152c:	f004 f830 	bl	8005590 <HAL_UART_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001536:	f7ff fdfd 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200086e0 	.word	0x200086e0
 8001544:	40011000 	.word	0x40011000

08001548 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a19      	ldr	r2, [pc, #100]	; (80015cc <HAL_UART_MspInit+0x84>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d12c      	bne.n	80015c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	4a17      	ldr	r2, [pc, #92]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001574:	f043 0310 	orr.w	r3, r3, #16
 8001578:	6453      	str	r3, [r2, #68]	; 0x44
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_UART_MspInit+0x88>)
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HAL_UART_MspInit+0x88>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a10      	ldr	r2, [pc, #64]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <HAL_UART_MspInit+0x88>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80015a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015b4:	2307      	movs	r3, #7
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	4619      	mov	r1, r3
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <HAL_UART_MspInit+0x8c>)
 80015c0:	f000 fede 	bl	8002380 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015c4:	bf00      	nop
 80015c6:	3728      	adds	r7, #40	; 0x28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40011000 	.word	0x40011000
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020000 	.word	0x40020000

080015d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80015d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001610 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015dc:	480d      	ldr	r0, [pc, #52]	; (8001614 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015de:	490e      	ldr	r1, [pc, #56]	; (8001618 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015e0:	4a0e      	ldr	r2, [pc, #56]	; (800161c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015e4:	e002      	b.n	80015ec <LoopCopyDataInit>

080015e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ea:	3304      	adds	r3, #4

080015ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f0:	d3f9      	bcc.n	80015e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015f2:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015f4:	4c0b      	ldr	r4, [pc, #44]	; (8001624 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015f8:	e001      	b.n	80015fe <LoopFillZerobss>

080015fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015fc:	3204      	adds	r2, #4

080015fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001600:	d3fb      	bcc.n	80015fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001602:	f7ff fef3 	bl	80013ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001606:	f005 fd5f 	bl	80070c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800160a:	f7ff fce9 	bl	8000fe0 <main>
  bx  lr    
 800160e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001610:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 800161c:	080071b8 	.word	0x080071b8
  ldr r2, =_sbss
 8001620:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8001624:	20008728 	.word	0x20008728

08001628 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC_IRQHandler>

0800162a <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800162e:	f000 fa5d 	bl	8001aec <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001632:	20ca      	movs	r0, #202	; 0xca
 8001634:	f000 f95d 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001638:	20c3      	movs	r0, #195	; 0xc3
 800163a:	f000 f967 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800163e:	2008      	movs	r0, #8
 8001640:	f000 f964 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001644:	2050      	movs	r0, #80	; 0x50
 8001646:	f000 f961 	bl	800190c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 800164a:	20cf      	movs	r0, #207	; 0xcf
 800164c:	f000 f951 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001650:	2000      	movs	r0, #0
 8001652:	f000 f95b 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001656:	20c1      	movs	r0, #193	; 0xc1
 8001658:	f000 f958 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x30);
 800165c:	2030      	movs	r0, #48	; 0x30
 800165e:	f000 f955 	bl	800190c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001662:	20ed      	movs	r0, #237	; 0xed
 8001664:	f000 f945 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001668:	2064      	movs	r0, #100	; 0x64
 800166a:	f000 f94f 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800166e:	2003      	movs	r0, #3
 8001670:	f000 f94c 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001674:	2012      	movs	r0, #18
 8001676:	f000 f949 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x81);
 800167a:	2081      	movs	r0, #129	; 0x81
 800167c:	f000 f946 	bl	800190c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001680:	20e8      	movs	r0, #232	; 0xe8
 8001682:	f000 f936 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001686:	2085      	movs	r0, #133	; 0x85
 8001688:	f000 f940 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800168c:	2000      	movs	r0, #0
 800168e:	f000 f93d 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001692:	2078      	movs	r0, #120	; 0x78
 8001694:	f000 f93a 	bl	800190c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001698:	20cb      	movs	r0, #203	; 0xcb
 800169a:	f000 f92a 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800169e:	2039      	movs	r0, #57	; 0x39
 80016a0:	f000 f934 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80016a4:	202c      	movs	r0, #44	; 0x2c
 80016a6:	f000 f931 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80016aa:	2000      	movs	r0, #0
 80016ac:	f000 f92e 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80016b0:	2034      	movs	r0, #52	; 0x34
 80016b2:	f000 f92b 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80016b6:	2002      	movs	r0, #2
 80016b8:	f000 f928 	bl	800190c <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80016bc:	20f7      	movs	r0, #247	; 0xf7
 80016be:	f000 f918 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80016c2:	2020      	movs	r0, #32
 80016c4:	f000 f922 	bl	800190c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 80016c8:	20ea      	movs	r0, #234	; 0xea
 80016ca:	f000 f912 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f000 f91c 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80016d4:	2000      	movs	r0, #0
 80016d6:	f000 f919 	bl	800190c <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 80016da:	20b1      	movs	r0, #177	; 0xb1
 80016dc:	f000 f909 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80016e0:	2000      	movs	r0, #0
 80016e2:	f000 f913 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80016e6:	201b      	movs	r0, #27
 80016e8:	f000 f910 	bl	800190c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80016ec:	20b6      	movs	r0, #182	; 0xb6
 80016ee:	f000 f900 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80016f2:	200a      	movs	r0, #10
 80016f4:	f000 f90a 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80016f8:	20a2      	movs	r0, #162	; 0xa2
 80016fa:	f000 f907 	bl	800190c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80016fe:	20c0      	movs	r0, #192	; 0xc0
 8001700:	f000 f8f7 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001704:	2010      	movs	r0, #16
 8001706:	f000 f901 	bl	800190c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800170a:	20c1      	movs	r0, #193	; 0xc1
 800170c:	f000 f8f1 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001710:	2010      	movs	r0, #16
 8001712:	f000 f8fb 	bl	800190c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001716:	20c5      	movs	r0, #197	; 0xc5
 8001718:	f000 f8eb 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800171c:	2045      	movs	r0, #69	; 0x45
 800171e:	f000 f8f5 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001722:	2015      	movs	r0, #21
 8001724:	f000 f8f2 	bl	800190c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001728:	20c7      	movs	r0, #199	; 0xc7
 800172a:	f000 f8e2 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800172e:	2090      	movs	r0, #144	; 0x90
 8001730:	f000 f8ec 	bl	800190c <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001734:	2036      	movs	r0, #54	; 0x36
 8001736:	f000 f8dc 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 800173a:	20c8      	movs	r0, #200	; 0xc8
 800173c:	f000 f8e6 	bl	800190c <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001740:	20f2      	movs	r0, #242	; 0xf2
 8001742:	f000 f8d6 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001746:	2000      	movs	r0, #0
 8001748:	f000 f8e0 	bl	800190c <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 800174c:	20b0      	movs	r0, #176	; 0xb0
 800174e:	f000 f8d0 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001752:	20c2      	movs	r0, #194	; 0xc2
 8001754:	f000 f8da 	bl	800190c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001758:	20b6      	movs	r0, #182	; 0xb6
 800175a:	f000 f8ca 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800175e:	200a      	movs	r0, #10
 8001760:	f000 f8d4 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001764:	20a7      	movs	r0, #167	; 0xa7
 8001766:	f000 f8d1 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x27);
 800176a:	2027      	movs	r0, #39	; 0x27
 800176c:	f000 f8ce 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001770:	2004      	movs	r0, #4
 8001772:	f000 f8cb 	bl	800190c <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001776:	202a      	movs	r0, #42	; 0x2a
 8001778:	f000 f8bb 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800177c:	2000      	movs	r0, #0
 800177e:	f000 f8c5 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001782:	2000      	movs	r0, #0
 8001784:	f000 f8c2 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001788:	2000      	movs	r0, #0
 800178a:	f000 f8bf 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800178e:	20ef      	movs	r0, #239	; 0xef
 8001790:	f000 f8bc 	bl	800190c <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001794:	202b      	movs	r0, #43	; 0x2b
 8001796:	f000 f8ac 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800179a:	2000      	movs	r0, #0
 800179c:	f000 f8b6 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017a0:	2000      	movs	r0, #0
 80017a2:	f000 f8b3 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80017a6:	2001      	movs	r0, #1
 80017a8:	f000 f8b0 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80017ac:	203f      	movs	r0, #63	; 0x3f
 80017ae:	f000 f8ad 	bl	800190c <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80017b2:	20f6      	movs	r0, #246	; 0xf6
 80017b4:	f000 f89d 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80017b8:	2001      	movs	r0, #1
 80017ba:	f000 f8a7 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017be:	2000      	movs	r0, #0
 80017c0:	f000 f8a4 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x06);
 80017c4:	2006      	movs	r0, #6
 80017c6:	f000 f8a1 	bl	800190c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 80017ca:	202c      	movs	r0, #44	; 0x2c
 80017cc:	f000 f891 	bl	80018f2 <ili9341_WriteReg>
  LCD_Delay(200);
 80017d0:	20c8      	movs	r0, #200	; 0xc8
 80017d2:	f000 fa79 	bl	8001cc8 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 80017d6:	2026      	movs	r0, #38	; 0x26
 80017d8:	f000 f88b 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80017dc:	2001      	movs	r0, #1
 80017de:	f000 f895 	bl	800190c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 80017e2:	20e0      	movs	r0, #224	; 0xe0
 80017e4:	f000 f885 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80017e8:	200f      	movs	r0, #15
 80017ea:	f000 f88f 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80017ee:	2029      	movs	r0, #41	; 0x29
 80017f0:	f000 f88c 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80017f4:	2024      	movs	r0, #36	; 0x24
 80017f6:	f000 f889 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80017fa:	200c      	movs	r0, #12
 80017fc:	f000 f886 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001800:	200e      	movs	r0, #14
 8001802:	f000 f883 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001806:	2009      	movs	r0, #9
 8001808:	f000 f880 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 800180c:	204e      	movs	r0, #78	; 0x4e
 800180e:	f000 f87d 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001812:	2078      	movs	r0, #120	; 0x78
 8001814:	f000 f87a 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001818:	203c      	movs	r0, #60	; 0x3c
 800181a:	f000 f877 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800181e:	2009      	movs	r0, #9
 8001820:	f000 f874 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001824:	2013      	movs	r0, #19
 8001826:	f000 f871 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800182a:	2005      	movs	r0, #5
 800182c:	f000 f86e 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001830:	2017      	movs	r0, #23
 8001832:	f000 f86b 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001836:	2011      	movs	r0, #17
 8001838:	f000 f868 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800183c:	2000      	movs	r0, #0
 800183e:	f000 f865 	bl	800190c <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001842:	20e1      	movs	r0, #225	; 0xe1
 8001844:	f000 f855 	bl	80018f2 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001848:	2000      	movs	r0, #0
 800184a:	f000 f85f 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800184e:	2016      	movs	r0, #22
 8001850:	f000 f85c 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001854:	201b      	movs	r0, #27
 8001856:	f000 f859 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800185a:	2004      	movs	r0, #4
 800185c:	f000 f856 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001860:	2011      	movs	r0, #17
 8001862:	f000 f853 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001866:	2007      	movs	r0, #7
 8001868:	f000 f850 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x31);
 800186c:	2031      	movs	r0, #49	; 0x31
 800186e:	f000 f84d 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001872:	2033      	movs	r0, #51	; 0x33
 8001874:	f000 f84a 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001878:	2042      	movs	r0, #66	; 0x42
 800187a:	f000 f847 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800187e:	2005      	movs	r0, #5
 8001880:	f000 f844 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001884:	200c      	movs	r0, #12
 8001886:	f000 f841 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 800188a:	200a      	movs	r0, #10
 800188c:	f000 f83e 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001890:	2028      	movs	r0, #40	; 0x28
 8001892:	f000 f83b 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001896:	202f      	movs	r0, #47	; 0x2f
 8001898:	f000 f838 	bl	800190c <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 800189c:	200f      	movs	r0, #15
 800189e:	f000 f835 	bl	800190c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80018a2:	2011      	movs	r0, #17
 80018a4:	f000 f825 	bl	80018f2 <ili9341_WriteReg>
  LCD_Delay(200);
 80018a8:	20c8      	movs	r0, #200	; 0xc8
 80018aa:	f000 fa0d 	bl	8001cc8 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80018ae:	2029      	movs	r0, #41	; 0x29
 80018b0:	f000 f81f 	bl	80018f2 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80018b4:	202c      	movs	r0, #44	; 0x2c
 80018b6:	f000 f81c 	bl	80018f2 <ili9341_WriteReg>
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}

080018be <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80018c2:	f000 f913 	bl	8001aec <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 80018c6:	2103      	movs	r1, #3
 80018c8:	20d3      	movs	r0, #211	; 0xd3
 80018ca:	f000 f82c 	bl	8001926 <ili9341_ReadData>
 80018ce:	4603      	mov	r3, r0
 80018d0:	b29b      	uxth	r3, r3
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80018da:	2029      	movs	r0, #41	; 0x29
 80018dc:	f000 f809 	bl	80018f2 <ili9341_WriteReg>
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80018e8:	2028      	movs	r0, #40	; 0x28
 80018ea:	f000 f802 	bl	80018f2 <ili9341_WriteReg>
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f98e 	bl	8001c20 <LCD_IO_WriteReg>
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	4618      	mov	r0, r3
 800191a:	f000 f95f 	bl	8001bdc <LCD_IO_WriteData>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	460a      	mov	r2, r1
 8001930:	80fb      	strh	r3, [r7, #6]
 8001932:	4613      	mov	r3, r2
 8001934:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001936:	797a      	ldrb	r2, [r7, #5]
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f000 f991 	bl	8001c64 <LCD_IO_ReadData>
 8001942:	4603      	mov	r3, r0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001950:	23f0      	movs	r3, #240	; 0xf0
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001960:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001964:	4618      	mov	r0, r3
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001974:	4819      	ldr	r0, [pc, #100]	; (80019dc <SPIx_Init+0x6c>)
 8001976:	f003 f84f 	bl	8004a18 <HAL_SPI_GetState>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d12b      	bne.n	80019d8 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001980:	4b16      	ldr	r3, [pc, #88]	; (80019dc <SPIx_Init+0x6c>)
 8001982:	4a17      	ldr	r2, [pc, #92]	; (80019e0 <SPIx_Init+0x70>)
 8001984:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <SPIx_Init+0x6c>)
 8001988:	2218      	movs	r2, #24
 800198a:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <SPIx_Init+0x6c>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <SPIx_Init+0x6c>)
 8001994:	2200      	movs	r2, #0
 8001996:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001998:	4b10      	ldr	r3, [pc, #64]	; (80019dc <SPIx_Init+0x6c>)
 800199a:	2200      	movs	r2, #0
 800199c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <SPIx_Init+0x6c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80019a4:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <SPIx_Init+0x6c>)
 80019a6:	2207      	movs	r2, #7
 80019a8:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80019aa:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <SPIx_Init+0x6c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <SPIx_Init+0x6c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80019b6:	4b09      	ldr	r3, [pc, #36]	; (80019dc <SPIx_Init+0x6c>)
 80019b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019bc:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <SPIx_Init+0x6c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <SPIx_Init+0x6c>)
 80019c6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019ca:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80019cc:	4803      	ldr	r0, [pc, #12]	; (80019dc <SPIx_Init+0x6c>)
 80019ce:	f000 f853 	bl	8001a78 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80019d2:	4802      	ldr	r0, [pc, #8]	; (80019dc <SPIx_Init+0x6c>)
 80019d4:	f002 fb80 	bl	80040d8 <HAL_SPI_Init>
  } 
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	200002c8 	.word	0x200002c8
 80019e0:	40015000 	.word	0x40015000

080019e4 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	b29a      	uxth	r2, r3
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <SPIx_Read+0x38>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f107 0108 	add.w	r1, r7, #8
 80019fe:	4808      	ldr	r0, [pc, #32]	; (8001a20 <SPIx_Read+0x3c>)
 8001a00:	f002 fd57 	bl	80044b2 <HAL_SPI_Receive>
 8001a04:	4603      	mov	r3, r0
 8001a06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001a0e:	f000 f827 	bl	8001a60 <SPIx_Error>
  }
  
  return readvalue;
 8001a12:	68bb      	ldr	r3, [r7, #8]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	2000003c 	.word	0x2000003c
 8001a20:	200002c8 	.word	0x200002c8

08001a24 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <SPIx_Write+0x34>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	1db9      	adds	r1, r7, #6
 8001a38:	2201      	movs	r2, #1
 8001a3a:	4808      	ldr	r0, [pc, #32]	; (8001a5c <SPIx_Write+0x38>)
 8001a3c:	f002 fbfd 	bl	800423a <HAL_SPI_Transmit>
 8001a40:	4603      	mov	r3, r0
 8001a42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001a4a:	f000 f809 	bl	8001a60 <SPIx_Error>
  }
}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2000003c 	.word	0x2000003c
 8001a5c:	200002c8 	.word	0x200002c8

08001a60 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001a64:	4803      	ldr	r0, [pc, #12]	; (8001a74 <SPIx_Error+0x14>)
 8001a66:	f002 fbc0 	bl	80041ea <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001a6a:	f7ff ff81 	bl	8001970 <SPIx_Init>
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200002c8 	.word	0x200002c8

08001a78 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <SPIx_MspInit+0x6c>)
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	4a16      	ldr	r2, [pc, #88]	; (8001ae4 <SPIx_MspInit+0x6c>)
 8001a8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a8e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <SPIx_MspInit+0x6c>)
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <SPIx_MspInit+0x6c>)
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa4:	4a0f      	ldr	r2, [pc, #60]	; (8001ae4 <SPIx_MspInit+0x6c>)
 8001aa6:	f043 0320 	orr.w	r3, r3, #32
 8001aaa:	6313      	str	r3, [r2, #48]	; 0x30
 8001aac:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <SPIx_MspInit+0x6c>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	f003 0320 	and.w	r3, r3, #32
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001ab8:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001aca:	2305      	movs	r3, #5
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <SPIx_MspInit+0x70>)
 8001ad6:	f000 fc53 	bl	8002380 <HAL_GPIO_Init>
}
 8001ada:	bf00      	nop
 8001adc:	3728      	adds	r7, #40	; 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40021400 	.word	0x40021400

08001aec <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b088      	sub	sp, #32
 8001af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001af2:	4b36      	ldr	r3, [pc, #216]	; (8001bcc <LCD_IO_Init+0xe0>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d164      	bne.n	8001bc4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001afa:	4b34      	ldr	r3, [pc, #208]	; (8001bcc <LCD_IO_Init+0xe0>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	4b32      	ldr	r3, [pc, #200]	; (8001bd0 <LCD_IO_Init+0xe4>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	4a31      	ldr	r2, [pc, #196]	; (8001bd0 <LCD_IO_Init+0xe4>)
 8001b0a:	f043 0308 	orr.w	r3, r3, #8
 8001b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b10:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <LCD_IO_Init+0xe4>)
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b22:	2301      	movs	r3, #1
 8001b24:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	4619      	mov	r1, r3
 8001b34:	4827      	ldr	r0, [pc, #156]	; (8001bd4 <LCD_IO_Init+0xe8>)
 8001b36:	f000 fc23 	bl	8002380 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <LCD_IO_Init+0xe4>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a23      	ldr	r2, [pc, #140]	; (8001bd0 <LCD_IO_Init+0xe4>)
 8001b44:	f043 0308 	orr.w	r3, r3, #8
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <LCD_IO_Init+0xe4>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0308 	and.w	r3, r3, #8
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b5a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b64:	2302      	movs	r3, #2
 8001b66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4819      	ldr	r0, [pc, #100]	; (8001bd4 <LCD_IO_Init+0xe8>)
 8001b70:	f000 fc06 	bl	8002380 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001b74:	2300      	movs	r3, #0
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <LCD_IO_Init+0xe4>)
 8001b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7c:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <LCD_IO_Init+0xe4>)
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	6313      	str	r3, [r2, #48]	; 0x30
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <LCD_IO_Init+0xe4>)
 8001b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	603b      	str	r3, [r7, #0]
 8001b8e:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001b90:	2304      	movs	r3, #4
 8001b92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	480c      	ldr	r0, [pc, #48]	; (8001bd8 <LCD_IO_Init+0xec>)
 8001ba8:	f000 fbea 	bl	8002380 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001bac:	2200      	movs	r2, #0
 8001bae:	2104      	movs	r1, #4
 8001bb0:	4809      	ldr	r0, [pc, #36]	; (8001bd8 <LCD_IO_Init+0xec>)
 8001bb2:	f000 fe9d 	bl	80028f0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	2104      	movs	r1, #4
 8001bba:	4807      	ldr	r0, [pc, #28]	; (8001bd8 <LCD_IO_Init+0xec>)
 8001bbc:	f000 fe98 	bl	80028f0 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001bc0:	f7ff fed6 	bl	8001970 <SPIx_Init>
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	3720      	adds	r7, #32
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000320 	.word	0x20000320
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40020c00 	.word	0x40020c00
 8001bd8:	40020800 	.word	0x40020800

08001bdc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001be6:	2201      	movs	r2, #1
 8001be8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bec:	480a      	ldr	r0, [pc, #40]	; (8001c18 <LCD_IO_WriteData+0x3c>)
 8001bee:	f000 fe7f 	bl	80028f0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	4809      	ldr	r0, [pc, #36]	; (8001c1c <LCD_IO_WriteData+0x40>)
 8001bf8:	f000 fe7a 	bl	80028f0 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ff10 	bl	8001a24 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001c04:	2201      	movs	r2, #1
 8001c06:	2104      	movs	r1, #4
 8001c08:	4804      	ldr	r0, [pc, #16]	; (8001c1c <LCD_IO_WriteData+0x40>)
 8001c0a:	f000 fe71 	bl	80028f0 <HAL_GPIO_WritePin>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40020c00 	.word	0x40020c00
 8001c1c:	40020800 	.word	0x40020800

08001c20 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c30:	480a      	ldr	r0, [pc, #40]	; (8001c5c <LCD_IO_WriteReg+0x3c>)
 8001c32:	f000 fe5d 	bl	80028f0 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001c36:	2200      	movs	r2, #0
 8001c38:	2104      	movs	r1, #4
 8001c3a:	4809      	ldr	r0, [pc, #36]	; (8001c60 <LCD_IO_WriteReg+0x40>)
 8001c3c:	f000 fe58 	bl	80028f0 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff feed 	bl	8001a24 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	2104      	movs	r1, #4
 8001c4e:	4804      	ldr	r0, [pc, #16]	; (8001c60 <LCD_IO_WriteReg+0x40>)
 8001c50:	f000 fe4e 	bl	80028f0 <HAL_GPIO_WritePin>
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40020c00 	.word	0x40020c00
 8001c60:	40020800 	.word	0x40020800

08001c64 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	80fb      	strh	r3, [r7, #6]
 8001c70:	4613      	mov	r3, r2
 8001c72:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001c78:	2200      	movs	r2, #0
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	4810      	ldr	r0, [pc, #64]	; (8001cc0 <LCD_IO_ReadData+0x5c>)
 8001c7e:	f000 fe37 	bl	80028f0 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001c82:	2200      	movs	r2, #0
 8001c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c88:	480e      	ldr	r0, [pc, #56]	; (8001cc4 <LCD_IO_ReadData+0x60>)
 8001c8a:	f000 fe31 	bl	80028f0 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fec7 	bl	8001a24 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8001c96:	797b      	ldrb	r3, [r7, #5]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fea3 	bl	80019e4 <SPIx_Read>
 8001c9e:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ca6:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <LCD_IO_ReadData+0x60>)
 8001ca8:	f000 fe22 	bl	80028f0 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001cac:	2201      	movs	r2, #1
 8001cae:	2104      	movs	r1, #4
 8001cb0:	4803      	ldr	r0, [pc, #12]	; (8001cc0 <LCD_IO_ReadData+0x5c>)
 8001cb2:	f000 fe1d 	bl	80028f0 <HAL_GPIO_WritePin>
  
  return readvalue;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40020800 	.word	0x40020800
 8001cc4:	40020c00 	.word	0x40020c00

08001cc8 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 f847 	bl	8001d64 <HAL_Delay>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
	...

08001ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ce4:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <HAL_Init+0x40>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <HAL_Init+0x40>)
 8001cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <HAL_Init+0x40>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0a      	ldr	r2, [pc, #40]	; (8001d20 <HAL_Init+0x40>)
 8001cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <HAL_Init+0x40>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a07      	ldr	r2, [pc, #28]	; (8001d20 <HAL_Init+0x40>)
 8001d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d08:	2003      	movs	r0, #3
 8001d0a:	f000 f8fc 	bl	8001f06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f7ff fade 	bl	80012d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d14:	f7ff fab0 	bl	8001278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40023c00 	.word	0x40023c00

08001d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_IncTick+0x20>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_IncTick+0x24>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <HAL_IncTick+0x24>)
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000044 	.word	0x20000044
 8001d48:	20008724 	.word	0x20008724

08001d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_GetTick+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20008724 	.word	0x20008724

08001d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff ffee 	bl	8001d4c <HAL_GetTick>
 8001d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7c:	d005      	beq.n	8001d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_Delay+0x44>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d8a:	bf00      	nop
 8001d8c:	f7ff ffde 	bl	8001d4c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d8f7      	bhi.n	8001d8c <HAL_Delay+0x28>
  {
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000044 	.word	0x20000044

08001dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dde:	4a04      	ldr	r2, [pc, #16]	; (8001df0 <__NVIC_SetPriorityGrouping+0x44>)
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	60d3      	str	r3, [r2, #12]
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <__NVIC_GetPriorityGrouping+0x18>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	0a1b      	lsrs	r3, r3, #8
 8001dfe:	f003 0307 	and.w	r3, r3, #7
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	4603      	mov	r3, r0
 8001e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db0b      	blt.n	8001e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	f003 021f 	and.w	r2, r3, #31
 8001e28:	4907      	ldr	r1, [pc, #28]	; (8001e48 <__NVIC_EnableIRQ+0x38>)
 8001e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2e:	095b      	lsrs	r3, r3, #5
 8001e30:	2001      	movs	r0, #1
 8001e32:	fa00 f202 	lsl.w	r2, r0, r2
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	; (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	; (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f1c3 0307 	rsb	r3, r3, #7
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	bf28      	it	cs
 8001ebe:	2304      	movcs	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d902      	bls.n	8001ed0 <NVIC_EncodePriority+0x30>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3b03      	subs	r3, #3
 8001ece:	e000      	b.n	8001ed2 <NVIC_EncodePriority+0x32>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43d9      	mvns	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	4313      	orrs	r3, r2
         );
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	; 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ff4c 	bl	8001dac <__NVIC_SetPriorityGrouping>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f2e:	f7ff ff61 	bl	8001df4 <__NVIC_GetPriorityGrouping>
 8001f32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	68b9      	ldr	r1, [r7, #8]
 8001f38:	6978      	ldr	r0, [r7, #20]
 8001f3a:	f7ff ffb1 	bl	8001ea0 <NVIC_EncodePriority>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ff80 	bl	8001e4c <__NVIC_SetPriority>
}
 8001f4c:	bf00      	nop
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff ff54 	bl	8001e10 <__NVIC_EnableIRQ>
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e00e      	b.n	8001fa0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	795b      	ldrb	r3, [r3, #5]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d105      	bne.n	8001f98 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7fe fabc 	bl	8000510 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e03b      	b.n	8002032 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d106      	bne.n	8001fd4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7fe faf2 	bl	80005b8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff8:	f023 0107 	bic.w	r1, r3, #7
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002012:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	68d1      	ldr	r1, [r2, #12]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	430b      	orrs	r3, r1
 8002020:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d026      	beq.n	80020aa <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d021      	beq.n	80020aa <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002074:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207a:	f043 0201 	orr.w	r2, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2201      	movs	r2, #1
 8002088:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2204      	movs	r2, #4
 800208e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f003 0320 	and.w	r3, r3, #32
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d026      	beq.n	8002102 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d021      	beq.n	8002102 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020cc:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2220      	movs	r2, #32
 80020d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020da:	f043 0202 	orr.w	r2, r3, #2
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2204      	movs	r2, #4
 80020e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	d026      	beq.n	800215a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002112:	2b00      	cmp	r3, #0
 8002114:	d021      	beq.n	800215a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002124:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2208      	movs	r2, #8
 800212c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002132:	f043 0204 	orr.w	r2, r3, #4
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2204      	movs	r2, #4
 800213e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d013      	beq.n	800218c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00e      	beq.n	800218c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800217c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2204      	movs	r2, #4
 8002184:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f853 	bl	8002232 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d024      	beq.n	80021e0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01f      	beq.n	80021e0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021ae:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2202      	movs	r2, #2
 80021b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d01f      	beq.n	800222a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d01a      	beq.n	800222a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002202:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2210      	movs	r2, #16
 800220a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f000 f80e 	bl	8002246 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800223a:	bf00      	nop
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002246:	b480      	push	{r7}
 8002248:	b083      	sub	sp, #12
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_DMA2D_ConfigLayer+0x20>
 8002278:	2302      	movs	r3, #2
 800227a:	e079      	b.n	8002370 <HAL_DMA2D_ConfigLayer+0x114>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	3318      	adds	r3, #24
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	041b      	lsls	r3, r3, #16
 80022a2:	4313      	orrs	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80022a6:	4b35      	ldr	r3, [pc, #212]	; (800237c <HAL_DMA2D_ConfigLayer+0x120>)
 80022a8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b0a      	cmp	r3, #10
 80022b0:	d003      	beq.n	80022ba <HAL_DMA2D_ConfigLayer+0x5e>
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b09      	cmp	r3, #9
 80022b8:	d107      	bne.n	80022ca <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	e005      	b.n	80022d6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	061b      	lsls	r3, r3, #24
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d120      	bne.n	800231e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	ea02 0103 	and.w	r1, r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b0a      	cmp	r3, #10
 8002304:	d003      	beq.n	800230e <HAL_DMA2D_ConfigLayer+0xb2>
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b09      	cmp	r3, #9
 800230c:	d127      	bne.n	800235e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800231a:	629a      	str	r2, [r3, #40]	; 0x28
 800231c:	e01f      	b.n	800235e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69da      	ldr	r2, [r3, #28]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	43db      	mvns	r3, r3
 8002328:	ea02 0103 	and.w	r1, r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	430a      	orrs	r2, r1
 8002334:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b0a      	cmp	r3, #10
 8002346:	d003      	beq.n	8002350 <HAL_DMA2D_ConfigLayer+0xf4>
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b09      	cmp	r3, #9
 800234e:	d106      	bne.n	800235e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800235c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	371c      	adds	r7, #28
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	ff03000f 	.word	0xff03000f

08002380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002380:	b480      	push	{r7}
 8002382:	b089      	sub	sp, #36	; 0x24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	e177      	b.n	800268c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800239c:	2201      	movs	r2, #1
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	f040 8166 	bne.w	8002686 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d005      	beq.n	80023d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d130      	bne.n	8002434 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	2203      	movs	r2, #3
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002408:	2201      	movs	r2, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 0201 	and.w	r2, r3, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b03      	cmp	r3, #3
 800243e:	d017      	beq.n	8002470 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	2203      	movs	r2, #3
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d123      	bne.n	80024c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	08da      	lsrs	r2, r3, #3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3208      	adds	r2, #8
 8002484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	220f      	movs	r2, #15
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	08da      	lsrs	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3208      	adds	r2, #8
 80024be:	69b9      	ldr	r1, [r7, #24]
 80024c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0203 	and.w	r2, r3, #3
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80c0 	beq.w	8002686 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	4b66      	ldr	r3, [pc, #408]	; (80026a4 <HAL_GPIO_Init+0x324>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	4a65      	ldr	r2, [pc, #404]	; (80026a4 <HAL_GPIO_Init+0x324>)
 8002510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002514:	6453      	str	r3, [r2, #68]	; 0x44
 8002516:	4b63      	ldr	r3, [pc, #396]	; (80026a4 <HAL_GPIO_Init+0x324>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002522:	4a61      	ldr	r2, [pc, #388]	; (80026a8 <HAL_GPIO_Init+0x328>)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	3302      	adds	r3, #2
 800252a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	220f      	movs	r2, #15
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a58      	ldr	r2, [pc, #352]	; (80026ac <HAL_GPIO_Init+0x32c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d037      	beq.n	80025be <HAL_GPIO_Init+0x23e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a57      	ldr	r2, [pc, #348]	; (80026b0 <HAL_GPIO_Init+0x330>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d031      	beq.n	80025ba <HAL_GPIO_Init+0x23a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a56      	ldr	r2, [pc, #344]	; (80026b4 <HAL_GPIO_Init+0x334>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d02b      	beq.n	80025b6 <HAL_GPIO_Init+0x236>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a55      	ldr	r2, [pc, #340]	; (80026b8 <HAL_GPIO_Init+0x338>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d025      	beq.n	80025b2 <HAL_GPIO_Init+0x232>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a54      	ldr	r2, [pc, #336]	; (80026bc <HAL_GPIO_Init+0x33c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d01f      	beq.n	80025ae <HAL_GPIO_Init+0x22e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a53      	ldr	r2, [pc, #332]	; (80026c0 <HAL_GPIO_Init+0x340>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d019      	beq.n	80025aa <HAL_GPIO_Init+0x22a>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a52      	ldr	r2, [pc, #328]	; (80026c4 <HAL_GPIO_Init+0x344>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d013      	beq.n	80025a6 <HAL_GPIO_Init+0x226>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a51      	ldr	r2, [pc, #324]	; (80026c8 <HAL_GPIO_Init+0x348>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00d      	beq.n	80025a2 <HAL_GPIO_Init+0x222>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a50      	ldr	r2, [pc, #320]	; (80026cc <HAL_GPIO_Init+0x34c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d007      	beq.n	800259e <HAL_GPIO_Init+0x21e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a4f      	ldr	r2, [pc, #316]	; (80026d0 <HAL_GPIO_Init+0x350>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d101      	bne.n	800259a <HAL_GPIO_Init+0x21a>
 8002596:	2309      	movs	r3, #9
 8002598:	e012      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 800259a:	230a      	movs	r3, #10
 800259c:	e010      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 800259e:	2308      	movs	r3, #8
 80025a0:	e00e      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 80025a2:	2307      	movs	r3, #7
 80025a4:	e00c      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 80025a6:	2306      	movs	r3, #6
 80025a8:	e00a      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 80025aa:	2305      	movs	r3, #5
 80025ac:	e008      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 80025ae:	2304      	movs	r3, #4
 80025b0:	e006      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 80025b2:	2303      	movs	r3, #3
 80025b4:	e004      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 80025b6:	2302      	movs	r3, #2
 80025b8:	e002      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <HAL_GPIO_Init+0x240>
 80025be:	2300      	movs	r3, #0
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	f002 0203 	and.w	r2, r2, #3
 80025c6:	0092      	lsls	r2, r2, #2
 80025c8:	4093      	lsls	r3, r2
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025d0:	4935      	ldr	r1, [pc, #212]	; (80026a8 <HAL_GPIO_Init+0x328>)
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	089b      	lsrs	r3, r3, #2
 80025d6:	3302      	adds	r3, #2
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025de:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <HAL_GPIO_Init+0x354>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	43db      	mvns	r3, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4013      	ands	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002602:	4a34      	ldr	r2, [pc, #208]	; (80026d4 <HAL_GPIO_Init+0x354>)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002608:	4b32      	ldr	r3, [pc, #200]	; (80026d4 <HAL_GPIO_Init+0x354>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d003      	beq.n	800262c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800262c:	4a29      	ldr	r2, [pc, #164]	; (80026d4 <HAL_GPIO_Init+0x354>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002632:	4b28      	ldr	r3, [pc, #160]	; (80026d4 <HAL_GPIO_Init+0x354>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002656:	4a1f      	ldr	r2, [pc, #124]	; (80026d4 <HAL_GPIO_Init+0x354>)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800265c:	4b1d      	ldr	r3, [pc, #116]	; (80026d4 <HAL_GPIO_Init+0x354>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002680:	4a14      	ldr	r2, [pc, #80]	; (80026d4 <HAL_GPIO_Init+0x354>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3301      	adds	r3, #1
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	2b0f      	cmp	r3, #15
 8002690:	f67f ae84 	bls.w	800239c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	3724      	adds	r7, #36	; 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40023800 	.word	0x40023800
 80026a8:	40013800 	.word	0x40013800
 80026ac:	40020000 	.word	0x40020000
 80026b0:	40020400 	.word	0x40020400
 80026b4:	40020800 	.word	0x40020800
 80026b8:	40020c00 	.word	0x40020c00
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40021400 	.word	0x40021400
 80026c4:	40021800 	.word	0x40021800
 80026c8:	40021c00 	.word	0x40021c00
 80026cc:	40022000 	.word	0x40022000
 80026d0:	40022400 	.word	0x40022400
 80026d4:	40013c00 	.word	0x40013c00

080026d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	e0d9      	b.n	80028a8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026f4:	2201      	movs	r2, #1
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4013      	ands	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	429a      	cmp	r2, r3
 800270c:	f040 80c9 	bne.w	80028a2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002710:	4a6b      	ldr	r2, [pc, #428]	; (80028c0 <HAL_GPIO_DeInit+0x1e8>)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	089b      	lsrs	r3, r3, #2
 8002716:	3302      	adds	r3, #2
 8002718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800271c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f003 0303 	and.w	r3, r3, #3
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	220f      	movs	r2, #15
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	68ba      	ldr	r2, [r7, #8]
 800272e:	4013      	ands	r3, r2
 8002730:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a63      	ldr	r2, [pc, #396]	; (80028c4 <HAL_GPIO_DeInit+0x1ec>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d037      	beq.n	80027aa <HAL_GPIO_DeInit+0xd2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a62      	ldr	r2, [pc, #392]	; (80028c8 <HAL_GPIO_DeInit+0x1f0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d031      	beq.n	80027a6 <HAL_GPIO_DeInit+0xce>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a61      	ldr	r2, [pc, #388]	; (80028cc <HAL_GPIO_DeInit+0x1f4>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d02b      	beq.n	80027a2 <HAL_GPIO_DeInit+0xca>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a60      	ldr	r2, [pc, #384]	; (80028d0 <HAL_GPIO_DeInit+0x1f8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d025      	beq.n	800279e <HAL_GPIO_DeInit+0xc6>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a5f      	ldr	r2, [pc, #380]	; (80028d4 <HAL_GPIO_DeInit+0x1fc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d01f      	beq.n	800279a <HAL_GPIO_DeInit+0xc2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a5e      	ldr	r2, [pc, #376]	; (80028d8 <HAL_GPIO_DeInit+0x200>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d019      	beq.n	8002796 <HAL_GPIO_DeInit+0xbe>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a5d      	ldr	r2, [pc, #372]	; (80028dc <HAL_GPIO_DeInit+0x204>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_GPIO_DeInit+0xba>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a5c      	ldr	r2, [pc, #368]	; (80028e0 <HAL_GPIO_DeInit+0x208>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00d      	beq.n	800278e <HAL_GPIO_DeInit+0xb6>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a5b      	ldr	r2, [pc, #364]	; (80028e4 <HAL_GPIO_DeInit+0x20c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d007      	beq.n	800278a <HAL_GPIO_DeInit+0xb2>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a5a      	ldr	r2, [pc, #360]	; (80028e8 <HAL_GPIO_DeInit+0x210>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d101      	bne.n	8002786 <HAL_GPIO_DeInit+0xae>
 8002782:	2309      	movs	r3, #9
 8002784:	e012      	b.n	80027ac <HAL_GPIO_DeInit+0xd4>
 8002786:	230a      	movs	r3, #10
 8002788:	e010      	b.n	80027ac <HAL_GPIO_DeInit+0xd4>
 800278a:	2308      	movs	r3, #8
 800278c:	e00e      	b.n	80027ac <HAL_GPIO_DeInit+0xd4>
 800278e:	2307      	movs	r3, #7
 8002790:	e00c      	b.n	80027ac <HAL_GPIO_DeInit+0xd4>
 8002792:	2306      	movs	r3, #6
 8002794:	e00a      	b.n	80027ac <HAL_GPIO_DeInit+0xd4>
 8002796:	2305      	movs	r3, #5
 8002798:	e008      	b.n	80027ac <HAL_GPIO_DeInit+0xd4>
 800279a:	2304      	movs	r3, #4
 800279c:	e006      	b.n	80027ac <HAL_GPIO_DeInit+0xd4>
 800279e:	2303      	movs	r3, #3
 80027a0:	e004      	b.n	80027ac <HAL_GPIO_DeInit+0xd4>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e002      	b.n	80027ac <HAL_GPIO_DeInit+0xd4>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_GPIO_DeInit+0xd4>
 80027aa:	2300      	movs	r3, #0
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	f002 0203 	and.w	r2, r2, #3
 80027b2:	0092      	lsls	r2, r2, #2
 80027b4:	4093      	lsls	r3, r2
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d132      	bne.n	8002822 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80027bc:	4b4b      	ldr	r3, [pc, #300]	; (80028ec <HAL_GPIO_DeInit+0x214>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	4949      	ldr	r1, [pc, #292]	; (80028ec <HAL_GPIO_DeInit+0x214>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80027ca:	4b48      	ldr	r3, [pc, #288]	; (80028ec <HAL_GPIO_DeInit+0x214>)
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	43db      	mvns	r3, r3
 80027d2:	4946      	ldr	r1, [pc, #280]	; (80028ec <HAL_GPIO_DeInit+0x214>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80027d8:	4b44      	ldr	r3, [pc, #272]	; (80028ec <HAL_GPIO_DeInit+0x214>)
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	43db      	mvns	r3, r3
 80027e0:	4942      	ldr	r1, [pc, #264]	; (80028ec <HAL_GPIO_DeInit+0x214>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80027e6:	4b41      	ldr	r3, [pc, #260]	; (80028ec <HAL_GPIO_DeInit+0x214>)
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	493f      	ldr	r1, [pc, #252]	; (80028ec <HAL_GPIO_DeInit+0x214>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	220f      	movs	r2, #15
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002804:	4a2e      	ldr	r2, [pc, #184]	; (80028c0 <HAL_GPIO_DeInit+0x1e8>)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	089b      	lsrs	r3, r3, #2
 800280a:	3302      	adds	r3, #2
 800280c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	43da      	mvns	r2, r3
 8002814:	482a      	ldr	r0, [pc, #168]	; (80028c0 <HAL_GPIO_DeInit+0x1e8>)
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	400a      	ands	r2, r1
 800281c:	3302      	adds	r3, #2
 800281e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	2103      	movs	r1, #3
 800282c:	fa01 f303 	lsl.w	r3, r1, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	401a      	ands	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	08da      	lsrs	r2, r3, #3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3208      	adds	r2, #8
 8002840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	220f      	movs	r2, #15
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	08d2      	lsrs	r2, r2, #3
 8002858:	4019      	ands	r1, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3208      	adds	r2, #8
 800285e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2103      	movs	r1, #3
 800286c:	fa01 f303 	lsl.w	r3, r1, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	401a      	ands	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	2101      	movs	r1, #1
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	fa01 f303 	lsl.w	r3, r1, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	401a      	ands	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689a      	ldr	r2, [r3, #8]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2103      	movs	r1, #3
 8002896:	fa01 f303 	lsl.w	r3, r1, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	401a      	ands	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	3301      	adds	r3, #1
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b0f      	cmp	r3, #15
 80028ac:	f67f af22 	bls.w	80026f4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80028b0:	bf00      	nop
 80028b2:	bf00      	nop
 80028b4:	371c      	adds	r7, #28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40013800 	.word	0x40013800
 80028c4:	40020000 	.word	0x40020000
 80028c8:	40020400 	.word	0x40020400
 80028cc:	40020800 	.word	0x40020800
 80028d0:	40020c00 	.word	0x40020c00
 80028d4:	40021000 	.word	0x40021000
 80028d8:	40021400 	.word	0x40021400
 80028dc:	40021800 	.word	0x40021800
 80028e0:	40021c00 	.word	0x40021c00
 80028e4:	40022000 	.word	0x40022000
 80028e8:	40022400 	.word	0x40022400
 80028ec:	40013c00 	.word	0x40013c00

080028f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	807b      	strh	r3, [r7, #2]
 80028fc:	4613      	mov	r3, r2
 80028fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002900:	787b      	ldrb	r3, [r7, #1]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002906:	887a      	ldrh	r2, [r7, #2]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800290c:	e003      	b.n	8002916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800290e:	887b      	ldrh	r3, [r7, #2]
 8002910:	041a      	lsls	r2, r3, #16
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	619a      	str	r2, [r3, #24]
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	460b      	mov	r3, r1
 800292c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002934:	887a      	ldrh	r2, [r7, #2]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4013      	ands	r3, r2
 800293a:	041a      	lsls	r2, r3, #16
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	43d9      	mvns	r1, r3
 8002940:	887b      	ldrh	r3, [r7, #2]
 8002942:	400b      	ands	r3, r1
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	619a      	str	r2, [r3, #24]
}
 800294a:	bf00      	nop
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
	...

08002958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e12b      	b.n	8002bc2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fe f914 	bl	8000bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2224      	movs	r2, #36	; 0x24
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029bc:	f001 f940 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 80029c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4a81      	ldr	r2, [pc, #516]	; (8002bcc <HAL_I2C_Init+0x274>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d807      	bhi.n	80029dc <HAL_I2C_Init+0x84>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4a80      	ldr	r2, [pc, #512]	; (8002bd0 <HAL_I2C_Init+0x278>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	bf94      	ite	ls
 80029d4:	2301      	movls	r3, #1
 80029d6:	2300      	movhi	r3, #0
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	e006      	b.n	80029ea <HAL_I2C_Init+0x92>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4a7d      	ldr	r2, [pc, #500]	; (8002bd4 <HAL_I2C_Init+0x27c>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	bf94      	ite	ls
 80029e4:	2301      	movls	r3, #1
 80029e6:	2300      	movhi	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e0e7      	b.n	8002bc2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4a78      	ldr	r2, [pc, #480]	; (8002bd8 <HAL_I2C_Init+0x280>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	0c9b      	lsrs	r3, r3, #18
 80029fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4a6a      	ldr	r2, [pc, #424]	; (8002bcc <HAL_I2C_Init+0x274>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d802      	bhi.n	8002a2c <HAL_I2C_Init+0xd4>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	e009      	b.n	8002a40 <HAL_I2C_Init+0xe8>
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a32:	fb02 f303 	mul.w	r3, r2, r3
 8002a36:	4a69      	ldr	r2, [pc, #420]	; (8002bdc <HAL_I2C_Init+0x284>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	099b      	lsrs	r3, r3, #6
 8002a3e:	3301      	adds	r3, #1
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a52:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	495c      	ldr	r1, [pc, #368]	; (8002bcc <HAL_I2C_Init+0x274>)
 8002a5c:	428b      	cmp	r3, r1
 8002a5e:	d819      	bhi.n	8002a94 <HAL_I2C_Init+0x13c>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	1e59      	subs	r1, r3, #1
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a6e:	1c59      	adds	r1, r3, #1
 8002a70:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a74:	400b      	ands	r3, r1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_I2C_Init+0x138>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1e59      	subs	r1, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8e:	e051      	b.n	8002b34 <HAL_I2C_Init+0x1dc>
 8002a90:	2304      	movs	r3, #4
 8002a92:	e04f      	b.n	8002b34 <HAL_I2C_Init+0x1dc>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d111      	bne.n	8002ac0 <HAL_I2C_Init+0x168>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	1e58      	subs	r0, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6859      	ldr	r1, [r3, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	440b      	add	r3, r1
 8002aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	e012      	b.n	8002ae6 <HAL_I2C_Init+0x18e>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1e58      	subs	r0, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	0099      	lsls	r1, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	bf0c      	ite	eq
 8002ae0:	2301      	moveq	r3, #1
 8002ae2:	2300      	movne	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_I2C_Init+0x196>
 8002aea:	2301      	movs	r3, #1
 8002aec:	e022      	b.n	8002b34 <HAL_I2C_Init+0x1dc>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10e      	bne.n	8002b14 <HAL_I2C_Init+0x1bc>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1e58      	subs	r0, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6859      	ldr	r1, [r3, #4]
 8002afe:	460b      	mov	r3, r1
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	440b      	add	r3, r1
 8002b04:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b08:	3301      	adds	r3, #1
 8002b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b12:	e00f      	b.n	8002b34 <HAL_I2C_Init+0x1dc>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1e58      	subs	r0, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6859      	ldr	r1, [r3, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	0099      	lsls	r1, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	6809      	ldr	r1, [r1, #0]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6911      	ldr	r1, [r2, #16]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68d2      	ldr	r2, [r2, #12]
 8002b6e:	4311      	orrs	r1, r2
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6812      	ldr	r2, [r2, #0]
 8002b74:	430b      	orrs	r3, r1
 8002b76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	000186a0 	.word	0x000186a0
 8002bd0:	001e847f 	.word	0x001e847f
 8002bd4:	003d08ff 	.word	0x003d08ff
 8002bd8:	431bde83 	.word	0x431bde83
 8002bdc:	10624dd3 	.word	0x10624dd3

08002be0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d129      	bne.n	8002c4a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2224      	movs	r2, #36	; 0x24
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0201 	bic.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0210 	bic.w	r2, r2, #16
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0201 	orr.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e000      	b.n	8002c4c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
  }
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b20      	cmp	r3, #32
 8002c70:	d12a      	bne.n	8002cc8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2224      	movs	r2, #36	; 0x24
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 0201 	bic.w	r2, r2, #1
 8002c88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002c92:	89fb      	ldrh	r3, [r7, #14]
 8002c94:	f023 030f 	bic.w	r3, r3, #15
 8002c98:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	89fb      	ldrh	r3, [r7, #14]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	89fa      	ldrh	r2, [r7, #14]
 8002caa:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	e000      	b.n	8002cca <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002cc8:	2302      	movs	r3, #2
  }
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e0bf      	b.n	8002e6a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7fe f83e 	bl	8000d80 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8002d1a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6999      	ldr	r1, [r3, #24]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002d30:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6899      	ldr	r1, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4b4a      	ldr	r3, [pc, #296]	; (8002e74 <HAL_LTDC_Init+0x19c>)
 8002d4c:	400b      	ands	r3, r1
 8002d4e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	041b      	lsls	r3, r3, #16
 8002d56:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6899      	ldr	r1, [r3, #8]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699a      	ldr	r2, [r3, #24]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68d9      	ldr	r1, [r3, #12]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b3e      	ldr	r3, [pc, #248]	; (8002e74 <HAL_LTDC_Init+0x19c>)
 8002d7a:	400b      	ands	r3, r1
 8002d7c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	041b      	lsls	r3, r3, #16
 8002d84:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	68d9      	ldr	r1, [r3, #12]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1a      	ldr	r2, [r3, #32]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	431a      	orrs	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6919      	ldr	r1, [r3, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	4b33      	ldr	r3, [pc, #204]	; (8002e74 <HAL_LTDC_Init+0x19c>)
 8002da8:	400b      	ands	r3, r1
 8002daa:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	041b      	lsls	r3, r3, #16
 8002db2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6919      	ldr	r1, [r3, #16]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	431a      	orrs	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6959      	ldr	r1, [r3, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <HAL_LTDC_Init+0x19c>)
 8002dd6:	400b      	ands	r3, r1
 8002dd8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	041b      	lsls	r3, r3, #16
 8002de0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6959      	ldr	r1, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dfe:	021b      	lsls	r3, r3, #8
 8002e00:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8002e08:	041b      	lsls	r3, r3, #16
 8002e0a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0206 	orr.w	r2, r2, #6
 8002e46:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699a      	ldr	r2, [r3, #24]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	f000f800 	.word	0xf000f800

08002e78 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e86:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d023      	beq.n	8002ee2 <HAL_LTDC_IRQHandler+0x6a>
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d01e      	beq.n	8002ee2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0204 	bic.w	r2, r2, #4
 8002eb2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2204      	movs	r2, #4
 8002eba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ec2:	f043 0201 	orr.w	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2204      	movs	r2, #4
 8002ed0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f86f 	bl	8002fc0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d023      	beq.n	8002f34 <HAL_LTDC_IRQHandler+0xbc>
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d01e      	beq.n	8002f34 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0202 	bic.w	r2, r2, #2
 8002f04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f14:	f043 0202 	orr.w	r2, r3, #2
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2204      	movs	r2, #4
 8002f22:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f846 	bl	8002fc0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d01b      	beq.n	8002f76 <HAL_LTDC_IRQHandler+0xfe>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d016      	beq.n	8002f76 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f82f 	bl	8002fd4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01b      	beq.n	8002fb8 <HAL_LTDC_IRQHandler+0x140>
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d016      	beq.n	8002fb8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0208 	bic.w	r2, r2, #8
 8002f98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2208      	movs	r2, #8
 8002fa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f818 	bl	8002fe8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8002fb8:	bf00      	nop
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002ffc:	b5b0      	push	{r4, r5, r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_LTDC_ConfigLayer+0x1a>
 8003012:	2302      	movs	r3, #2
 8003014:	e02c      	b.n	8003070 <HAL_LTDC_ConfigLayer+0x74>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2202      	movs	r2, #2
 8003022:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2134      	movs	r1, #52	; 0x34
 800302c:	fb01 f303 	mul.w	r3, r1, r3
 8003030:	4413      	add	r3, r2
 8003032:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4614      	mov	r4, r2
 800303a:	461d      	mov	r5, r3
 800303c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800303e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003048:	682b      	ldr	r3, [r5, #0]
 800304a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f811 	bl	8003078 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2201      	movs	r2, #1
 800305c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bdb0      	pop	{r4, r5, r7, pc}

08003078 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003078:	b480      	push	{r7}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	0c1b      	lsrs	r3, r3, #16
 8003090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003094:	4413      	add	r3, r2
 8003096:	041b      	lsls	r3, r3, #16
 8003098:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	01db      	lsls	r3, r3, #7
 80030a4:	4413      	add	r3, r2
 80030a6:	3384      	adds	r3, #132	; 0x84
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	6812      	ldr	r2, [r2, #0]
 80030ae:	4611      	mov	r1, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	01d2      	lsls	r2, r2, #7
 80030b4:	440a      	add	r2, r1
 80030b6:	3284      	adds	r2, #132	; 0x84
 80030b8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80030bc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	0c1b      	lsrs	r3, r3, #16
 80030ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ce:	4413      	add	r3, r2
 80030d0:	1c5a      	adds	r2, r3, #1
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4619      	mov	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	01db      	lsls	r3, r3, #7
 80030dc:	440b      	add	r3, r1
 80030de:	3384      	adds	r3, #132	; 0x84
 80030e0:	4619      	mov	r1, r3
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	68da      	ldr	r2, [r3, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030f6:	4413      	add	r3, r2
 80030f8:	041b      	lsls	r3, r3, #16
 80030fa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	01db      	lsls	r3, r3, #7
 8003106:	4413      	add	r3, r2
 8003108:	3384      	adds	r3, #132	; 0x84
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	4611      	mov	r1, r2
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	01d2      	lsls	r2, r2, #7
 8003116:	440a      	add	r2, r1
 8003118:	3284      	adds	r2, #132	; 0x84
 800311a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800311e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800312e:	4413      	add	r3, r2
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4619      	mov	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	01db      	lsls	r3, r3, #7
 800313c:	440b      	add	r3, r1
 800313e:	3384      	adds	r3, #132	; 0x84
 8003140:	4619      	mov	r1, r3
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	4313      	orrs	r3, r2
 8003146:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	01db      	lsls	r3, r3, #7
 8003152:	4413      	add	r3, r2
 8003154:	3384      	adds	r3, #132	; 0x84
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	4611      	mov	r1, r2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	01d2      	lsls	r2, r2, #7
 8003162:	440a      	add	r2, r1
 8003164:	3284      	adds	r2, #132	; 0x84
 8003166:	f023 0307 	bic.w	r3, r3, #7
 800316a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	01db      	lsls	r3, r3, #7
 8003176:	4413      	add	r3, r2
 8003178:	3384      	adds	r3, #132	; 0x84
 800317a:	461a      	mov	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003188:	021b      	lsls	r3, r3, #8
 800318a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003192:	041b      	lsls	r3, r3, #16
 8003194:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	061b      	lsls	r3, r3, #24
 800319c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	01db      	lsls	r3, r3, #7
 80031a8:	4413      	add	r3, r2
 80031aa:	3384      	adds	r3, #132	; 0x84
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	461a      	mov	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	01db      	lsls	r3, r3, #7
 80031b8:	4413      	add	r3, r2
 80031ba:	3384      	adds	r3, #132	; 0x84
 80031bc:	461a      	mov	r2, r3
 80031be:	2300      	movs	r3, #0
 80031c0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031c8:	461a      	mov	r2, r3
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	431a      	orrs	r2, r3
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4619      	mov	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	01db      	lsls	r3, r3, #7
 80031dc:	440b      	add	r3, r1
 80031de:	3384      	adds	r3, #132	; 0x84
 80031e0:	4619      	mov	r1, r3
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	461a      	mov	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	01db      	lsls	r3, r3, #7
 80031f2:	4413      	add	r3, r2
 80031f4:	3384      	adds	r3, #132	; 0x84
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	4611      	mov	r1, r2
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	01d2      	lsls	r2, r2, #7
 8003202:	440a      	add	r2, r1
 8003204:	3284      	adds	r2, #132	; 0x84
 8003206:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800320a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	01db      	lsls	r3, r3, #7
 8003216:	4413      	add	r3, r2
 8003218:	3384      	adds	r3, #132	; 0x84
 800321a:	461a      	mov	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	01db      	lsls	r3, r3, #7
 800322c:	4413      	add	r3, r2
 800322e:	3384      	adds	r3, #132	; 0x84
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	4611      	mov	r1, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	01d2      	lsls	r2, r2, #7
 800323c:	440a      	add	r2, r1
 800323e:	3284      	adds	r2, #132	; 0x84
 8003240:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003244:	f023 0307 	bic.w	r3, r3, #7
 8003248:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	68f9      	ldr	r1, [r7, #12]
 8003254:	6809      	ldr	r1, [r1, #0]
 8003256:	4608      	mov	r0, r1
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	01c9      	lsls	r1, r1, #7
 800325c:	4401      	add	r1, r0
 800325e:	3184      	adds	r1, #132	; 0x84
 8003260:	4313      	orrs	r3, r2
 8003262:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	01db      	lsls	r3, r3, #7
 800326e:	4413      	add	r3, r2
 8003270:	3384      	adds	r3, #132	; 0x84
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	01db      	lsls	r3, r3, #7
 800327e:	4413      	add	r3, r2
 8003280:	3384      	adds	r3, #132	; 0x84
 8003282:	461a      	mov	r2, r3
 8003284:	2300      	movs	r3, #0
 8003286:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	01db      	lsls	r3, r3, #7
 8003292:	4413      	add	r3, r2
 8003294:	3384      	adds	r3, #132	; 0x84
 8003296:	461a      	mov	r2, r3
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d102      	bne.n	80032ac <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80032a6:	2304      	movs	r3, #4
 80032a8:	61fb      	str	r3, [r7, #28]
 80032aa:	e01b      	b.n	80032e4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d102      	bne.n	80032ba <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80032b4:	2303      	movs	r3, #3
 80032b6:	61fb      	str	r3, [r7, #28]
 80032b8:	e014      	b.n	80032e4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d00b      	beq.n	80032da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d007      	beq.n	80032da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d003      	beq.n	80032da <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80032d6:	2b07      	cmp	r3, #7
 80032d8:	d102      	bne.n	80032e0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80032da:	2302      	movs	r3, #2
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	e001      	b.n	80032e4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80032e0:	2301      	movs	r3, #1
 80032e2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	461a      	mov	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	01db      	lsls	r3, r3, #7
 80032ee:	4413      	add	r3, r2
 80032f0:	3384      	adds	r3, #132	; 0x84
 80032f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	4611      	mov	r1, r2
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	01d2      	lsls	r2, r2, #7
 80032fe:	440a      	add	r2, r1
 8003300:	3284      	adds	r2, #132	; 0x84
 8003302:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003306:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	fb02 f303 	mul.w	r3, r2, r3
 8003312:	041a      	lsls	r2, r3, #16
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	1acb      	subs	r3, r1, r3
 800331e:	69f9      	ldr	r1, [r7, #28]
 8003320:	fb01 f303 	mul.w	r3, r1, r3
 8003324:	3303      	adds	r3, #3
 8003326:	68f9      	ldr	r1, [r7, #12]
 8003328:	6809      	ldr	r1, [r1, #0]
 800332a:	4608      	mov	r0, r1
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	01c9      	lsls	r1, r1, #7
 8003330:	4401      	add	r1, r0
 8003332:	3184      	adds	r1, #132	; 0x84
 8003334:	4313      	orrs	r3, r2
 8003336:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	01db      	lsls	r3, r3, #7
 8003342:	4413      	add	r3, r2
 8003344:	3384      	adds	r3, #132	; 0x84
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	4611      	mov	r1, r2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	01d2      	lsls	r2, r2, #7
 8003352:	440a      	add	r2, r1
 8003354:	3284      	adds	r2, #132	; 0x84
 8003356:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800335a:	f023 0307 	bic.w	r3, r3, #7
 800335e:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	01db      	lsls	r3, r3, #7
 800336a:	4413      	add	r3, r2
 800336c:	3384      	adds	r3, #132	; 0x84
 800336e:	461a      	mov	r2, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	01db      	lsls	r3, r3, #7
 8003380:	4413      	add	r3, r2
 8003382:	3384      	adds	r3, #132	; 0x84
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	4611      	mov	r1, r2
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	01d2      	lsls	r2, r2, #7
 8003390:	440a      	add	r2, r1
 8003392:	3284      	adds	r2, #132	; 0x84
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	6013      	str	r3, [r2, #0]
}
 800339a:	bf00      	nop
 800339c:	3724      	adds	r7, #36	; 0x24
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e264      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d075      	beq.n	80034b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033c6:	4ba3      	ldr	r3, [pc, #652]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f003 030c 	and.w	r3, r3, #12
 80033ce:	2b04      	cmp	r3, #4
 80033d0:	d00c      	beq.n	80033ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d2:	4ba0      	ldr	r3, [pc, #640]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d112      	bne.n	8003404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033de:	4b9d      	ldr	r3, [pc, #628]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ea:	d10b      	bne.n	8003404 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	4b99      	ldr	r3, [pc, #612]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d05b      	beq.n	80034b0 <HAL_RCC_OscConfig+0x108>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d157      	bne.n	80034b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e23f      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340c:	d106      	bne.n	800341c <HAL_RCC_OscConfig+0x74>
 800340e:	4b91      	ldr	r3, [pc, #580]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a90      	ldr	r2, [pc, #576]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	e01d      	b.n	8003458 <HAL_RCC_OscConfig+0xb0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x98>
 8003426:	4b8b      	ldr	r3, [pc, #556]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a8a      	ldr	r2, [pc, #552]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 800342c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003430:	6013      	str	r3, [r2, #0]
 8003432:	4b88      	ldr	r3, [pc, #544]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a87      	ldr	r2, [pc, #540]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0xb0>
 8003440:	4b84      	ldr	r3, [pc, #528]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a83      	ldr	r2, [pc, #524]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344a:	6013      	str	r3, [r2, #0]
 800344c:	4b81      	ldr	r3, [pc, #516]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a80      	ldr	r2, [pc, #512]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d013      	beq.n	8003488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fe fc74 	bl	8001d4c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003468:	f7fe fc70 	bl	8001d4c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e204      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b76      	ldr	r3, [pc, #472]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0f0      	beq.n	8003468 <HAL_RCC_OscConfig+0xc0>
 8003486:	e014      	b.n	80034b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fe fc60 	bl	8001d4c <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003490:	f7fe fc5c 	bl	8001d4c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e1f0      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a2:	4b6c      	ldr	r3, [pc, #432]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0xe8>
 80034ae:	e000      	b.n	80034b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d063      	beq.n	8003586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034be:	4b65      	ldr	r3, [pc, #404]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 030c 	and.w	r3, r3, #12
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00b      	beq.n	80034e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ca:	4b62      	ldr	r3, [pc, #392]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d11c      	bne.n	8003510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d6:	4b5f      	ldr	r3, [pc, #380]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d116      	bne.n	8003510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e2:	4b5c      	ldr	r3, [pc, #368]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_RCC_OscConfig+0x152>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d001      	beq.n	80034fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e1c4      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fa:	4b56      	ldr	r3, [pc, #344]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4952      	ldr	r1, [pc, #328]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 800350a:	4313      	orrs	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	e03a      	b.n	8003586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003518:	4b4f      	ldr	r3, [pc, #316]	; (8003658 <HAL_RCC_OscConfig+0x2b0>)
 800351a:	2201      	movs	r2, #1
 800351c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fe fc15 	bl	8001d4c <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003526:	f7fe fc11 	bl	8001d4c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e1a5      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003538:	4b46      	ldr	r3, [pc, #280]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f0      	beq.n	8003526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003544:	4b43      	ldr	r3, [pc, #268]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4940      	ldr	r1, [pc, #256]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003554:	4313      	orrs	r3, r2
 8003556:	600b      	str	r3, [r1, #0]
 8003558:	e015      	b.n	8003586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800355a:	4b3f      	ldr	r3, [pc, #252]	; (8003658 <HAL_RCC_OscConfig+0x2b0>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7fe fbf4 	bl	8001d4c <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003568:	f7fe fbf0 	bl	8001d4c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e184      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357a:	4b36      	ldr	r3, [pc, #216]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f0      	bne.n	8003568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0308 	and.w	r3, r3, #8
 800358e:	2b00      	cmp	r3, #0
 8003590:	d030      	beq.n	80035f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d016      	beq.n	80035c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359a:	4b30      	ldr	r3, [pc, #192]	; (800365c <HAL_RCC_OscConfig+0x2b4>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a0:	f7fe fbd4 	bl	8001d4c <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a8:	f7fe fbd0 	bl	8001d4c <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e164      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ba:	4b26      	ldr	r3, [pc, #152]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80035bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0x200>
 80035c6:	e015      	b.n	80035f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c8:	4b24      	ldr	r3, [pc, #144]	; (800365c <HAL_RCC_OscConfig+0x2b4>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ce:	f7fe fbbd 	bl	8001d4c <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d6:	f7fe fbb9 	bl	8001d4c <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e14d      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035e8:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 80035ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d1f0      	bne.n	80035d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80a0 	beq.w	8003742 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003602:	2300      	movs	r3, #0
 8003604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003606:	4b13      	ldr	r3, [pc, #76]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d10f      	bne.n	8003632 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	4b0f      	ldr	r3, [pc, #60]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	4a0e      	ldr	r2, [pc, #56]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 800361c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003620:	6413      	str	r3, [r2, #64]	; 0x40
 8003622:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <HAL_RCC_OscConfig+0x2ac>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800362e:	2301      	movs	r3, #1
 8003630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003632:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_RCC_OscConfig+0x2b8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363a:	2b00      	cmp	r3, #0
 800363c:	d121      	bne.n	8003682 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800363e:	4b08      	ldr	r3, [pc, #32]	; (8003660 <HAL_RCC_OscConfig+0x2b8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a07      	ldr	r2, [pc, #28]	; (8003660 <HAL_RCC_OscConfig+0x2b8>)
 8003644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800364a:	f7fe fb7f 	bl	8001d4c <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003650:	e011      	b.n	8003676 <HAL_RCC_OscConfig+0x2ce>
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800
 8003658:	42470000 	.word	0x42470000
 800365c:	42470e80 	.word	0x42470e80
 8003660:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003664:	f7fe fb72 	bl	8001d4c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b02      	cmp	r3, #2
 8003670:	d901      	bls.n	8003676 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e106      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003676:	4b85      	ldr	r3, [pc, #532]	; (800388c <HAL_RCC_OscConfig+0x4e4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d0f0      	beq.n	8003664 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d106      	bne.n	8003698 <HAL_RCC_OscConfig+0x2f0>
 800368a:	4b81      	ldr	r3, [pc, #516]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	4a80      	ldr	r2, [pc, #512]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	6713      	str	r3, [r2, #112]	; 0x70
 8003696:	e01c      	b.n	80036d2 <HAL_RCC_OscConfig+0x32a>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b05      	cmp	r3, #5
 800369e:	d10c      	bne.n	80036ba <HAL_RCC_OscConfig+0x312>
 80036a0:	4b7b      	ldr	r3, [pc, #492]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80036a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a4:	4a7a      	ldr	r2, [pc, #488]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80036a6:	f043 0304 	orr.w	r3, r3, #4
 80036aa:	6713      	str	r3, [r2, #112]	; 0x70
 80036ac:	4b78      	ldr	r3, [pc, #480]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b0:	4a77      	ldr	r2, [pc, #476]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6713      	str	r3, [r2, #112]	; 0x70
 80036b8:	e00b      	b.n	80036d2 <HAL_RCC_OscConfig+0x32a>
 80036ba:	4b75      	ldr	r3, [pc, #468]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036be:	4a74      	ldr	r2, [pc, #464]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80036c0:	f023 0301 	bic.w	r3, r3, #1
 80036c4:	6713      	str	r3, [r2, #112]	; 0x70
 80036c6:	4b72      	ldr	r3, [pc, #456]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	4a71      	ldr	r2, [pc, #452]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80036cc:	f023 0304 	bic.w	r3, r3, #4
 80036d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d015      	beq.n	8003706 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036da:	f7fe fb37 	bl	8001d4c <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e0:	e00a      	b.n	80036f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036e2:	f7fe fb33 	bl	8001d4c <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e0c5      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f8:	4b65      	ldr	r3, [pc, #404]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80036fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0ee      	beq.n	80036e2 <HAL_RCC_OscConfig+0x33a>
 8003704:	e014      	b.n	8003730 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003706:	f7fe fb21 	bl	8001d4c <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370c:	e00a      	b.n	8003724 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800370e:	f7fe fb1d 	bl	8001d4c <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	f241 3288 	movw	r2, #5000	; 0x1388
 800371c:	4293      	cmp	r3, r2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e0af      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003724:	4b5a      	ldr	r3, [pc, #360]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 8003726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1ee      	bne.n	800370e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003730:	7dfb      	ldrb	r3, [r7, #23]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d105      	bne.n	8003742 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003736:	4b56      	ldr	r3, [pc, #344]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	4a55      	ldr	r2, [pc, #340]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 800373c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003740:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 809b 	beq.w	8003882 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800374c:	4b50      	ldr	r3, [pc, #320]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 030c 	and.w	r3, r3, #12
 8003754:	2b08      	cmp	r3, #8
 8003756:	d05c      	beq.n	8003812 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d141      	bne.n	80037e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003760:	4b4c      	ldr	r3, [pc, #304]	; (8003894 <HAL_RCC_OscConfig+0x4ec>)
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003766:	f7fe faf1 	bl	8001d4c <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376e:	f7fe faed 	bl	8001d4c <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e081      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003780:	4b43      	ldr	r3, [pc, #268]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1f0      	bne.n	800376e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	019b      	lsls	r3, r3, #6
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	085b      	lsrs	r3, r3, #1
 80037a4:	3b01      	subs	r3, #1
 80037a6:	041b      	lsls	r3, r3, #16
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	061b      	lsls	r3, r3, #24
 80037b0:	4937      	ldr	r1, [pc, #220]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b6:	4b37      	ldr	r3, [pc, #220]	; (8003894 <HAL_RCC_OscConfig+0x4ec>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fe fac6 	bl	8001d4c <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c4:	f7fe fac2 	bl	8001d4c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e056      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d6:	4b2e      	ldr	r3, [pc, #184]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0x41c>
 80037e2:	e04e      	b.n	8003882 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e4:	4b2b      	ldr	r3, [pc, #172]	; (8003894 <HAL_RCC_OscConfig+0x4ec>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ea:	f7fe faaf 	bl	8001d4c <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f2:	f7fe faab 	bl	8001d4c <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e03f      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003804:	4b22      	ldr	r3, [pc, #136]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f0      	bne.n	80037f2 <HAL_RCC_OscConfig+0x44a>
 8003810:	e037      	b.n	8003882 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e032      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800381e:	4b1c      	ldr	r3, [pc, #112]	; (8003890 <HAL_RCC_OscConfig+0x4e8>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d028      	beq.n	800387e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003836:	429a      	cmp	r2, r3
 8003838:	d121      	bne.n	800387e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003844:	429a      	cmp	r2, r3
 8003846:	d11a      	bne.n	800387e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800384e:	4013      	ands	r3, r2
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003854:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003856:	4293      	cmp	r3, r2
 8003858:	d111      	bne.n	800387e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	085b      	lsrs	r3, r3, #1
 8003866:	3b01      	subs	r3, #1
 8003868:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800386a:	429a      	cmp	r2, r3
 800386c:	d107      	bne.n	800387e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d001      	beq.n	8003882 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40007000 	.word	0x40007000
 8003890:	40023800 	.word	0x40023800
 8003894:	42470060 	.word	0x42470060

08003898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0cc      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038ac:	4b68      	ldr	r3, [pc, #416]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d90c      	bls.n	80038d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	4b65      	ldr	r3, [pc, #404]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c2:	4b63      	ldr	r3, [pc, #396]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0b8      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d020      	beq.n	8003922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038ec:	4b59      	ldr	r3, [pc, #356]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4a58      	ldr	r2, [pc, #352]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003904:	4b53      	ldr	r3, [pc, #332]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	4a52      	ldr	r2, [pc, #328]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800390e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003910:	4b50      	ldr	r3, [pc, #320]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	494d      	ldr	r1, [pc, #308]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d044      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d107      	bne.n	8003946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003936:	4b47      	ldr	r3, [pc, #284]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d119      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e07f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d003      	beq.n	8003956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003952:	2b03      	cmp	r3, #3
 8003954:	d107      	bne.n	8003966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003956:	4b3f      	ldr	r3, [pc, #252]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d109      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e06f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003966:	4b3b      	ldr	r3, [pc, #236]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e067      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003976:	4b37      	ldr	r3, [pc, #220]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f023 0203 	bic.w	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	4934      	ldr	r1, [pc, #208]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003984:	4313      	orrs	r3, r2
 8003986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003988:	f7fe f9e0 	bl	8001d4c <HAL_GetTick>
 800398c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398e:	e00a      	b.n	80039a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003990:	f7fe f9dc 	bl	8001d4c <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	f241 3288 	movw	r2, #5000	; 0x1388
 800399e:	4293      	cmp	r3, r2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e04f      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039a6:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 020c 	and.w	r2, r3, #12
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d1eb      	bne.n	8003990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039b8:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 030f 	and.w	r3, r3, #15
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d20c      	bcs.n	80039e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039c6:	4b22      	ldr	r3, [pc, #136]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ce:	4b20      	ldr	r3, [pc, #128]	; (8003a50 <HAL_RCC_ClockConfig+0x1b8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e032      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d008      	beq.n	80039fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039ec:	4b19      	ldr	r3, [pc, #100]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	4916      	ldr	r1, [pc, #88]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a0a:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	490e      	ldr	r1, [pc, #56]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a1e:	f000 f821 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 8003a22:	4602      	mov	r2, r0
 8003a24:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <HAL_RCC_ClockConfig+0x1bc>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	091b      	lsrs	r3, r3, #4
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	490a      	ldr	r1, [pc, #40]	; (8003a58 <HAL_RCC_ClockConfig+0x1c0>)
 8003a30:	5ccb      	ldrb	r3, [r1, r3]
 8003a32:	fa22 f303 	lsr.w	r3, r2, r3
 8003a36:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a3a:	4b09      	ldr	r3, [pc, #36]	; (8003a60 <HAL_RCC_ClockConfig+0x1c8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7fd fc46 	bl	80012d0 <HAL_InitTick>

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40023c00 	.word	0x40023c00
 8003a54:	40023800 	.word	0x40023800
 8003a58:	08007190 	.word	0x08007190
 8003a5c:	20000000 	.word	0x20000000
 8003a60:	20000040 	.word	0x20000040

08003a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	607b      	str	r3, [r7, #4]
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	2300      	movs	r3, #0
 8003a76:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a7c:	4b67      	ldr	r3, [pc, #412]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d00d      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	f200 80bd 	bhi.w	8003c08 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x34>
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d003      	beq.n	8003a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a96:	e0b7      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a98:	4b61      	ldr	r3, [pc, #388]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a9a:	60bb      	str	r3, [r7, #8]
       break;
 8003a9c:	e0b7      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a9e:	4b61      	ldr	r3, [pc, #388]	; (8003c24 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003aa0:	60bb      	str	r3, [r7, #8]
      break;
 8003aa2:	e0b4      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aa4:	4b5d      	ldr	r3, [pc, #372]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aae:	4b5b      	ldr	r3, [pc, #364]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d04d      	beq.n	8003b56 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aba:	4b58      	ldr	r3, [pc, #352]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	099b      	lsrs	r3, r3, #6
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003aca:	f04f 0100 	mov.w	r1, #0
 8003ace:	ea02 0800 	and.w	r8, r2, r0
 8003ad2:	ea03 0901 	and.w	r9, r3, r1
 8003ad6:	4640      	mov	r0, r8
 8003ad8:	4649      	mov	r1, r9
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f04f 0300 	mov.w	r3, #0
 8003ae2:	014b      	lsls	r3, r1, #5
 8003ae4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ae8:	0142      	lsls	r2, r0, #5
 8003aea:	4610      	mov	r0, r2
 8003aec:	4619      	mov	r1, r3
 8003aee:	ebb0 0008 	subs.w	r0, r0, r8
 8003af2:	eb61 0109 	sbc.w	r1, r1, r9
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	018b      	lsls	r3, r1, #6
 8003b00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b04:	0182      	lsls	r2, r0, #6
 8003b06:	1a12      	subs	r2, r2, r0
 8003b08:	eb63 0301 	sbc.w	r3, r3, r1
 8003b0c:	f04f 0000 	mov.w	r0, #0
 8003b10:	f04f 0100 	mov.w	r1, #0
 8003b14:	00d9      	lsls	r1, r3, #3
 8003b16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b1a:	00d0      	lsls	r0, r2, #3
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	eb12 0208 	adds.w	r2, r2, r8
 8003b24:	eb43 0309 	adc.w	r3, r3, r9
 8003b28:	f04f 0000 	mov.w	r0, #0
 8003b2c:	f04f 0100 	mov.w	r1, #0
 8003b30:	0259      	lsls	r1, r3, #9
 8003b32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b36:	0250      	lsls	r0, r2, #9
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4619      	mov	r1, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	f7fc fb52 	bl	80001f0 <__aeabi_uldivmod>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4613      	mov	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	e04a      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b56:	4b31      	ldr	r3, [pc, #196]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	099b      	lsrs	r3, r3, #6
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b66:	f04f 0100 	mov.w	r1, #0
 8003b6a:	ea02 0400 	and.w	r4, r2, r0
 8003b6e:	ea03 0501 	and.w	r5, r3, r1
 8003b72:	4620      	mov	r0, r4
 8003b74:	4629      	mov	r1, r5
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	014b      	lsls	r3, r1, #5
 8003b80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b84:	0142      	lsls	r2, r0, #5
 8003b86:	4610      	mov	r0, r2
 8003b88:	4619      	mov	r1, r3
 8003b8a:	1b00      	subs	r0, r0, r4
 8003b8c:	eb61 0105 	sbc.w	r1, r1, r5
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	018b      	lsls	r3, r1, #6
 8003b9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b9e:	0182      	lsls	r2, r0, #6
 8003ba0:	1a12      	subs	r2, r2, r0
 8003ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ba6:	f04f 0000 	mov.w	r0, #0
 8003baa:	f04f 0100 	mov.w	r1, #0
 8003bae:	00d9      	lsls	r1, r3, #3
 8003bb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bb4:	00d0      	lsls	r0, r2, #3
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	1912      	adds	r2, r2, r4
 8003bbc:	eb45 0303 	adc.w	r3, r5, r3
 8003bc0:	f04f 0000 	mov.w	r0, #0
 8003bc4:	f04f 0100 	mov.w	r1, #0
 8003bc8:	0299      	lsls	r1, r3, #10
 8003bca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bce:	0290      	lsls	r0, r2, #10
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	f7fc fb06 	bl	80001f0 <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4613      	mov	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bec:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	0c1b      	lsrs	r3, r3, #16
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c04:	60bb      	str	r3, [r7, #8]
      break;
 8003c06:	e002      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003c0a:	60bb      	str	r3, [r7, #8]
      break;
 8003c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40023800 	.word	0x40023800
 8003c20:	00f42400 	.word	0x00f42400
 8003c24:	007a1200 	.word	0x007a1200

08003c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c2c:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	20000000 	.word	0x20000000

08003c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c44:	f7ff fff0 	bl	8003c28 <HAL_RCC_GetHCLKFreq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b05      	ldr	r3, [pc, #20]	; (8003c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	0a9b      	lsrs	r3, r3, #10
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	4903      	ldr	r1, [pc, #12]	; (8003c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c56:	5ccb      	ldrb	r3, [r1, r3]
 8003c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40023800 	.word	0x40023800
 8003c64:	080071a0 	.word	0x080071a0

08003c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c6c:	f7ff ffdc 	bl	8003c28 <HAL_RCC_GetHCLKFreq>
 8003c70:	4602      	mov	r2, r0
 8003c72:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	0b5b      	lsrs	r3, r3, #13
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	4903      	ldr	r1, [pc, #12]	; (8003c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c7e:	5ccb      	ldrb	r3, [r1, r3]
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	080071a0 	.word	0x080071a0

08003c90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	220f      	movs	r2, #15
 8003c9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ca0:	4b12      	ldr	r3, [pc, #72]	; (8003cec <HAL_RCC_GetClockConfig+0x5c>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 0203 	and.w	r2, r3, #3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cac:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <HAL_RCC_GetClockConfig+0x5c>)
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <HAL_RCC_GetClockConfig+0x5c>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003cc4:	4b09      	ldr	r3, [pc, #36]	; (8003cec <HAL_RCC_GetClockConfig+0x5c>)
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	08db      	lsrs	r3, r3, #3
 8003cca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cd2:	4b07      	ldr	r3, [pc, #28]	; (8003cf0 <HAL_RCC_GetClockConfig+0x60>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 020f 	and.w	r2, r3, #15
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	601a      	str	r2, [r3, #0]
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	40023c00 	.word	0x40023c00

08003cf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10b      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d105      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d075      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d28:	4bad      	ldr	r3, [pc, #692]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d2e:	f7fe f80d 	bl	8001d4c <HAL_GetTick>
 8003d32:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d34:	e008      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d36:	f7fe f809 	bl	8001d4c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e18b      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003d48:	4ba6      	ldr	r3, [pc, #664]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f0      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d009      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	019a      	lsls	r2, r3, #6
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	071b      	lsls	r3, r3, #28
 8003d6c:	499d      	ldr	r1, [pc, #628]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01f      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003d80:	4b98      	ldr	r3, [pc, #608]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d86:	0f1b      	lsrs	r3, r3, #28
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	019a      	lsls	r2, r3, #6
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	061b      	lsls	r3, r3, #24
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	071b      	lsls	r3, r3, #28
 8003da0:	4990      	ldr	r1, [pc, #576]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003da8:	4b8e      	ldr	r3, [pc, #568]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003daa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dae:	f023 021f 	bic.w	r2, r3, #31
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69db      	ldr	r3, [r3, #28]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	498a      	ldr	r1, [pc, #552]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00d      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	019a      	lsls	r2, r3, #6
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	061b      	lsls	r3, r3, #24
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	071b      	lsls	r3, r3, #28
 8003de0:	4980      	ldr	r1, [pc, #512]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003de8:	4b7d      	ldr	r3, [pc, #500]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dee:	f7fd ffad 	bl	8001d4c <HAL_GetTick>
 8003df2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003df4:	e008      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003df6:	f7fd ffa9 	bl	8001d4c <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e12b      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003e08:	4b76      	ldr	r3, [pc, #472]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0f0      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d105      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d079      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003e2c:	4b6e      	ldr	r3, [pc, #440]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e32:	f7fd ff8b 	bl	8001d4c <HAL_GetTick>
 8003e36:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e38:	e008      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e3a:	f7fd ff87 	bl	8001d4c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e109      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003e4c:	4b65      	ldr	r3, [pc, #404]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e58:	d0ef      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d020      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e66:	4b5f      	ldr	r3, [pc, #380]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6c:	0f1b      	lsrs	r3, r3, #28
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	019a      	lsls	r2, r3, #6
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	061b      	lsls	r3, r3, #24
 8003e80:	431a      	orrs	r2, r3
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	071b      	lsls	r3, r3, #28
 8003e86:	4957      	ldr	r1, [pc, #348]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e8e:	4b55      	ldr	r3, [pc, #340]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	4950      	ldr	r1, [pc, #320]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01e      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003eb4:	4b4b      	ldr	r3, [pc, #300]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	0e1b      	lsrs	r3, r3, #24
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	019a      	lsls	r2, r3, #6
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	061b      	lsls	r3, r3, #24
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	071b      	lsls	r3, r3, #28
 8003ed4:	4943      	ldr	r1, [pc, #268]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003edc:	4b41      	ldr	r3, [pc, #260]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ede:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	493e      	ldr	r1, [pc, #248]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ef2:	4b3d      	ldr	r3, [pc, #244]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ef8:	f7fd ff28 	bl	8001d4c <HAL_GetTick>
 8003efc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003f00:	f7fd ff24 	bl	8001d4c <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e0a6      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f12:	4b34      	ldr	r3, [pc, #208]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f1e:	d1ef      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0320 	and.w	r3, r3, #32
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 808d 	beq.w	8004048 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	4b2c      	ldr	r3, [pc, #176]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	4a2b      	ldr	r2, [pc, #172]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f3e:	4b29      	ldr	r3, [pc, #164]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f4a:	4b28      	ldr	r3, [pc, #160]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a27      	ldr	r2, [pc, #156]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f56:	f7fd fef9 	bl	8001d4c <HAL_GetTick>
 8003f5a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f5c:	e008      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f5e:	f7fd fef5 	bl	8001d4c <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e077      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f70:	4b1e      	ldr	r3, [pc, #120]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f7c:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f84:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d039      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d032      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f9a:	4b12      	ldr	r3, [pc, #72]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fa4:	4b12      	ldr	r3, [pc, #72]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003faa:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003fb0:	4a0c      	ldr	r2, [pc, #48]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d11e      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003fc2:	f7fd fec3 	bl	8001d4c <HAL_GetTick>
 8003fc6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc8:	e014      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fca:	f7fd febf 	bl	8001d4c <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d90b      	bls.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e03f      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8003fe0:	42470068 	.word	0x42470068
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	42470070 	.word	0x42470070
 8003fec:	40007000 	.word	0x40007000
 8003ff0:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff4:	4b1c      	ldr	r3, [pc, #112]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0e4      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004004:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004008:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800400c:	d10d      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x336>
 800400e:	4b16      	ldr	r3, [pc, #88]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800401e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004022:	4911      	ldr	r1, [pc, #68]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004024:	4313      	orrs	r3, r2
 8004026:	608b      	str	r3, [r1, #8]
 8004028:	e005      	b.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800402a:	4b0f      	ldr	r3, [pc, #60]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	4a0e      	ldr	r2, [pc, #56]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004030:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004034:	6093      	str	r3, [r2, #8]
 8004036:	4b0c      	ldr	r3, [pc, #48]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004038:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800403e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004042:	4909      	ldr	r1, [pc, #36]	; (8004068 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004044:	4313      	orrs	r3, r2
 8004046:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0310 	and.w	r3, r3, #16
 8004050:	2b00      	cmp	r3, #0
 8004052:	d004      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800405a:	4b04      	ldr	r3, [pc, #16]	; (800406c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800405c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40023800 	.word	0x40023800
 800406c:	424711e0 	.word	0x424711e0

08004070 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e025      	b.n	80040d0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d106      	bne.n	800409e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7fc fb97 	bl	80007cc <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2202      	movs	r2, #2
 80040a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3304      	adds	r3, #4
 80040ae:	4619      	mov	r1, r3
 80040b0:	4610      	mov	r0, r2
 80040b2:	f001 fc83 	bl	80059bc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	461a      	mov	r2, r3
 80040c0:	6839      	ldr	r1, [r7, #0]
 80040c2:	f001 fcee 	bl	8005aa2 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e07b      	b.n	80041e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d108      	bne.n	8004104 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040fa:	d009      	beq.n	8004110 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	61da      	str	r2, [r3, #28]
 8004102:	e005      	b.n	8004110 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fd f83e 	bl	80011ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004146:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69db      	ldr	r3, [r3, #28]
 8004186:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004194:	ea42 0103 	orr.w	r1, r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	0c1b      	lsrs	r3, r3, #16
 80041ae:	f003 0104 	and.w	r1, r3, #4
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	f003 0210 	and.w	r2, r3, #16
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69da      	ldr	r2, [r3, #28]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b082      	sub	sp, #8
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e01a      	b.n	8004232 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004212:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7fd f811 	bl	800123c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b088      	sub	sp, #32
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	603b      	str	r3, [r7, #0]
 8004246:	4613      	mov	r3, r2
 8004248:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_SPI_Transmit+0x22>
 8004258:	2302      	movs	r3, #2
 800425a:	e126      	b.n	80044aa <HAL_SPI_Transmit+0x270>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004264:	f7fd fd72 	bl	8001d4c <HAL_GetTick>
 8004268:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800426a:	88fb      	ldrh	r3, [r7, #6]
 800426c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b01      	cmp	r3, #1
 8004278:	d002      	beq.n	8004280 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800427a:	2302      	movs	r3, #2
 800427c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800427e:	e10b      	b.n	8004498 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d002      	beq.n	800428c <HAL_SPI_Transmit+0x52>
 8004286:	88fb      	ldrh	r3, [r7, #6]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d102      	bne.n	8004292 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004290:	e102      	b.n	8004498 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2203      	movs	r2, #3
 8004296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	88fa      	ldrh	r2, [r7, #6]
 80042aa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	88fa      	ldrh	r2, [r7, #6]
 80042b0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042d8:	d10f      	bne.n	80042fa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004304:	2b40      	cmp	r3, #64	; 0x40
 8004306:	d007      	beq.n	8004318 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004316:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004320:	d14b      	bne.n	80043ba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d002      	beq.n	8004330 <HAL_SPI_Transmit+0xf6>
 800432a:	8afb      	ldrh	r3, [r7, #22]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d13e      	bne.n	80043ae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	881a      	ldrh	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004340:	1c9a      	adds	r2, r3, #2
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004354:	e02b      	b.n	80043ae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b02      	cmp	r3, #2
 8004362:	d112      	bne.n	800438a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	881a      	ldrh	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	1c9a      	adds	r2, r3, #2
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	86da      	strh	r2, [r3, #54]	; 0x36
 8004388:	e011      	b.n	80043ae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800438a:	f7fd fcdf 	bl	8001d4c <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d803      	bhi.n	80043a2 <HAL_SPI_Transmit+0x168>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a0:	d102      	bne.n	80043a8 <HAL_SPI_Transmit+0x16e>
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d102      	bne.n	80043ae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043ac:	e074      	b.n	8004498 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1ce      	bne.n	8004356 <HAL_SPI_Transmit+0x11c>
 80043b8:	e04c      	b.n	8004454 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <HAL_SPI_Transmit+0x18e>
 80043c2:	8afb      	ldrh	r3, [r7, #22]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d140      	bne.n	800444a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	330c      	adds	r3, #12
 80043d2:	7812      	ldrb	r2, [r2, #0]
 80043d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80043ee:	e02c      	b.n	800444a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d113      	bne.n	8004426 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	330c      	adds	r3, #12
 8004408:	7812      	ldrb	r2, [r2, #0]
 800440a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800441a:	b29b      	uxth	r3, r3
 800441c:	3b01      	subs	r3, #1
 800441e:	b29a      	uxth	r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	86da      	strh	r2, [r3, #54]	; 0x36
 8004424:	e011      	b.n	800444a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004426:	f7fd fc91 	bl	8001d4c <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d803      	bhi.n	800443e <HAL_SPI_Transmit+0x204>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443c:	d102      	bne.n	8004444 <HAL_SPI_Transmit+0x20a>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004448:	e026      	b.n	8004498 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1cd      	bne.n	80043f0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	6839      	ldr	r1, [r7, #0]
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fbd9 	bl	8004c10 <SPI_EndRxTxTransaction>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10a      	bne.n	8004488 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004472:	2300      	movs	r3, #0
 8004474:	613b      	str	r3, [r7, #16]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	613b      	str	r3, [r7, #16]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	77fb      	strb	r3, [r7, #31]
 8004494:	e000      	b.n	8004498 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004496:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3720      	adds	r7, #32
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b088      	sub	sp, #32
 80044b6:	af02      	add	r7, sp, #8
 80044b8:	60f8      	str	r0, [r7, #12]
 80044ba:	60b9      	str	r1, [r7, #8]
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	4613      	mov	r3, r2
 80044c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044ce:	d112      	bne.n	80044f6 <HAL_SPI_Receive+0x44>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10e      	bne.n	80044f6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2204      	movs	r2, #4
 80044dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80044e0:	88fa      	ldrh	r2, [r7, #6]
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	4613      	mov	r3, r2
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	68b9      	ldr	r1, [r7, #8]
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f8f1 	bl	80046d4 <HAL_SPI_TransmitReceive>
 80044f2:	4603      	mov	r3, r0
 80044f4:	e0ea      	b.n	80046cc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_SPI_Receive+0x52>
 8004500:	2302      	movs	r3, #2
 8004502:	e0e3      	b.n	80046cc <HAL_SPI_Receive+0x21a>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800450c:	f7fd fc1e 	bl	8001d4c <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b01      	cmp	r3, #1
 800451c:	d002      	beq.n	8004524 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800451e:	2302      	movs	r3, #2
 8004520:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004522:	e0ca      	b.n	80046ba <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <HAL_SPI_Receive+0x7e>
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d102      	bne.n	8004536 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004534:	e0c1      	b.n	80046ba <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2204      	movs	r2, #4
 800453a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	88fa      	ldrh	r2, [r7, #6]
 800454e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	88fa      	ldrh	r2, [r7, #6]
 8004554:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800457c:	d10f      	bne.n	800459e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800458c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800459c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a8:	2b40      	cmp	r3, #64	; 0x40
 80045aa:	d007      	beq.n	80045bc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d162      	bne.n	800468a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80045c4:	e02e      	b.n	8004624 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f003 0301 	and.w	r3, r3, #1
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d115      	bne.n	8004600 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f103 020c 	add.w	r2, r3, #12
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e0:	7812      	ldrb	r2, [r2, #0]
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	1c5a      	adds	r2, r3, #1
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045fe:	e011      	b.n	8004624 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004600:	f7fd fba4 	bl	8001d4c <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d803      	bhi.n	8004618 <HAL_SPI_Receive+0x166>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004616:	d102      	bne.n	800461e <HAL_SPI_Receive+0x16c>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d102      	bne.n	8004624 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004622:	e04a      	b.n	80046ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1cb      	bne.n	80045c6 <HAL_SPI_Receive+0x114>
 800462e:	e031      	b.n	8004694 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b01      	cmp	r3, #1
 800463c:	d113      	bne.n	8004666 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68da      	ldr	r2, [r3, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	b292      	uxth	r2, r2
 800464a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	1c9a      	adds	r2, r3, #2
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004664:	e011      	b.n	800468a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004666:	f7fd fb71 	bl	8001d4c <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	429a      	cmp	r2, r3
 8004674:	d803      	bhi.n	800467e <HAL_SPI_Receive+0x1cc>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467c:	d102      	bne.n	8004684 <HAL_SPI_Receive+0x1d2>
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d102      	bne.n	800468a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004688:	e017      	b.n	80046ba <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1cd      	bne.n	8004630 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	6839      	ldr	r1, [r7, #0]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 fa53 	bl	8004b44 <SPI_EndRxTransaction>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2220      	movs	r2, #32
 80046a8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d002      	beq.n	80046b8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	75fb      	strb	r3, [r7, #23]
 80046b6:	e000      	b.n	80046ba <HAL_SPI_Receive+0x208>
  }

error :
 80046b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08c      	sub	sp, #48	; 0x30
 80046d8:	af00      	add	r7, sp, #0
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	60b9      	str	r1, [r7, #8]
 80046de:	607a      	str	r2, [r7, #4]
 80046e0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80046e2:	2301      	movs	r3, #1
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80046e6:	2300      	movs	r3, #0
 80046e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_SPI_TransmitReceive+0x26>
 80046f6:	2302      	movs	r3, #2
 80046f8:	e18a      	b.n	8004a10 <HAL_SPI_TransmitReceive+0x33c>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004702:	f7fd fb23 	bl	8001d4c <HAL_GetTick>
 8004706:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004718:	887b      	ldrh	r3, [r7, #2]
 800471a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800471c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004720:	2b01      	cmp	r3, #1
 8004722:	d00f      	beq.n	8004744 <HAL_SPI_TransmitReceive+0x70>
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800472a:	d107      	bne.n	800473c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d103      	bne.n	800473c <HAL_SPI_TransmitReceive+0x68>
 8004734:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004738:	2b04      	cmp	r3, #4
 800473a:	d003      	beq.n	8004744 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800473c:	2302      	movs	r3, #2
 800473e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004742:	e15b      	b.n	80049fc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <HAL_SPI_TransmitReceive+0x82>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d002      	beq.n	8004756 <HAL_SPI_TransmitReceive+0x82>
 8004750:	887b      	ldrh	r3, [r7, #2]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d103      	bne.n	800475e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800475c:	e14e      	b.n	80049fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b04      	cmp	r3, #4
 8004768:	d003      	beq.n	8004772 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2205      	movs	r2, #5
 800476e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	887a      	ldrh	r2, [r7, #2]
 8004782:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	887a      	ldrh	r2, [r7, #2]
 8004788:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	887a      	ldrh	r2, [r7, #2]
 8004794:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	887a      	ldrh	r2, [r7, #2]
 800479a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	d007      	beq.n	80047c6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ce:	d178      	bne.n	80048c2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <HAL_SPI_TransmitReceive+0x10a>
 80047d8:	8b7b      	ldrh	r3, [r7, #26]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d166      	bne.n	80048ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e2:	881a      	ldrh	r2, [r3, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	1c9a      	adds	r2, r3, #2
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004802:	e053      	b.n	80048ac <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b02      	cmp	r3, #2
 8004810:	d11b      	bne.n	800484a <HAL_SPI_TransmitReceive+0x176>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d016      	beq.n	800484a <HAL_SPI_TransmitReceive+0x176>
 800481c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481e:	2b01      	cmp	r3, #1
 8004820:	d113      	bne.n	800484a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	881a      	ldrh	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	1c9a      	adds	r2, r3, #2
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b01      	cmp	r3, #1
 8004856:	d119      	bne.n	800488c <HAL_SPI_TransmitReceive+0x1b8>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d014      	beq.n	800488c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	b292      	uxth	r2, r2
 800486e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	1c9a      	adds	r2, r3, #2
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004888:	2301      	movs	r3, #1
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800488c:	f7fd fa5e 	bl	8001d4c <HAL_GetTick>
 8004890:	4602      	mov	r2, r0
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004898:	429a      	cmp	r2, r3
 800489a:	d807      	bhi.n	80048ac <HAL_SPI_TransmitReceive+0x1d8>
 800489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a2:	d003      	beq.n	80048ac <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80048aa:	e0a7      	b.n	80049fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d1a6      	bne.n	8004804 <HAL_SPI_TransmitReceive+0x130>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1a1      	bne.n	8004804 <HAL_SPI_TransmitReceive+0x130>
 80048c0:	e07c      	b.n	80049bc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_SPI_TransmitReceive+0x1fc>
 80048ca:	8b7b      	ldrh	r3, [r7, #26]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d16b      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	7812      	ldrb	r2, [r2, #0]
 80048dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048f6:	e057      	b.n	80049a8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b02      	cmp	r3, #2
 8004904:	d11c      	bne.n	8004940 <HAL_SPI_TransmitReceive+0x26c>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800490a:	b29b      	uxth	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d017      	beq.n	8004940 <HAL_SPI_TransmitReceive+0x26c>
 8004910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004912:	2b01      	cmp	r3, #1
 8004914:	d114      	bne.n	8004940 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	7812      	ldrb	r2, [r2, #0]
 8004922:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b01      	cmp	r3, #1
 800494c:	d119      	bne.n	8004982 <HAL_SPI_TransmitReceive+0x2ae>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d014      	beq.n	8004982 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800497e:	2301      	movs	r3, #1
 8004980:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004982:	f7fd f9e3 	bl	8001d4c <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800498e:	429a      	cmp	r2, r3
 8004990:	d803      	bhi.n	800499a <HAL_SPI_TransmitReceive+0x2c6>
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004998:	d102      	bne.n	80049a0 <HAL_SPI_TransmitReceive+0x2cc>
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499c:	2b00      	cmp	r3, #0
 800499e:	d103      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80049a6:	e029      	b.n	80049fc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1a2      	bne.n	80048f8 <HAL_SPI_TransmitReceive+0x224>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d19d      	bne.n	80048f8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f925 	bl	8004c10 <SPI_EndRxTxTransaction>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d006      	beq.n	80049da <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2220      	movs	r2, #32
 80049d6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80049d8:	e010      	b.n	80049fc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10b      	bne.n	80049fa <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	617b      	str	r3, [r7, #20]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	e000      	b.n	80049fc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80049fa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3730      	adds	r7, #48	; 0x30
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a26:	b2db      	uxtb	r3, r3
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004a44:	f7fd f982 	bl	8001d4c <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4c:	1a9b      	subs	r3, r3, r2
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	4413      	add	r3, r2
 8004a52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a54:	f7fd f97a 	bl	8001d4c <HAL_GetTick>
 8004a58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a5a:	4b39      	ldr	r3, [pc, #228]	; (8004b40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	015b      	lsls	r3, r3, #5
 8004a60:	0d1b      	lsrs	r3, r3, #20
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	fb02 f303 	mul.w	r3, r2, r3
 8004a68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a6a:	e054      	b.n	8004b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a72:	d050      	beq.n	8004b16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a74:	f7fd f96a 	bl	8001d4c <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	69fa      	ldr	r2, [r7, #28]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d902      	bls.n	8004a8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d13d      	bne.n	8004b06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685a      	ldr	r2, [r3, #4]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004aa2:	d111      	bne.n	8004ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aac:	d004      	beq.n	8004ab8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab6:	d107      	bne.n	8004ac8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ad0:	d10f      	bne.n	8004af2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004af0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e017      	b.n	8004b36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	bf0c      	ite	eq
 8004b26:	2301      	moveq	r3, #1
 8004b28:	2300      	movne	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d19b      	bne.n	8004a6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3720      	adds	r7, #32
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000000 	.word	0x20000000

08004b44 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b086      	sub	sp, #24
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b58:	d111      	bne.n	8004b7e <SPI_EndRxTransaction+0x3a>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b62:	d004      	beq.n	8004b6e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6c:	d107      	bne.n	8004b7e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b86:	d12a      	bne.n	8004bde <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b90:	d012      	beq.n	8004bb8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	9300      	str	r3, [sp, #0]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2180      	movs	r1, #128	; 0x80
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f7ff ff49 	bl	8004a34 <SPI_WaitFlagStateUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d02d      	beq.n	8004c04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bac:	f043 0220 	orr.w	r2, r3, #32
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e026      	b.n	8004c06 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f7ff ff36 	bl	8004a34 <SPI_WaitFlagStateUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d01a      	beq.n	8004c04 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	f043 0220 	orr.w	r2, r3, #32
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e013      	b.n	8004c06 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2200      	movs	r2, #0
 8004be6:	2101      	movs	r1, #1
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f7ff ff23 	bl	8004a34 <SPI_WaitFlagStateUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d007      	beq.n	8004c04 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf8:	f043 0220 	orr.w	r2, r3, #32
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e000      	b.n	8004c06 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c1c:	4b1b      	ldr	r3, [pc, #108]	; (8004c8c <SPI_EndRxTxTransaction+0x7c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a1b      	ldr	r2, [pc, #108]	; (8004c90 <SPI_EndRxTxTransaction+0x80>)
 8004c22:	fba2 2303 	umull	r2, r3, r2, r3
 8004c26:	0d5b      	lsrs	r3, r3, #21
 8004c28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c2c:	fb02 f303 	mul.w	r3, r2, r3
 8004c30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c3a:	d112      	bne.n	8004c62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	2200      	movs	r2, #0
 8004c44:	2180      	movs	r1, #128	; 0x80
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff fef4 	bl	8004a34 <SPI_WaitFlagStateUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d016      	beq.n	8004c80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c56:	f043 0220 	orr.w	r2, r3, #32
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e00f      	b.n	8004c82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c78:	2b80      	cmp	r3, #128	; 0x80
 8004c7a:	d0f2      	beq.n	8004c62 <SPI_EndRxTxTransaction+0x52>
 8004c7c:	e000      	b.n	8004c80 <SPI_EndRxTxTransaction+0x70>
        break;
 8004c7e:	bf00      	nop
  }

  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3718      	adds	r7, #24
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000000 	.word	0x20000000
 8004c90:	165e9f81 	.word	0x165e9f81

08004c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e041      	b.n	8004d2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d106      	bne.n	8004cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f7fc fbf8 	bl	80014b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	f000 fa92 	bl	80051fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d001      	beq.n	8004d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e04e      	b.n	8004dea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a23      	ldr	r2, [pc, #140]	; (8004df8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d022      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x80>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d76:	d01d      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x80>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a1f      	ldr	r2, [pc, #124]	; (8004dfc <HAL_TIM_Base_Start_IT+0xc8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d018      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x80>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a1e      	ldr	r2, [pc, #120]	; (8004e00 <HAL_TIM_Base_Start_IT+0xcc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d013      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x80>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a1c      	ldr	r2, [pc, #112]	; (8004e04 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d00e      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x80>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a1b      	ldr	r2, [pc, #108]	; (8004e08 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d009      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x80>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a19      	ldr	r2, [pc, #100]	; (8004e0c <HAL_TIM_Base_Start_IT+0xd8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d004      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x80>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a18      	ldr	r2, [pc, #96]	; (8004e10 <HAL_TIM_Base_Start_IT+0xdc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d111      	bne.n	8004dd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b06      	cmp	r3, #6
 8004dc4:	d010      	beq.n	8004de8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0201 	orr.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd6:	e007      	b.n	8004de8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40010000 	.word	0x40010000
 8004dfc:	40000400 	.word	0x40000400
 8004e00:	40000800 	.word	0x40000800
 8004e04:	40000c00 	.word	0x40000c00
 8004e08:	40010400 	.word	0x40010400
 8004e0c:	40014000 	.word	0x40014000
 8004e10:	40001800 	.word	0x40001800

08004e14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d122      	bne.n	8004e70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d11b      	bne.n	8004e70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f06f 0202 	mvn.w	r2, #2
 8004e40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f9b2 	bl	80051c0 <HAL_TIM_IC_CaptureCallback>
 8004e5c:	e005      	b.n	8004e6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f9a4 	bl	80051ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f9b5 	bl	80051d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	d122      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0304 	and.w	r3, r3, #4
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d11b      	bne.n	8004ec4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0204 	mvn.w	r2, #4
 8004e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699b      	ldr	r3, [r3, #24]
 8004ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f988 	bl	80051c0 <HAL_TIM_IC_CaptureCallback>
 8004eb0:	e005      	b.n	8004ebe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f97a 	bl	80051ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 f98b 	bl	80051d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b08      	cmp	r3, #8
 8004ed0:	d122      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b08      	cmp	r3, #8
 8004ede:	d11b      	bne.n	8004f18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0208 	mvn.w	r2, #8
 8004ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2204      	movs	r2, #4
 8004eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f95e 	bl	80051c0 <HAL_TIM_IC_CaptureCallback>
 8004f04:	e005      	b.n	8004f12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f950 	bl	80051ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f961 	bl	80051d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0310 	and.w	r3, r3, #16
 8004f22:	2b10      	cmp	r3, #16
 8004f24:	d122      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d11b      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0210 	mvn.w	r2, #16
 8004f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2208      	movs	r2, #8
 8004f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f934 	bl	80051c0 <HAL_TIM_IC_CaptureCallback>
 8004f58:	e005      	b.n	8004f66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f926 	bl	80051ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f937 	bl	80051d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d10e      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0301 	and.w	r3, r3, #1
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d107      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0201 	mvn.w	r2, #1
 8004f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7fc f8bc 	bl	8001110 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa2:	2b80      	cmp	r3, #128	; 0x80
 8004fa4:	d10e      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb0:	2b80      	cmp	r3, #128	; 0x80
 8004fb2:	d107      	bne.n	8004fc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fadc 	bl	800557c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fce:	2b40      	cmp	r3, #64	; 0x40
 8004fd0:	d10e      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fdc:	2b40      	cmp	r3, #64	; 0x40
 8004fde:	d107      	bne.n	8004ff0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f8fc 	bl	80051e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b20      	cmp	r3, #32
 8004ffc:	d10e      	bne.n	800501c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f003 0320 	and.w	r3, r3, #32
 8005008:	2b20      	cmp	r3, #32
 800500a:	d107      	bne.n	800501c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f06f 0220 	mvn.w	r2, #32
 8005014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 faa6 	bl	8005568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800501c:	bf00      	nop
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_TIM_ConfigClockSource+0x18>
 8005038:	2302      	movs	r3, #2
 800503a:	e0b3      	b.n	80051a4 <HAL_TIM_ConfigClockSource+0x180>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800505a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005062:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005074:	d03e      	beq.n	80050f4 <HAL_TIM_ConfigClockSource+0xd0>
 8005076:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800507a:	f200 8087 	bhi.w	800518c <HAL_TIM_ConfigClockSource+0x168>
 800507e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005082:	f000 8085 	beq.w	8005190 <HAL_TIM_ConfigClockSource+0x16c>
 8005086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800508a:	d87f      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x168>
 800508c:	2b70      	cmp	r3, #112	; 0x70
 800508e:	d01a      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0xa2>
 8005090:	2b70      	cmp	r3, #112	; 0x70
 8005092:	d87b      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x168>
 8005094:	2b60      	cmp	r3, #96	; 0x60
 8005096:	d050      	beq.n	800513a <HAL_TIM_ConfigClockSource+0x116>
 8005098:	2b60      	cmp	r3, #96	; 0x60
 800509a:	d877      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x168>
 800509c:	2b50      	cmp	r3, #80	; 0x50
 800509e:	d03c      	beq.n	800511a <HAL_TIM_ConfigClockSource+0xf6>
 80050a0:	2b50      	cmp	r3, #80	; 0x50
 80050a2:	d873      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x168>
 80050a4:	2b40      	cmp	r3, #64	; 0x40
 80050a6:	d058      	beq.n	800515a <HAL_TIM_ConfigClockSource+0x136>
 80050a8:	2b40      	cmp	r3, #64	; 0x40
 80050aa:	d86f      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x168>
 80050ac:	2b30      	cmp	r3, #48	; 0x30
 80050ae:	d064      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x156>
 80050b0:	2b30      	cmp	r3, #48	; 0x30
 80050b2:	d86b      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x168>
 80050b4:	2b20      	cmp	r3, #32
 80050b6:	d060      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x156>
 80050b8:	2b20      	cmp	r3, #32
 80050ba:	d867      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x168>
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d05c      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x156>
 80050c0:	2b10      	cmp	r3, #16
 80050c2:	d05a      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80050c4:	e062      	b.n	800518c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	6899      	ldr	r1, [r3, #8]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	f000 f9ab 	bl	8005430 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	609a      	str	r2, [r3, #8]
      break;
 80050f2:	e04e      	b.n	8005192 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6818      	ldr	r0, [r3, #0]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	6899      	ldr	r1, [r3, #8]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f000 f994 	bl	8005430 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689a      	ldr	r2, [r3, #8]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005116:	609a      	str	r2, [r3, #8]
      break;
 8005118:	e03b      	b.n	8005192 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6818      	ldr	r0, [r3, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	6859      	ldr	r1, [r3, #4]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	461a      	mov	r2, r3
 8005128:	f000 f908 	bl	800533c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2150      	movs	r1, #80	; 0x50
 8005132:	4618      	mov	r0, r3
 8005134:	f000 f961 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8005138:	e02b      	b.n	8005192 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6818      	ldr	r0, [r3, #0]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	6859      	ldr	r1, [r3, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	461a      	mov	r2, r3
 8005148:	f000 f927 	bl	800539a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2160      	movs	r1, #96	; 0x60
 8005152:	4618      	mov	r0, r3
 8005154:	f000 f951 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8005158:	e01b      	b.n	8005192 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	6859      	ldr	r1, [r3, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	461a      	mov	r2, r3
 8005168:	f000 f8e8 	bl	800533c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2140      	movs	r1, #64	; 0x40
 8005172:	4618      	mov	r0, r3
 8005174:	f000 f941 	bl	80053fa <TIM_ITRx_SetConfig>
      break;
 8005178:	e00b      	b.n	8005192 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4619      	mov	r1, r3
 8005184:	4610      	mov	r0, r2
 8005186:	f000 f938 	bl	80053fa <TIM_ITRx_SetConfig>
        break;
 800518a:	e002      	b.n	8005192 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800518c:	bf00      	nop
 800518e:	e000      	b.n	8005192 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005190:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a40      	ldr	r2, [pc, #256]	; (8005310 <TIM_Base_SetConfig+0x114>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d013      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521a:	d00f      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a3d      	ldr	r2, [pc, #244]	; (8005314 <TIM_Base_SetConfig+0x118>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00b      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a3c      	ldr	r2, [pc, #240]	; (8005318 <TIM_Base_SetConfig+0x11c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d007      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a3b      	ldr	r2, [pc, #236]	; (800531c <TIM_Base_SetConfig+0x120>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d003      	beq.n	800523c <TIM_Base_SetConfig+0x40>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a3a      	ldr	r2, [pc, #232]	; (8005320 <TIM_Base_SetConfig+0x124>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d108      	bne.n	800524e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a2f      	ldr	r2, [pc, #188]	; (8005310 <TIM_Base_SetConfig+0x114>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d02b      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525c:	d027      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a2c      	ldr	r2, [pc, #176]	; (8005314 <TIM_Base_SetConfig+0x118>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d023      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a2b      	ldr	r2, [pc, #172]	; (8005318 <TIM_Base_SetConfig+0x11c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d01f      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a2a      	ldr	r2, [pc, #168]	; (800531c <TIM_Base_SetConfig+0x120>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d01b      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a29      	ldr	r2, [pc, #164]	; (8005320 <TIM_Base_SetConfig+0x124>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d017      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a28      	ldr	r2, [pc, #160]	; (8005324 <TIM_Base_SetConfig+0x128>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d013      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a27      	ldr	r2, [pc, #156]	; (8005328 <TIM_Base_SetConfig+0x12c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00f      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a26      	ldr	r2, [pc, #152]	; (800532c <TIM_Base_SetConfig+0x130>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00b      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a25      	ldr	r2, [pc, #148]	; (8005330 <TIM_Base_SetConfig+0x134>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d007      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a24      	ldr	r2, [pc, #144]	; (8005334 <TIM_Base_SetConfig+0x138>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d003      	beq.n	80052ae <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a23      	ldr	r2, [pc, #140]	; (8005338 <TIM_Base_SetConfig+0x13c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d108      	bne.n	80052c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a0a      	ldr	r2, [pc, #40]	; (8005310 <TIM_Base_SetConfig+0x114>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_Base_SetConfig+0xf8>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a0c      	ldr	r2, [pc, #48]	; (8005320 <TIM_Base_SetConfig+0x124>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d103      	bne.n	80052fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	615a      	str	r2, [r3, #20]
}
 8005302:	bf00      	nop
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	40010000 	.word	0x40010000
 8005314:	40000400 	.word	0x40000400
 8005318:	40000800 	.word	0x40000800
 800531c:	40000c00 	.word	0x40000c00
 8005320:	40010400 	.word	0x40010400
 8005324:	40014000 	.word	0x40014000
 8005328:	40014400 	.word	0x40014400
 800532c:	40014800 	.word	0x40014800
 8005330:	40001800 	.word	0x40001800
 8005334:	40001c00 	.word	0x40001c00
 8005338:	40002000 	.word	0x40002000

0800533c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a1b      	ldr	r3, [r3, #32]
 800534c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f023 0201 	bic.w	r2, r3, #1
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f023 030a 	bic.w	r3, r3, #10
 8005378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4313      	orrs	r3, r2
 8005380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	621a      	str	r2, [r3, #32]
}
 800538e:	bf00      	nop
 8005390:	371c      	adds	r7, #28
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800539a:	b480      	push	{r7}
 800539c:	b087      	sub	sp, #28
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	f023 0210 	bic.w	r2, r3, #16
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	031b      	lsls	r3, r3, #12
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b085      	sub	sp, #20
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
 8005402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	f043 0307 	orr.w	r3, r3, #7
 800541c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	609a      	str	r2, [r3, #8]
}
 8005424:	bf00      	nop
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800544a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	021a      	lsls	r2, r3, #8
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	431a      	orrs	r2, r3
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4313      	orrs	r3, r2
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	609a      	str	r2, [r3, #8]
}
 8005464:	bf00      	nop
 8005466:	371c      	adds	r7, #28
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005480:	2b01      	cmp	r3, #1
 8005482:	d101      	bne.n	8005488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005484:	2302      	movs	r3, #2
 8005486:	e05a      	b.n	800553e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a21      	ldr	r2, [pc, #132]	; (800554c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d022      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d4:	d01d      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1d      	ldr	r2, [pc, #116]	; (8005550 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d018      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1b      	ldr	r2, [pc, #108]	; (8005554 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d013      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a1a      	ldr	r2, [pc, #104]	; (8005558 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00e      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a18      	ldr	r2, [pc, #96]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d009      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a17      	ldr	r2, [pc, #92]	; (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d004      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a15      	ldr	r2, [pc, #84]	; (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d10c      	bne.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	4313      	orrs	r3, r2
 8005522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40010000 	.word	0x40010000
 8005550:	40000400 	.word	0x40000400
 8005554:	40000800 	.word	0x40000800
 8005558:	40000c00 	.word	0x40000c00
 800555c:	40010400 	.word	0x40010400
 8005560:	40014000 	.word	0x40014000
 8005564:	40001800 	.word	0x40001800

08005568 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e03f      	b.n	8005622 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fb ffc6 	bl	8001548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2224      	movs	r2, #36	; 0x24
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f829 	bl	800562c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	691a      	ldr	r2, [r3, #16]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	695a      	ldr	r2, [r3, #20]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005608:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2220      	movs	r2, #32
 800561c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800562c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005630:	b09f      	sub	sp, #124	; 0x7c
 8005632:	af00      	add	r7, sp, #0
 8005634:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005642:	68d9      	ldr	r1, [r3, #12]
 8005644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	ea40 0301 	orr.w	r3, r0, r1
 800564c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800564e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	431a      	orrs	r2, r3
 8005658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	431a      	orrs	r2, r3
 800565e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	4313      	orrs	r3, r2
 8005664:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005670:	f021 010c 	bic.w	r1, r1, #12
 8005674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800567a:	430b      	orrs	r3, r1
 800567c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800567e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800568a:	6999      	ldr	r1, [r3, #24]
 800568c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	ea40 0301 	orr.w	r3, r0, r1
 8005694:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	4bc5      	ldr	r3, [pc, #788]	; (80059b0 <UART_SetConfig+0x384>)
 800569c:	429a      	cmp	r2, r3
 800569e:	d004      	beq.n	80056aa <UART_SetConfig+0x7e>
 80056a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	4bc3      	ldr	r3, [pc, #780]	; (80059b4 <UART_SetConfig+0x388>)
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d103      	bne.n	80056b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056aa:	f7fe fadd 	bl	8003c68 <HAL_RCC_GetPCLK2Freq>
 80056ae:	6778      	str	r0, [r7, #116]	; 0x74
 80056b0:	e002      	b.n	80056b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056b2:	f7fe fac5 	bl	8003c40 <HAL_RCC_GetPCLK1Freq>
 80056b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c0:	f040 80b6 	bne.w	8005830 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056c6:	461c      	mov	r4, r3
 80056c8:	f04f 0500 	mov.w	r5, #0
 80056cc:	4622      	mov	r2, r4
 80056ce:	462b      	mov	r3, r5
 80056d0:	1891      	adds	r1, r2, r2
 80056d2:	6439      	str	r1, [r7, #64]	; 0x40
 80056d4:	415b      	adcs	r3, r3
 80056d6:	647b      	str	r3, [r7, #68]	; 0x44
 80056d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80056dc:	1912      	adds	r2, r2, r4
 80056de:	eb45 0303 	adc.w	r3, r5, r3
 80056e2:	f04f 0000 	mov.w	r0, #0
 80056e6:	f04f 0100 	mov.w	r1, #0
 80056ea:	00d9      	lsls	r1, r3, #3
 80056ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056f0:	00d0      	lsls	r0, r2, #3
 80056f2:	4602      	mov	r2, r0
 80056f4:	460b      	mov	r3, r1
 80056f6:	1911      	adds	r1, r2, r4
 80056f8:	6639      	str	r1, [r7, #96]	; 0x60
 80056fa:	416b      	adcs	r3, r5
 80056fc:	667b      	str	r3, [r7, #100]	; 0x64
 80056fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	461a      	mov	r2, r3
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	1891      	adds	r1, r2, r2
 800570a:	63b9      	str	r1, [r7, #56]	; 0x38
 800570c:	415b      	adcs	r3, r3
 800570e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005710:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005714:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005718:	f7fa fd6a 	bl	80001f0 <__aeabi_uldivmod>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4ba5      	ldr	r3, [pc, #660]	; (80059b8 <UART_SetConfig+0x38c>)
 8005722:	fba3 2302 	umull	r2, r3, r3, r2
 8005726:	095b      	lsrs	r3, r3, #5
 8005728:	011e      	lsls	r6, r3, #4
 800572a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800572c:	461c      	mov	r4, r3
 800572e:	f04f 0500 	mov.w	r5, #0
 8005732:	4622      	mov	r2, r4
 8005734:	462b      	mov	r3, r5
 8005736:	1891      	adds	r1, r2, r2
 8005738:	6339      	str	r1, [r7, #48]	; 0x30
 800573a:	415b      	adcs	r3, r3
 800573c:	637b      	str	r3, [r7, #52]	; 0x34
 800573e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005742:	1912      	adds	r2, r2, r4
 8005744:	eb45 0303 	adc.w	r3, r5, r3
 8005748:	f04f 0000 	mov.w	r0, #0
 800574c:	f04f 0100 	mov.w	r1, #0
 8005750:	00d9      	lsls	r1, r3, #3
 8005752:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005756:	00d0      	lsls	r0, r2, #3
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	1911      	adds	r1, r2, r4
 800575e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005760:	416b      	adcs	r3, r5
 8005762:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	461a      	mov	r2, r3
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	1891      	adds	r1, r2, r2
 8005770:	62b9      	str	r1, [r7, #40]	; 0x28
 8005772:	415b      	adcs	r3, r3
 8005774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005776:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800577a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800577e:	f7fa fd37 	bl	80001f0 <__aeabi_uldivmod>
 8005782:	4602      	mov	r2, r0
 8005784:	460b      	mov	r3, r1
 8005786:	4b8c      	ldr	r3, [pc, #560]	; (80059b8 <UART_SetConfig+0x38c>)
 8005788:	fba3 1302 	umull	r1, r3, r3, r2
 800578c:	095b      	lsrs	r3, r3, #5
 800578e:	2164      	movs	r1, #100	; 0x64
 8005790:	fb01 f303 	mul.w	r3, r1, r3
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	3332      	adds	r3, #50	; 0x32
 800579a:	4a87      	ldr	r2, [pc, #540]	; (80059b8 <UART_SetConfig+0x38c>)
 800579c:	fba2 2303 	umull	r2, r3, r2, r3
 80057a0:	095b      	lsrs	r3, r3, #5
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057a8:	441e      	add	r6, r3
 80057aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ac:	4618      	mov	r0, r3
 80057ae:	f04f 0100 	mov.w	r1, #0
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	1894      	adds	r4, r2, r2
 80057b8:	623c      	str	r4, [r7, #32]
 80057ba:	415b      	adcs	r3, r3
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
 80057be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057c2:	1812      	adds	r2, r2, r0
 80057c4:	eb41 0303 	adc.w	r3, r1, r3
 80057c8:	f04f 0400 	mov.w	r4, #0
 80057cc:	f04f 0500 	mov.w	r5, #0
 80057d0:	00dd      	lsls	r5, r3, #3
 80057d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80057d6:	00d4      	lsls	r4, r2, #3
 80057d8:	4622      	mov	r2, r4
 80057da:	462b      	mov	r3, r5
 80057dc:	1814      	adds	r4, r2, r0
 80057de:	653c      	str	r4, [r7, #80]	; 0x50
 80057e0:	414b      	adcs	r3, r1
 80057e2:	657b      	str	r3, [r7, #84]	; 0x54
 80057e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	461a      	mov	r2, r3
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	1891      	adds	r1, r2, r2
 80057f0:	61b9      	str	r1, [r7, #24]
 80057f2:	415b      	adcs	r3, r3
 80057f4:	61fb      	str	r3, [r7, #28]
 80057f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80057fe:	f7fa fcf7 	bl	80001f0 <__aeabi_uldivmod>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4b6c      	ldr	r3, [pc, #432]	; (80059b8 <UART_SetConfig+0x38c>)
 8005808:	fba3 1302 	umull	r1, r3, r3, r2
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	2164      	movs	r1, #100	; 0x64
 8005810:	fb01 f303 	mul.w	r3, r1, r3
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	3332      	adds	r3, #50	; 0x32
 800581a:	4a67      	ldr	r2, [pc, #412]	; (80059b8 <UART_SetConfig+0x38c>)
 800581c:	fba2 2303 	umull	r2, r3, r2, r3
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	f003 0207 	and.w	r2, r3, #7
 8005826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4432      	add	r2, r6
 800582c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800582e:	e0b9      	b.n	80059a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005832:	461c      	mov	r4, r3
 8005834:	f04f 0500 	mov.w	r5, #0
 8005838:	4622      	mov	r2, r4
 800583a:	462b      	mov	r3, r5
 800583c:	1891      	adds	r1, r2, r2
 800583e:	6139      	str	r1, [r7, #16]
 8005840:	415b      	adcs	r3, r3
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005848:	1912      	adds	r2, r2, r4
 800584a:	eb45 0303 	adc.w	r3, r5, r3
 800584e:	f04f 0000 	mov.w	r0, #0
 8005852:	f04f 0100 	mov.w	r1, #0
 8005856:	00d9      	lsls	r1, r3, #3
 8005858:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800585c:	00d0      	lsls	r0, r2, #3
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	eb12 0804 	adds.w	r8, r2, r4
 8005866:	eb43 0905 	adc.w	r9, r3, r5
 800586a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	4618      	mov	r0, r3
 8005870:	f04f 0100 	mov.w	r1, #0
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	008b      	lsls	r3, r1, #2
 800587e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005882:	0082      	lsls	r2, r0, #2
 8005884:	4640      	mov	r0, r8
 8005886:	4649      	mov	r1, r9
 8005888:	f7fa fcb2 	bl	80001f0 <__aeabi_uldivmod>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4b49      	ldr	r3, [pc, #292]	; (80059b8 <UART_SetConfig+0x38c>)
 8005892:	fba3 2302 	umull	r2, r3, r3, r2
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	011e      	lsls	r6, r3, #4
 800589a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800589c:	4618      	mov	r0, r3
 800589e:	f04f 0100 	mov.w	r1, #0
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	1894      	adds	r4, r2, r2
 80058a8:	60bc      	str	r4, [r7, #8]
 80058aa:	415b      	adcs	r3, r3
 80058ac:	60fb      	str	r3, [r7, #12]
 80058ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058b2:	1812      	adds	r2, r2, r0
 80058b4:	eb41 0303 	adc.w	r3, r1, r3
 80058b8:	f04f 0400 	mov.w	r4, #0
 80058bc:	f04f 0500 	mov.w	r5, #0
 80058c0:	00dd      	lsls	r5, r3, #3
 80058c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058c6:	00d4      	lsls	r4, r2, #3
 80058c8:	4622      	mov	r2, r4
 80058ca:	462b      	mov	r3, r5
 80058cc:	1814      	adds	r4, r2, r0
 80058ce:	64bc      	str	r4, [r7, #72]	; 0x48
 80058d0:	414b      	adcs	r3, r1
 80058d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	4618      	mov	r0, r3
 80058da:	f04f 0100 	mov.w	r1, #0
 80058de:	f04f 0200 	mov.w	r2, #0
 80058e2:	f04f 0300 	mov.w	r3, #0
 80058e6:	008b      	lsls	r3, r1, #2
 80058e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058ec:	0082      	lsls	r2, r0, #2
 80058ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80058f2:	f7fa fc7d 	bl	80001f0 <__aeabi_uldivmod>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4b2f      	ldr	r3, [pc, #188]	; (80059b8 <UART_SetConfig+0x38c>)
 80058fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005900:	095b      	lsrs	r3, r3, #5
 8005902:	2164      	movs	r1, #100	; 0x64
 8005904:	fb01 f303 	mul.w	r3, r1, r3
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	3332      	adds	r3, #50	; 0x32
 800590e:	4a2a      	ldr	r2, [pc, #168]	; (80059b8 <UART_SetConfig+0x38c>)
 8005910:	fba2 2303 	umull	r2, r3, r2, r3
 8005914:	095b      	lsrs	r3, r3, #5
 8005916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800591a:	441e      	add	r6, r3
 800591c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800591e:	4618      	mov	r0, r3
 8005920:	f04f 0100 	mov.w	r1, #0
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	1894      	adds	r4, r2, r2
 800592a:	603c      	str	r4, [r7, #0]
 800592c:	415b      	adcs	r3, r3
 800592e:	607b      	str	r3, [r7, #4]
 8005930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005934:	1812      	adds	r2, r2, r0
 8005936:	eb41 0303 	adc.w	r3, r1, r3
 800593a:	f04f 0400 	mov.w	r4, #0
 800593e:	f04f 0500 	mov.w	r5, #0
 8005942:	00dd      	lsls	r5, r3, #3
 8005944:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005948:	00d4      	lsls	r4, r2, #3
 800594a:	4622      	mov	r2, r4
 800594c:	462b      	mov	r3, r5
 800594e:	eb12 0a00 	adds.w	sl, r2, r0
 8005952:	eb43 0b01 	adc.w	fp, r3, r1
 8005956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	4618      	mov	r0, r3
 800595c:	f04f 0100 	mov.w	r1, #0
 8005960:	f04f 0200 	mov.w	r2, #0
 8005964:	f04f 0300 	mov.w	r3, #0
 8005968:	008b      	lsls	r3, r1, #2
 800596a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800596e:	0082      	lsls	r2, r0, #2
 8005970:	4650      	mov	r0, sl
 8005972:	4659      	mov	r1, fp
 8005974:	f7fa fc3c 	bl	80001f0 <__aeabi_uldivmod>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4b0e      	ldr	r3, [pc, #56]	; (80059b8 <UART_SetConfig+0x38c>)
 800597e:	fba3 1302 	umull	r1, r3, r3, r2
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	2164      	movs	r1, #100	; 0x64
 8005986:	fb01 f303 	mul.w	r3, r1, r3
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	3332      	adds	r3, #50	; 0x32
 8005990:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <UART_SetConfig+0x38c>)
 8005992:	fba2 2303 	umull	r2, r3, r2, r3
 8005996:	095b      	lsrs	r3, r3, #5
 8005998:	f003 020f 	and.w	r2, r3, #15
 800599c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4432      	add	r2, r6
 80059a2:	609a      	str	r2, [r3, #8]
}
 80059a4:	bf00      	nop
 80059a6:	377c      	adds	r7, #124	; 0x7c
 80059a8:	46bd      	mov	sp, r7
 80059aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059ae:	bf00      	nop
 80059b0:	40011000 	.word	0x40011000
 80059b4:	40011400 	.word	0x40011400
 80059b8:	51eb851f 	.word	0x51eb851f

080059bc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d029      	beq.n	8005a2a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80059e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80059e6:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80059f0:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 80059f6:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 80059fc:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8005a02:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8005a08:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 8005a0e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8005a14:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 8005a1a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	e034      	b.n	8005a94 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a36:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005a40:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8005a46:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005a5a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a5e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a68:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 8005a6e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 8005a74:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 8005a7a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 8005a80:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b087      	sub	sp, #28
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d02e      	beq.n	8005b1a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005ac8:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005ad8:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8005ae2:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8005aec:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005af6:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	3b01      	subs	r3, #1
 8005afe:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8005b00:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	699b      	ldr	r3, [r3, #24]
 8005b06:	3b01      	subs	r3, #1
 8005b08:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	609a      	str	r2, [r3, #8]
 8005b18:	e03b      	b.n	8005b92 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b2a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005b50:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005b60:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8005b6a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	3b01      	subs	r3, #1
 8005b72:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8005b74:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	371c      	adds	r7, #28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005bae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bb2:	2b84      	cmp	r3, #132	; 0x84
 8005bb4:	d005      	beq.n	8005bc2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005bb6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	3303      	adds	r3, #3
 8005bc0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005bd4:	f000 faea 	bl	80061ac <vTaskStartScheduler>
  
  return osOK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005bde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005be0:	b089      	sub	sp, #36	; 0x24
 8005be2:	af04      	add	r7, sp, #16
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d020      	beq.n	8005c32 <osThreadCreate+0x54>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01c      	beq.n	8005c32 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685c      	ldr	r4, [r3, #4]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681d      	ldr	r5, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691e      	ldr	r6, [r3, #16]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7ff ffc8 	bl	8005ba0 <makeFreeRtosPriority>
 8005c10:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c1a:	9202      	str	r2, [sp, #8]
 8005c1c:	9301      	str	r3, [sp, #4]
 8005c1e:	9100      	str	r1, [sp, #0]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	4632      	mov	r2, r6
 8005c24:	4629      	mov	r1, r5
 8005c26:	4620      	mov	r0, r4
 8005c28:	f000 f8ed 	bl	8005e06 <xTaskCreateStatic>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	e01c      	b.n	8005c6c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685c      	ldr	r4, [r3, #4]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c3e:	b29e      	uxth	r6, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7ff ffaa 	bl	8005ba0 <makeFreeRtosPriority>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	f107 030c 	add.w	r3, r7, #12
 8005c52:	9301      	str	r3, [sp, #4]
 8005c54:	9200      	str	r2, [sp, #0]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	4632      	mov	r2, r6
 8005c5a:	4629      	mov	r1, r5
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	f000 f92f 	bl	8005ec0 <xTaskCreate>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d001      	beq.n	8005c6c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	e000      	b.n	8005c6e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c76 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <osDelay+0x16>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	e000      	b.n	8005c8e <osDelay+0x18>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fa58 	bl	8006144 <vTaskDelay>
  
  return osOK;
 8005c94:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f103 0208 	add.w	r2, r3, #8
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f103 0208 	add.w	r2, r3, #8
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f103 0208 	add.w	r2, r3, #8
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	601a      	str	r2, [r3, #0]
}
 8005d34:	bf00      	nop
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d56:	d103      	bne.n	8005d60 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	e00c      	b.n	8005d7a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3308      	adds	r3, #8
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	e002      	b.n	8005d6e <vListInsert+0x2e>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d2f6      	bcs.n	8005d68 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	601a      	str	r2, [r3, #0]
}
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005db2:	b480      	push	{r7}
 8005db4:	b085      	sub	sp, #20
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	6892      	ldr	r2, [r2, #8]
 8005dc8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6852      	ldr	r2, [r2, #4]
 8005dd2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d103      	bne.n	8005de6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	1e5a      	subs	r2, r3, #1
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b08e      	sub	sp, #56	; 0x38
 8005e0a:	af04      	add	r7, sp, #16
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10a      	bne.n	8005e30 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e2c:	bf00      	nop
 8005e2e:	e7fe      	b.n	8005e2e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <xTaskCreateStatic+0x46>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	61fb      	str	r3, [r7, #28]
}
 8005e48:	bf00      	nop
 8005e4a:	e7fe      	b.n	8005e4a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e4c:	2358      	movs	r3, #88	; 0x58
 8005e4e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	2b58      	cmp	r3, #88	; 0x58
 8005e54:	d00a      	beq.n	8005e6c <xTaskCreateStatic+0x66>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	61bb      	str	r3, [r7, #24]
}
 8005e68:	bf00      	nop
 8005e6a:	e7fe      	b.n	8005e6a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e6c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d01e      	beq.n	8005eb2 <xTaskCreateStatic+0xac>
 8005e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d01b      	beq.n	8005eb2 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e82:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	9303      	str	r3, [sp, #12]
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	9302      	str	r3, [sp, #8]
 8005e94:	f107 0314 	add.w	r3, r7, #20
 8005e98:	9301      	str	r3, [sp, #4]
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f000 f850 	bl	8005f4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005eaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005eac:	f000 f8e0 	bl	8006070 <prvAddNewTaskToReadyList>
 8005eb0:	e001      	b.n	8005eb6 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005eb6:	697b      	ldr	r3, [r7, #20]
	}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3728      	adds	r7, #40	; 0x28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b08c      	sub	sp, #48	; 0x30
 8005ec4:	af04      	add	r7, sp, #16
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	603b      	str	r3, [r7, #0]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ed0:	88fb      	ldrh	r3, [r7, #6]
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 fef7 	bl	8006cc8 <pvPortMalloc>
 8005eda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00e      	beq.n	8005f00 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ee2:	2058      	movs	r0, #88	; 0x58
 8005ee4:	f000 fef0 	bl	8006cc8 <pvPortMalloc>
 8005ee8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	631a      	str	r2, [r3, #48]	; 0x30
 8005ef6:	e005      	b.n	8005f04 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ef8:	6978      	ldr	r0, [r7, #20]
 8005efa:	f000 ffb5 	bl	8006e68 <vPortFree>
 8005efe:	e001      	b.n	8005f04 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f00:	2300      	movs	r3, #0
 8005f02:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d017      	beq.n	8005f3a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f12:	88fa      	ldrh	r2, [r7, #6]
 8005f14:	2300      	movs	r3, #0
 8005f16:	9303      	str	r3, [sp, #12]
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	9302      	str	r3, [sp, #8]
 8005f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1e:	9301      	str	r3, [sp, #4]
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	68b9      	ldr	r1, [r7, #8]
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f000 f80e 	bl	8005f4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f2e:	69f8      	ldr	r0, [r7, #28]
 8005f30:	f000 f89e 	bl	8006070 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f34:	2301      	movs	r3, #1
 8005f36:	61bb      	str	r3, [r7, #24]
 8005f38:	e002      	b.n	8005f40 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f40:	69bb      	ldr	r3, [r7, #24]
	}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3720      	adds	r7, #32
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b088      	sub	sp, #32
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	607a      	str	r2, [r7, #4]
 8005f56:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	461a      	mov	r2, r3
 8005f62:	21a5      	movs	r1, #165	; 0xa5
 8005f64:	f001 f8d4 	bl	8007110 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f72:	3b01      	subs	r3, #1
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	f023 0307 	bic.w	r3, r3, #7
 8005f80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f82:	69bb      	ldr	r3, [r7, #24]
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00a      	beq.n	8005fa2 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	617b      	str	r3, [r7, #20]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d01f      	beq.n	8005fe8 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fa8:	2300      	movs	r3, #0
 8005faa:	61fb      	str	r3, [r7, #28]
 8005fac:	e012      	b.n	8005fd4 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	7819      	ldrb	r1, [r3, #0]
 8005fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	3334      	adds	r3, #52	; 0x34
 8005fbe:	460a      	mov	r2, r1
 8005fc0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d006      	beq.n	8005fdc <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	61fb      	str	r3, [r7, #28]
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	2b0f      	cmp	r3, #15
 8005fd8:	d9e9      	bls.n	8005fae <prvInitialiseNewTask+0x64>
 8005fda:	e000      	b.n	8005fde <prvInitialiseNewTask+0x94>
			{
				break;
 8005fdc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fe6:	e003      	b.n	8005ff0 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff2:	2b06      	cmp	r3, #6
 8005ff4:	d901      	bls.n	8005ffa <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ff6:	2306      	movs	r3, #6
 8005ff8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ffe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006004:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	2200      	movs	r2, #0
 800600a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600e:	3304      	adds	r3, #4
 8006010:	4618      	mov	r0, r3
 8006012:	f7ff fe64 	bl	8005cde <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	3318      	adds	r3, #24
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff fe5f 	bl	8005cde <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006024:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006028:	f1c3 0207 	rsb	r2, r3, #7
 800602c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006034:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	2200      	movs	r2, #0
 800603a:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800603c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603e:	2200      	movs	r2, #0
 8006040:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	68f9      	ldr	r1, [r7, #12]
 800604e:	69b8      	ldr	r0, [r7, #24]
 8006050:	f000 fc2c 	bl	80068ac <pxPortInitialiseStack>
 8006054:	4602      	mov	r2, r0
 8006056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006058:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800605a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d002      	beq.n	8006066 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006062:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006066:	bf00      	nop
 8006068:	3720      	adds	r7, #32
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
	...

08006070 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006078:	f000 fd44 	bl	8006b04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800607c:	4b2a      	ldr	r3, [pc, #168]	; (8006128 <prvAddNewTaskToReadyList+0xb8>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3301      	adds	r3, #1
 8006082:	4a29      	ldr	r2, [pc, #164]	; (8006128 <prvAddNewTaskToReadyList+0xb8>)
 8006084:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006086:	4b29      	ldr	r3, [pc, #164]	; (800612c <prvAddNewTaskToReadyList+0xbc>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d109      	bne.n	80060a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800608e:	4a27      	ldr	r2, [pc, #156]	; (800612c <prvAddNewTaskToReadyList+0xbc>)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006094:	4b24      	ldr	r3, [pc, #144]	; (8006128 <prvAddNewTaskToReadyList+0xb8>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d110      	bne.n	80060be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800609c:	f000 fae2 	bl	8006664 <prvInitialiseTaskLists>
 80060a0:	e00d      	b.n	80060be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060a2:	4b23      	ldr	r3, [pc, #140]	; (8006130 <prvAddNewTaskToReadyList+0xc0>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d109      	bne.n	80060be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060aa:	4b20      	ldr	r3, [pc, #128]	; (800612c <prvAddNewTaskToReadyList+0xbc>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d802      	bhi.n	80060be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060b8:	4a1c      	ldr	r2, [pc, #112]	; (800612c <prvAddNewTaskToReadyList+0xbc>)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060be:	4b1d      	ldr	r3, [pc, #116]	; (8006134 <prvAddNewTaskToReadyList+0xc4>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	4a1b      	ldr	r2, [pc, #108]	; (8006134 <prvAddNewTaskToReadyList+0xc4>)
 80060c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060cc:	2201      	movs	r2, #1
 80060ce:	409a      	lsls	r2, r3
 80060d0:	4b19      	ldr	r3, [pc, #100]	; (8006138 <prvAddNewTaskToReadyList+0xc8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	4a18      	ldr	r2, [pc, #96]	; (8006138 <prvAddNewTaskToReadyList+0xc8>)
 80060d8:	6013      	str	r3, [r2, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060de:	4613      	mov	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	4a15      	ldr	r2, [pc, #84]	; (800613c <prvAddNewTaskToReadyList+0xcc>)
 80060e8:	441a      	add	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	3304      	adds	r3, #4
 80060ee:	4619      	mov	r1, r3
 80060f0:	4610      	mov	r0, r2
 80060f2:	f7ff fe01 	bl	8005cf8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060f6:	f000 fd35 	bl	8006b64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060fa:	4b0d      	ldr	r3, [pc, #52]	; (8006130 <prvAddNewTaskToReadyList+0xc0>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00e      	beq.n	8006120 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006102:	4b0a      	ldr	r3, [pc, #40]	; (800612c <prvAddNewTaskToReadyList+0xbc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610c:	429a      	cmp	r2, r3
 800610e:	d207      	bcs.n	8006120 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006110:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <prvAddNewTaskToReadyList+0xd0>)
 8006112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006120:	bf00      	nop
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	20000424 	.word	0x20000424
 800612c:	20000324 	.word	0x20000324
 8006130:	20000430 	.word	0x20000430
 8006134:	20000440 	.word	0x20000440
 8006138:	2000042c 	.word	0x2000042c
 800613c:	20000328 	.word	0x20000328
 8006140:	e000ed04 	.word	0xe000ed04

08006144 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d017      	beq.n	8006186 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006156:	4b13      	ldr	r3, [pc, #76]	; (80061a4 <vTaskDelay+0x60>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d00a      	beq.n	8006174 <vTaskDelay+0x30>
	__asm volatile
 800615e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006162:	f383 8811 	msr	BASEPRI, r3
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	60bb      	str	r3, [r7, #8]
}
 8006170:	bf00      	nop
 8006172:	e7fe      	b.n	8006172 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006174:	f000 f87a 	bl	800626c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006178:	2100      	movs	r1, #0
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 fb30 	bl	80067e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006180:	f000 f882 	bl	8006288 <xTaskResumeAll>
 8006184:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d107      	bne.n	800619c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800618c:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <vTaskDelay+0x64>)
 800618e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800619c:	bf00      	nop
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	2000044c 	.word	0x2000044c
 80061a8:	e000ed04 	.word	0xe000ed04

080061ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08a      	sub	sp, #40	; 0x28
 80061b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061ba:	463a      	mov	r2, r7
 80061bc:	1d39      	adds	r1, r7, #4
 80061be:	f107 0308 	add.w	r3, r7, #8
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fa fb26 	bl	8000814 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061c8:	6839      	ldr	r1, [r7, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	9202      	str	r2, [sp, #8]
 80061d0:	9301      	str	r3, [sp, #4]
 80061d2:	2300      	movs	r3, #0
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	2300      	movs	r3, #0
 80061d8:	460a      	mov	r2, r1
 80061da:	491e      	ldr	r1, [pc, #120]	; (8006254 <vTaskStartScheduler+0xa8>)
 80061dc:	481e      	ldr	r0, [pc, #120]	; (8006258 <vTaskStartScheduler+0xac>)
 80061de:	f7ff fe12 	bl	8005e06 <xTaskCreateStatic>
 80061e2:	4603      	mov	r3, r0
 80061e4:	4a1d      	ldr	r2, [pc, #116]	; (800625c <vTaskStartScheduler+0xb0>)
 80061e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061e8:	4b1c      	ldr	r3, [pc, #112]	; (800625c <vTaskStartScheduler+0xb0>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061f0:	2301      	movs	r3, #1
 80061f2:	617b      	str	r3, [r7, #20]
 80061f4:	e001      	b.n	80061fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061f6:	2300      	movs	r3, #0
 80061f8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d116      	bne.n	800622e <vTaskStartScheduler+0x82>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	613b      	str	r3, [r7, #16]
}
 8006212:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006214:	4b12      	ldr	r3, [pc, #72]	; (8006260 <vTaskStartScheduler+0xb4>)
 8006216:	f04f 32ff 	mov.w	r2, #4294967295
 800621a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800621c:	4b11      	ldr	r3, [pc, #68]	; (8006264 <vTaskStartScheduler+0xb8>)
 800621e:	2201      	movs	r2, #1
 8006220:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006222:	4b11      	ldr	r3, [pc, #68]	; (8006268 <vTaskStartScheduler+0xbc>)
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006228:	f000 fbca 	bl	80069c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800622c:	e00e      	b.n	800624c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006234:	d10a      	bne.n	800624c <vTaskStartScheduler+0xa0>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	60fb      	str	r3, [r7, #12]
}
 8006248:	bf00      	nop
 800624a:	e7fe      	b.n	800624a <vTaskStartScheduler+0x9e>
}
 800624c:	bf00      	nop
 800624e:	3718      	adds	r7, #24
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	08007188 	.word	0x08007188
 8006258:	08006631 	.word	0x08006631
 800625c:	20000448 	.word	0x20000448
 8006260:	20000444 	.word	0x20000444
 8006264:	20000430 	.word	0x20000430
 8006268:	20000428 	.word	0x20000428

0800626c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006270:	4b04      	ldr	r3, [pc, #16]	; (8006284 <vTaskSuspendAll+0x18>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3301      	adds	r3, #1
 8006276:	4a03      	ldr	r2, [pc, #12]	; (8006284 <vTaskSuspendAll+0x18>)
 8006278:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800627a:	bf00      	nop
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	2000044c 	.word	0x2000044c

08006288 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006292:	2300      	movs	r3, #0
 8006294:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006296:	4b41      	ldr	r3, [pc, #260]	; (800639c <xTaskResumeAll+0x114>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d10a      	bne.n	80062b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	603b      	str	r3, [r7, #0]
}
 80062b0:	bf00      	nop
 80062b2:	e7fe      	b.n	80062b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062b4:	f000 fc26 	bl	8006b04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062b8:	4b38      	ldr	r3, [pc, #224]	; (800639c <xTaskResumeAll+0x114>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3b01      	subs	r3, #1
 80062be:	4a37      	ldr	r2, [pc, #220]	; (800639c <xTaskResumeAll+0x114>)
 80062c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062c2:	4b36      	ldr	r3, [pc, #216]	; (800639c <xTaskResumeAll+0x114>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d161      	bne.n	800638e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062ca:	4b35      	ldr	r3, [pc, #212]	; (80063a0 <xTaskResumeAll+0x118>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d05d      	beq.n	800638e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062d2:	e02e      	b.n	8006332 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062d4:	4b33      	ldr	r3, [pc, #204]	; (80063a4 <xTaskResumeAll+0x11c>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3318      	adds	r3, #24
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7ff fd66 	bl	8005db2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3304      	adds	r3, #4
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff fd61 	bl	8005db2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	2201      	movs	r2, #1
 80062f6:	409a      	lsls	r2, r3
 80062f8:	4b2b      	ldr	r3, [pc, #172]	; (80063a8 <xTaskResumeAll+0x120>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	4a2a      	ldr	r2, [pc, #168]	; (80063a8 <xTaskResumeAll+0x120>)
 8006300:	6013      	str	r3, [r2, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006306:	4613      	mov	r3, r2
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4a27      	ldr	r2, [pc, #156]	; (80063ac <xTaskResumeAll+0x124>)
 8006310:	441a      	add	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3304      	adds	r3, #4
 8006316:	4619      	mov	r1, r3
 8006318:	4610      	mov	r0, r2
 800631a:	f7ff fced 	bl	8005cf8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006322:	4b23      	ldr	r3, [pc, #140]	; (80063b0 <xTaskResumeAll+0x128>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	429a      	cmp	r2, r3
 800632a:	d302      	bcc.n	8006332 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800632c:	4b21      	ldr	r3, [pc, #132]	; (80063b4 <xTaskResumeAll+0x12c>)
 800632e:	2201      	movs	r2, #1
 8006330:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006332:	4b1c      	ldr	r3, [pc, #112]	; (80063a4 <xTaskResumeAll+0x11c>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1cc      	bne.n	80062d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006340:	f000 fa2e 	bl	80067a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006344:	4b1c      	ldr	r3, [pc, #112]	; (80063b8 <xTaskResumeAll+0x130>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d010      	beq.n	8006372 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006350:	f000 f836 	bl	80063c0 <xTaskIncrementTick>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800635a:	4b16      	ldr	r3, [pc, #88]	; (80063b4 <xTaskResumeAll+0x12c>)
 800635c:	2201      	movs	r2, #1
 800635e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	3b01      	subs	r3, #1
 8006364:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1f1      	bne.n	8006350 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800636c:	4b12      	ldr	r3, [pc, #72]	; (80063b8 <xTaskResumeAll+0x130>)
 800636e:	2200      	movs	r2, #0
 8006370:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006372:	4b10      	ldr	r3, [pc, #64]	; (80063b4 <xTaskResumeAll+0x12c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d009      	beq.n	800638e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800637a:	2301      	movs	r3, #1
 800637c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800637e:	4b0f      	ldr	r3, [pc, #60]	; (80063bc <xTaskResumeAll+0x134>)
 8006380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800638e:	f000 fbe9 	bl	8006b64 <vPortExitCritical>

	return xAlreadyYielded;
 8006392:	68bb      	ldr	r3, [r7, #8]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	2000044c 	.word	0x2000044c
 80063a0:	20000424 	.word	0x20000424
 80063a4:	200003e4 	.word	0x200003e4
 80063a8:	2000042c 	.word	0x2000042c
 80063ac:	20000328 	.word	0x20000328
 80063b0:	20000324 	.word	0x20000324
 80063b4:	20000438 	.word	0x20000438
 80063b8:	20000434 	.word	0x20000434
 80063bc:	e000ed04 	.word	0xe000ed04

080063c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063c6:	2300      	movs	r3, #0
 80063c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ca:	4b4e      	ldr	r3, [pc, #312]	; (8006504 <xTaskIncrementTick+0x144>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f040 808e 	bne.w	80064f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063d4:	4b4c      	ldr	r3, [pc, #304]	; (8006508 <xTaskIncrementTick+0x148>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3301      	adds	r3, #1
 80063da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063dc:	4a4a      	ldr	r2, [pc, #296]	; (8006508 <xTaskIncrementTick+0x148>)
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d120      	bne.n	800642a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80063e8:	4b48      	ldr	r3, [pc, #288]	; (800650c <xTaskIncrementTick+0x14c>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <xTaskIncrementTick+0x48>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	603b      	str	r3, [r7, #0]
}
 8006404:	bf00      	nop
 8006406:	e7fe      	b.n	8006406 <xTaskIncrementTick+0x46>
 8006408:	4b40      	ldr	r3, [pc, #256]	; (800650c <xTaskIncrementTick+0x14c>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	4b40      	ldr	r3, [pc, #256]	; (8006510 <xTaskIncrementTick+0x150>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a3e      	ldr	r2, [pc, #248]	; (800650c <xTaskIncrementTick+0x14c>)
 8006414:	6013      	str	r3, [r2, #0]
 8006416:	4a3e      	ldr	r2, [pc, #248]	; (8006510 <xTaskIncrementTick+0x150>)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6013      	str	r3, [r2, #0]
 800641c:	4b3d      	ldr	r3, [pc, #244]	; (8006514 <xTaskIncrementTick+0x154>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3301      	adds	r3, #1
 8006422:	4a3c      	ldr	r2, [pc, #240]	; (8006514 <xTaskIncrementTick+0x154>)
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	f000 f9bb 	bl	80067a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800642a:	4b3b      	ldr	r3, [pc, #236]	; (8006518 <xTaskIncrementTick+0x158>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	429a      	cmp	r2, r3
 8006432:	d348      	bcc.n	80064c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006434:	4b35      	ldr	r3, [pc, #212]	; (800650c <xTaskIncrementTick+0x14c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d104      	bne.n	8006448 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800643e:	4b36      	ldr	r3, [pc, #216]	; (8006518 <xTaskIncrementTick+0x158>)
 8006440:	f04f 32ff 	mov.w	r2, #4294967295
 8006444:	601a      	str	r2, [r3, #0]
					break;
 8006446:	e03e      	b.n	80064c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006448:	4b30      	ldr	r3, [pc, #192]	; (800650c <xTaskIncrementTick+0x14c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	429a      	cmp	r2, r3
 800645e:	d203      	bcs.n	8006468 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006460:	4a2d      	ldr	r2, [pc, #180]	; (8006518 <xTaskIncrementTick+0x158>)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006466:	e02e      	b.n	80064c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	3304      	adds	r3, #4
 800646c:	4618      	mov	r0, r3
 800646e:	f7ff fca0 	bl	8005db2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006476:	2b00      	cmp	r3, #0
 8006478:	d004      	beq.n	8006484 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	3318      	adds	r3, #24
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff fc97 	bl	8005db2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	2201      	movs	r2, #1
 800648a:	409a      	lsls	r2, r3
 800648c:	4b23      	ldr	r3, [pc, #140]	; (800651c <xTaskIncrementTick+0x15c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4313      	orrs	r3, r2
 8006492:	4a22      	ldr	r2, [pc, #136]	; (800651c <xTaskIncrementTick+0x15c>)
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649a:	4613      	mov	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4a1f      	ldr	r2, [pc, #124]	; (8006520 <xTaskIncrementTick+0x160>)
 80064a4:	441a      	add	r2, r3
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	3304      	adds	r3, #4
 80064aa:	4619      	mov	r1, r3
 80064ac:	4610      	mov	r0, r2
 80064ae:	f7ff fc23 	bl	8005cf8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b6:	4b1b      	ldr	r3, [pc, #108]	; (8006524 <xTaskIncrementTick+0x164>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064bc:	429a      	cmp	r2, r3
 80064be:	d3b9      	bcc.n	8006434 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80064c0:	2301      	movs	r3, #1
 80064c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064c4:	e7b6      	b.n	8006434 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064c6:	4b17      	ldr	r3, [pc, #92]	; (8006524 <xTaskIncrementTick+0x164>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064cc:	4914      	ldr	r1, [pc, #80]	; (8006520 <xTaskIncrementTick+0x160>)
 80064ce:	4613      	mov	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	440b      	add	r3, r1
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d901      	bls.n	80064e2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80064de:	2301      	movs	r3, #1
 80064e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80064e2:	4b11      	ldr	r3, [pc, #68]	; (8006528 <xTaskIncrementTick+0x168>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d007      	beq.n	80064fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80064ea:	2301      	movs	r3, #1
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	e004      	b.n	80064fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80064f0:	4b0e      	ldr	r3, [pc, #56]	; (800652c <xTaskIncrementTick+0x16c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3301      	adds	r3, #1
 80064f6:	4a0d      	ldr	r2, [pc, #52]	; (800652c <xTaskIncrementTick+0x16c>)
 80064f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80064fa:	697b      	ldr	r3, [r7, #20]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	2000044c 	.word	0x2000044c
 8006508:	20000428 	.word	0x20000428
 800650c:	200003dc 	.word	0x200003dc
 8006510:	200003e0 	.word	0x200003e0
 8006514:	2000043c 	.word	0x2000043c
 8006518:	20000444 	.word	0x20000444
 800651c:	2000042c 	.word	0x2000042c
 8006520:	20000328 	.word	0x20000328
 8006524:	20000324 	.word	0x20000324
 8006528:	20000438 	.word	0x20000438
 800652c:	20000434 	.word	0x20000434

08006530 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006536:	4b39      	ldr	r3, [pc, #228]	; (800661c <vTaskSwitchContext+0xec>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800653e:	4b38      	ldr	r3, [pc, #224]	; (8006620 <vTaskSwitchContext+0xf0>)
 8006540:	2201      	movs	r2, #1
 8006542:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006544:	e066      	b.n	8006614 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 8006546:	4b36      	ldr	r3, [pc, #216]	; (8006620 <vTaskSwitchContext+0xf0>)
 8006548:	2200      	movs	r2, #0
 800654a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800654c:	4b35      	ldr	r3, [pc, #212]	; (8006624 <vTaskSwitchContext+0xf4>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8006558:	61bb      	str	r3, [r7, #24]
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	429a      	cmp	r2, r3
 8006562:	d111      	bne.n	8006588 <vTaskSwitchContext+0x58>
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	3304      	adds	r3, #4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	429a      	cmp	r2, r3
 800656e:	d10b      	bne.n	8006588 <vTaskSwitchContext+0x58>
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	3308      	adds	r3, #8
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	69ba      	ldr	r2, [r7, #24]
 8006578:	429a      	cmp	r2, r3
 800657a:	d105      	bne.n	8006588 <vTaskSwitchContext+0x58>
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	330c      	adds	r3, #12
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69ba      	ldr	r2, [r7, #24]
 8006584:	429a      	cmp	r2, r3
 8006586:	d008      	beq.n	800659a <vTaskSwitchContext+0x6a>
 8006588:	4b26      	ldr	r3, [pc, #152]	; (8006624 <vTaskSwitchContext+0xf4>)
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	4b25      	ldr	r3, [pc, #148]	; (8006624 <vTaskSwitchContext+0xf4>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3334      	adds	r3, #52	; 0x34
 8006592:	4619      	mov	r1, r3
 8006594:	4610      	mov	r0, r2
 8006596:	f7fa f92a 	bl	80007ee <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800659a:	4b23      	ldr	r3, [pc, #140]	; (8006628 <vTaskSwitchContext+0xf8>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	fab3 f383 	clz	r3, r3
 80065a6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80065a8:	7afb      	ldrb	r3, [r7, #11]
 80065aa:	f1c3 031f 	rsb	r3, r3, #31
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	491e      	ldr	r1, [pc, #120]	; (800662c <vTaskSwitchContext+0xfc>)
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	4613      	mov	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	440b      	add	r3, r1
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10a      	bne.n	80065da <vTaskSwitchContext+0xaa>
	__asm volatile
 80065c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	607b      	str	r3, [r7, #4]
}
 80065d6:	bf00      	nop
 80065d8:	e7fe      	b.n	80065d8 <vTaskSwitchContext+0xa8>
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	4613      	mov	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4a11      	ldr	r2, [pc, #68]	; (800662c <vTaskSwitchContext+0xfc>)
 80065e6:	4413      	add	r3, r2
 80065e8:	613b      	str	r3, [r7, #16]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	605a      	str	r2, [r3, #4]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	3308      	adds	r3, #8
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d104      	bne.n	800660a <vTaskSwitchContext+0xda>
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	605a      	str	r2, [r3, #4]
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	4a04      	ldr	r2, [pc, #16]	; (8006624 <vTaskSwitchContext+0xf4>)
 8006612:	6013      	str	r3, [r2, #0]
}
 8006614:	bf00      	nop
 8006616:	3720      	adds	r7, #32
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	2000044c 	.word	0x2000044c
 8006620:	20000438 	.word	0x20000438
 8006624:	20000324 	.word	0x20000324
 8006628:	2000042c 	.word	0x2000042c
 800662c:	20000328 	.word	0x20000328

08006630 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006638:	f000 f854 	bl	80066e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800663c:	4b07      	ldr	r3, [pc, #28]	; (800665c <prvIdleTask+0x2c>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b01      	cmp	r3, #1
 8006642:	d907      	bls.n	8006654 <prvIdleTask+0x24>
			{
				taskYIELD();
 8006644:	4b06      	ldr	r3, [pc, #24]	; (8006660 <prvIdleTask+0x30>)
 8006646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8006654:	f7fa f8c4 	bl	80007e0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8006658:	e7ee      	b.n	8006638 <prvIdleTask+0x8>
 800665a:	bf00      	nop
 800665c:	20000328 	.word	0x20000328
 8006660:	e000ed04 	.word	0xe000ed04

08006664 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800666a:	2300      	movs	r3, #0
 800666c:	607b      	str	r3, [r7, #4]
 800666e:	e00c      	b.n	800668a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	4613      	mov	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4a12      	ldr	r2, [pc, #72]	; (80066c4 <prvInitialiseTaskLists+0x60>)
 800667c:	4413      	add	r3, r2
 800667e:	4618      	mov	r0, r3
 8006680:	f7ff fb0d 	bl	8005c9e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	3301      	adds	r3, #1
 8006688:	607b      	str	r3, [r7, #4]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2b06      	cmp	r3, #6
 800668e:	d9ef      	bls.n	8006670 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006690:	480d      	ldr	r0, [pc, #52]	; (80066c8 <prvInitialiseTaskLists+0x64>)
 8006692:	f7ff fb04 	bl	8005c9e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006696:	480d      	ldr	r0, [pc, #52]	; (80066cc <prvInitialiseTaskLists+0x68>)
 8006698:	f7ff fb01 	bl	8005c9e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800669c:	480c      	ldr	r0, [pc, #48]	; (80066d0 <prvInitialiseTaskLists+0x6c>)
 800669e:	f7ff fafe 	bl	8005c9e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066a2:	480c      	ldr	r0, [pc, #48]	; (80066d4 <prvInitialiseTaskLists+0x70>)
 80066a4:	f7ff fafb 	bl	8005c9e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066a8:	480b      	ldr	r0, [pc, #44]	; (80066d8 <prvInitialiseTaskLists+0x74>)
 80066aa:	f7ff faf8 	bl	8005c9e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80066ae:	4b0b      	ldr	r3, [pc, #44]	; (80066dc <prvInitialiseTaskLists+0x78>)
 80066b0:	4a05      	ldr	r2, [pc, #20]	; (80066c8 <prvInitialiseTaskLists+0x64>)
 80066b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066b4:	4b0a      	ldr	r3, [pc, #40]	; (80066e0 <prvInitialiseTaskLists+0x7c>)
 80066b6:	4a05      	ldr	r2, [pc, #20]	; (80066cc <prvInitialiseTaskLists+0x68>)
 80066b8:	601a      	str	r2, [r3, #0]
}
 80066ba:	bf00      	nop
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20000328 	.word	0x20000328
 80066c8:	200003b4 	.word	0x200003b4
 80066cc:	200003c8 	.word	0x200003c8
 80066d0:	200003e4 	.word	0x200003e4
 80066d4:	200003f8 	.word	0x200003f8
 80066d8:	20000410 	.word	0x20000410
 80066dc:	200003dc 	.word	0x200003dc
 80066e0:	200003e0 	.word	0x200003e0

080066e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066ea:	e019      	b.n	8006720 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80066ec:	f000 fa0a 	bl	8006b04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066f0:	4b10      	ldr	r3, [pc, #64]	; (8006734 <prvCheckTasksWaitingTermination+0x50>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3304      	adds	r3, #4
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff fb58 	bl	8005db2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006702:	4b0d      	ldr	r3, [pc, #52]	; (8006738 <prvCheckTasksWaitingTermination+0x54>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3b01      	subs	r3, #1
 8006708:	4a0b      	ldr	r2, [pc, #44]	; (8006738 <prvCheckTasksWaitingTermination+0x54>)
 800670a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <prvCheckTasksWaitingTermination+0x58>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3b01      	subs	r3, #1
 8006712:	4a0a      	ldr	r2, [pc, #40]	; (800673c <prvCheckTasksWaitingTermination+0x58>)
 8006714:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006716:	f000 fa25 	bl	8006b64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f810 	bl	8006740 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006720:	4b06      	ldr	r3, [pc, #24]	; (800673c <prvCheckTasksWaitingTermination+0x58>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1e1      	bne.n	80066ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006728:	bf00      	nop
 800672a:	bf00      	nop
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	200003f8 	.word	0x200003f8
 8006738:	20000424 	.word	0x20000424
 800673c:	2000040c 	.word	0x2000040c

08006740 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800674e:	2b00      	cmp	r3, #0
 8006750:	d108      	bne.n	8006764 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006756:	4618      	mov	r0, r3
 8006758:	f000 fb86 	bl	8006e68 <vPortFree>
				vPortFree( pxTCB );
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fb83 	bl	8006e68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006762:	e018      	b.n	8006796 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800676a:	2b01      	cmp	r3, #1
 800676c:	d103      	bne.n	8006776 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fb7a 	bl	8006e68 <vPortFree>
	}
 8006774:	e00f      	b.n	8006796 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800677c:	2b02      	cmp	r3, #2
 800677e:	d00a      	beq.n	8006796 <prvDeleteTCB+0x56>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	60fb      	str	r3, [r7, #12]
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <prvDeleteTCB+0x54>
	}
 8006796:	bf00      	nop
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067a6:	4b0c      	ldr	r3, [pc, #48]	; (80067d8 <prvResetNextTaskUnblockTime+0x38>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d104      	bne.n	80067ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067b0:	4b0a      	ldr	r3, [pc, #40]	; (80067dc <prvResetNextTaskUnblockTime+0x3c>)
 80067b2:	f04f 32ff 	mov.w	r2, #4294967295
 80067b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067b8:	e008      	b.n	80067cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067ba:	4b07      	ldr	r3, [pc, #28]	; (80067d8 <prvResetNextTaskUnblockTime+0x38>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	4a04      	ldr	r2, [pc, #16]	; (80067dc <prvResetNextTaskUnblockTime+0x3c>)
 80067ca:	6013      	str	r3, [r2, #0]
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	200003dc 	.word	0x200003dc
 80067dc:	20000444 	.word	0x20000444

080067e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067ea:	4b29      	ldr	r3, [pc, #164]	; (8006890 <prvAddCurrentTaskToDelayedList+0xb0>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067f0:	4b28      	ldr	r3, [pc, #160]	; (8006894 <prvAddCurrentTaskToDelayedList+0xb4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	3304      	adds	r3, #4
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff fadb 	bl	8005db2 <uxListRemove>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10b      	bne.n	800681a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006802:	4b24      	ldr	r3, [pc, #144]	; (8006894 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006808:	2201      	movs	r2, #1
 800680a:	fa02 f303 	lsl.w	r3, r2, r3
 800680e:	43da      	mvns	r2, r3
 8006810:	4b21      	ldr	r3, [pc, #132]	; (8006898 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4013      	ands	r3, r2
 8006816:	4a20      	ldr	r2, [pc, #128]	; (8006898 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006818:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006820:	d10a      	bne.n	8006838 <prvAddCurrentTaskToDelayedList+0x58>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d007      	beq.n	8006838 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006828:	4b1a      	ldr	r3, [pc, #104]	; (8006894 <prvAddCurrentTaskToDelayedList+0xb4>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	3304      	adds	r3, #4
 800682e:	4619      	mov	r1, r3
 8006830:	481a      	ldr	r0, [pc, #104]	; (800689c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006832:	f7ff fa61 	bl	8005cf8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006836:	e026      	b.n	8006886 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4413      	add	r3, r2
 800683e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006840:	4b14      	ldr	r3, [pc, #80]	; (8006894 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	429a      	cmp	r2, r3
 800684e:	d209      	bcs.n	8006864 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006850:	4b13      	ldr	r3, [pc, #76]	; (80068a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	4b0f      	ldr	r3, [pc, #60]	; (8006894 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	3304      	adds	r3, #4
 800685a:	4619      	mov	r1, r3
 800685c:	4610      	mov	r0, r2
 800685e:	f7ff fa6f 	bl	8005d40 <vListInsert>
}
 8006862:	e010      	b.n	8006886 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006864:	4b0f      	ldr	r3, [pc, #60]	; (80068a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	4b0a      	ldr	r3, [pc, #40]	; (8006894 <prvAddCurrentTaskToDelayedList+0xb4>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3304      	adds	r3, #4
 800686e:	4619      	mov	r1, r3
 8006870:	4610      	mov	r0, r2
 8006872:	f7ff fa65 	bl	8005d40 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006876:	4b0c      	ldr	r3, [pc, #48]	; (80068a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68ba      	ldr	r2, [r7, #8]
 800687c:	429a      	cmp	r2, r3
 800687e:	d202      	bcs.n	8006886 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006880:	4a09      	ldr	r2, [pc, #36]	; (80068a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	6013      	str	r3, [r2, #0]
}
 8006886:	bf00      	nop
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	20000428 	.word	0x20000428
 8006894:	20000324 	.word	0x20000324
 8006898:	2000042c 	.word	0x2000042c
 800689c:	20000410 	.word	0x20000410
 80068a0:	200003e0 	.word	0x200003e0
 80068a4:	200003dc 	.word	0x200003dc
 80068a8:	20000444 	.word	0x20000444

080068ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3b04      	subs	r3, #4
 80068bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80068c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	3b04      	subs	r3, #4
 80068ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f023 0201 	bic.w	r2, r3, #1
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3b04      	subs	r3, #4
 80068da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068dc:	4a0c      	ldr	r2, [pc, #48]	; (8006910 <pxPortInitialiseStack+0x64>)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3b14      	subs	r3, #20
 80068e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3b04      	subs	r3, #4
 80068f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f06f 0202 	mvn.w	r2, #2
 80068fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	3b20      	subs	r3, #32
 8006900:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006902:	68fb      	ldr	r3, [r7, #12]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	08006915 	.word	0x08006915

08006914 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800691e:	4b12      	ldr	r3, [pc, #72]	; (8006968 <prvTaskExitError+0x54>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006926:	d00a      	beq.n	800693e <prvTaskExitError+0x2a>
	__asm volatile
 8006928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	60fb      	str	r3, [r7, #12]
}
 800693a:	bf00      	nop
 800693c:	e7fe      	b.n	800693c <prvTaskExitError+0x28>
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	60bb      	str	r3, [r7, #8]
}
 8006950:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006952:	bf00      	nop
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d0fc      	beq.n	8006954 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800695a:	bf00      	nop
 800695c:	bf00      	nop
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	20000048 	.word	0x20000048
 800696c:	00000000 	.word	0x00000000

08006970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006970:	4b07      	ldr	r3, [pc, #28]	; (8006990 <pxCurrentTCBConst2>)
 8006972:	6819      	ldr	r1, [r3, #0]
 8006974:	6808      	ldr	r0, [r1, #0]
 8006976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697a:	f380 8809 	msr	PSP, r0
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f04f 0000 	mov.w	r0, #0
 8006986:	f380 8811 	msr	BASEPRI, r0
 800698a:	4770      	bx	lr
 800698c:	f3af 8000 	nop.w

08006990 <pxCurrentTCBConst2>:
 8006990:	20000324 	.word	0x20000324
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop

08006998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006998:	4808      	ldr	r0, [pc, #32]	; (80069bc <prvPortStartFirstTask+0x24>)
 800699a:	6800      	ldr	r0, [r0, #0]
 800699c:	6800      	ldr	r0, [r0, #0]
 800699e:	f380 8808 	msr	MSP, r0
 80069a2:	f04f 0000 	mov.w	r0, #0
 80069a6:	f380 8814 	msr	CONTROL, r0
 80069aa:	b662      	cpsie	i
 80069ac:	b661      	cpsie	f
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	df00      	svc	0
 80069b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069ba:	bf00      	nop
 80069bc:	e000ed08 	.word	0xe000ed08

080069c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b086      	sub	sp, #24
 80069c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80069c6:	4b46      	ldr	r3, [pc, #280]	; (8006ae0 <xPortStartScheduler+0x120>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a46      	ldr	r2, [pc, #280]	; (8006ae4 <xPortStartScheduler+0x124>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d10a      	bne.n	80069e6 <xPortStartScheduler+0x26>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	613b      	str	r3, [r7, #16]
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80069e6:	4b3e      	ldr	r3, [pc, #248]	; (8006ae0 <xPortStartScheduler+0x120>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a3f      	ldr	r2, [pc, #252]	; (8006ae8 <xPortStartScheduler+0x128>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d10a      	bne.n	8006a06 <xPortStartScheduler+0x46>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	60fb      	str	r3, [r7, #12]
}
 8006a02:	bf00      	nop
 8006a04:	e7fe      	b.n	8006a04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a06:	4b39      	ldr	r3, [pc, #228]	; (8006aec <xPortStartScheduler+0x12c>)
 8006a08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	22ff      	movs	r2, #255	; 0xff
 8006a16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a20:	78fb      	ldrb	r3, [r7, #3]
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	4b31      	ldr	r3, [pc, #196]	; (8006af0 <xPortStartScheduler+0x130>)
 8006a2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a2e:	4b31      	ldr	r3, [pc, #196]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a30:	2207      	movs	r2, #7
 8006a32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a34:	e009      	b.n	8006a4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006a36:	4b2f      	ldr	r3, [pc, #188]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	4a2d      	ldr	r2, [pc, #180]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a40:	78fb      	ldrb	r3, [r7, #3]
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a4a:	78fb      	ldrb	r3, [r7, #3]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a52:	2b80      	cmp	r3, #128	; 0x80
 8006a54:	d0ef      	beq.n	8006a36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a56:	4b27      	ldr	r3, [pc, #156]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f1c3 0307 	rsb	r3, r3, #7
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d00a      	beq.n	8006a78 <xPortStartScheduler+0xb8>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	60bb      	str	r3, [r7, #8]
}
 8006a74:	bf00      	nop
 8006a76:	e7fe      	b.n	8006a76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a78:	4b1e      	ldr	r3, [pc, #120]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	021b      	lsls	r3, r3, #8
 8006a7e:	4a1d      	ldr	r2, [pc, #116]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a82:	4b1c      	ldr	r3, [pc, #112]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a8a:	4a1a      	ldr	r2, [pc, #104]	; (8006af4 <xPortStartScheduler+0x134>)
 8006a8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a96:	4b18      	ldr	r3, [pc, #96]	; (8006af8 <xPortStartScheduler+0x138>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a17      	ldr	r2, [pc, #92]	; (8006af8 <xPortStartScheduler+0x138>)
 8006a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006aa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006aa2:	4b15      	ldr	r3, [pc, #84]	; (8006af8 <xPortStartScheduler+0x138>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a14      	ldr	r2, [pc, #80]	; (8006af8 <xPortStartScheduler+0x138>)
 8006aa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006aac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006aae:	f000 f8dd 	bl	8006c6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ab2:	4b12      	ldr	r3, [pc, #72]	; (8006afc <xPortStartScheduler+0x13c>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ab8:	f000 f8fc 	bl	8006cb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006abc:	4b10      	ldr	r3, [pc, #64]	; (8006b00 <xPortStartScheduler+0x140>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a0f      	ldr	r2, [pc, #60]	; (8006b00 <xPortStartScheduler+0x140>)
 8006ac2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006ac6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ac8:	f7ff ff66 	bl	8006998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006acc:	f7ff fd30 	bl	8006530 <vTaskSwitchContext>
	prvTaskExitError();
 8006ad0:	f7ff ff20 	bl	8006914 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	e000ed00 	.word	0xe000ed00
 8006ae4:	410fc271 	.word	0x410fc271
 8006ae8:	410fc270 	.word	0x410fc270
 8006aec:	e000e400 	.word	0xe000e400
 8006af0:	20000450 	.word	0x20000450
 8006af4:	20000454 	.word	0x20000454
 8006af8:	e000ed20 	.word	0xe000ed20
 8006afc:	20000048 	.word	0x20000048
 8006b00:	e000ef34 	.word	0xe000ef34

08006b04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
	__asm volatile
 8006b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0e:	f383 8811 	msr	BASEPRI, r3
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	f3bf 8f4f 	dsb	sy
 8006b1a:	607b      	str	r3, [r7, #4]
}
 8006b1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b1e:	4b0f      	ldr	r3, [pc, #60]	; (8006b5c <vPortEnterCritical+0x58>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3301      	adds	r3, #1
 8006b24:	4a0d      	ldr	r2, [pc, #52]	; (8006b5c <vPortEnterCritical+0x58>)
 8006b26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b28:	4b0c      	ldr	r3, [pc, #48]	; (8006b5c <vPortEnterCritical+0x58>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d10f      	bne.n	8006b50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b30:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <vPortEnterCritical+0x5c>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <vPortEnterCritical+0x4c>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	603b      	str	r3, [r7, #0]
}
 8006b4c:	bf00      	nop
 8006b4e:	e7fe      	b.n	8006b4e <vPortEnterCritical+0x4a>
	}
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	20000048 	.word	0x20000048
 8006b60:	e000ed04 	.word	0xe000ed04

08006b64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b6a:	4b12      	ldr	r3, [pc, #72]	; (8006bb4 <vPortExitCritical+0x50>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10a      	bne.n	8006b88 <vPortExitCritical+0x24>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	607b      	str	r3, [r7, #4]
}
 8006b84:	bf00      	nop
 8006b86:	e7fe      	b.n	8006b86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006b88:	4b0a      	ldr	r3, [pc, #40]	; (8006bb4 <vPortExitCritical+0x50>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	4a09      	ldr	r2, [pc, #36]	; (8006bb4 <vPortExitCritical+0x50>)
 8006b90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b92:	4b08      	ldr	r3, [pc, #32]	; (8006bb4 <vPortExitCritical+0x50>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d105      	bne.n	8006ba6 <vPortExitCritical+0x42>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ba4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	20000048 	.word	0x20000048
	...

08006bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006bc0:	f3ef 8009 	mrs	r0, PSP
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	4b15      	ldr	r3, [pc, #84]	; (8006c20 <pxCurrentTCBConst>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	f01e 0f10 	tst.w	lr, #16
 8006bd0:	bf08      	it	eq
 8006bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bda:	6010      	str	r0, [r2, #0]
 8006bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006be0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006be4:	f380 8811 	msr	BASEPRI, r0
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f7ff fc9e 	bl	8006530 <vTaskSwitchContext>
 8006bf4:	f04f 0000 	mov.w	r0, #0
 8006bf8:	f380 8811 	msr	BASEPRI, r0
 8006bfc:	bc09      	pop	{r0, r3}
 8006bfe:	6819      	ldr	r1, [r3, #0]
 8006c00:	6808      	ldr	r0, [r1, #0]
 8006c02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c06:	f01e 0f10 	tst.w	lr, #16
 8006c0a:	bf08      	it	eq
 8006c0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c10:	f380 8809 	msr	PSP, r0
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	f3af 8000 	nop.w

08006c20 <pxCurrentTCBConst>:
 8006c20:	20000324 	.word	0x20000324
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop

08006c28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	607b      	str	r3, [r7, #4]
}
 8006c40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c42:	f7ff fbbd 	bl	80063c0 <xTaskIncrementTick>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c4c:	4b06      	ldr	r3, [pc, #24]	; (8006c68 <SysTick_Handler+0x40>)
 8006c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	2300      	movs	r3, #0
 8006c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	f383 8811 	msr	BASEPRI, r3
}
 8006c5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	e000ed04 	.word	0xe000ed04

08006c6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c70:	4b0b      	ldr	r3, [pc, #44]	; (8006ca0 <vPortSetupTimerInterrupt+0x34>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c76:	4b0b      	ldr	r3, [pc, #44]	; (8006ca4 <vPortSetupTimerInterrupt+0x38>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ca8 <vPortSetupTimerInterrupt+0x3c>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <vPortSetupTimerInterrupt+0x40>)
 8006c82:	fba2 2303 	umull	r2, r3, r2, r3
 8006c86:	099b      	lsrs	r3, r3, #6
 8006c88:	4a09      	ldr	r2, [pc, #36]	; (8006cb0 <vPortSetupTimerInterrupt+0x44>)
 8006c8a:	3b01      	subs	r3, #1
 8006c8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c8e:	4b04      	ldr	r3, [pc, #16]	; (8006ca0 <vPortSetupTimerInterrupt+0x34>)
 8006c90:	2207      	movs	r2, #7
 8006c92:	601a      	str	r2, [r3, #0]
}
 8006c94:	bf00      	nop
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	e000e010 	.word	0xe000e010
 8006ca4:	e000e018 	.word	0xe000e018
 8006ca8:	20000000 	.word	0x20000000
 8006cac:	10624dd3 	.word	0x10624dd3
 8006cb0:	e000e014 	.word	0xe000e014

08006cb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006cb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006cc4 <vPortEnableVFP+0x10>
 8006cb8:	6801      	ldr	r1, [r0, #0]
 8006cba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006cbe:	6001      	str	r1, [r0, #0]
 8006cc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006cc2:	bf00      	nop
 8006cc4:	e000ed88 	.word	0xe000ed88

08006cc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b08a      	sub	sp, #40	; 0x28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cd4:	f7ff faca 	bl	800626c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006cd8:	4b5d      	ldr	r3, [pc, #372]	; (8006e50 <pvPortMalloc+0x188>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ce0:	f000 f924 	bl	8006f2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ce4:	4b5b      	ldr	r3, [pc, #364]	; (8006e54 <pvPortMalloc+0x18c>)
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4013      	ands	r3, r2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f040 8093 	bne.w	8006e18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d01d      	beq.n	8006d34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006cf8:	2208      	movs	r2, #8
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d014      	beq.n	8006d34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f023 0307 	bic.w	r3, r3, #7
 8006d10:	3308      	adds	r3, #8
 8006d12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f003 0307 	and.w	r3, r3, #7
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d00a      	beq.n	8006d34 <pvPortMalloc+0x6c>
	__asm volatile
 8006d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	617b      	str	r3, [r7, #20]
}
 8006d30:	bf00      	nop
 8006d32:	e7fe      	b.n	8006d32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d06e      	beq.n	8006e18 <pvPortMalloc+0x150>
 8006d3a:	4b47      	ldr	r3, [pc, #284]	; (8006e58 <pvPortMalloc+0x190>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d869      	bhi.n	8006e18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d44:	4b45      	ldr	r3, [pc, #276]	; (8006e5c <pvPortMalloc+0x194>)
 8006d46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d48:	4b44      	ldr	r3, [pc, #272]	; (8006e5c <pvPortMalloc+0x194>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d4e:	e004      	b.n	8006d5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d903      	bls.n	8006d6c <pvPortMalloc+0xa4>
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1f1      	bne.n	8006d50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d6c:	4b38      	ldr	r3, [pc, #224]	; (8006e50 <pvPortMalloc+0x188>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d050      	beq.n	8006e18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2208      	movs	r2, #8
 8006d7c:	4413      	add	r3, r2
 8006d7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	6a3b      	ldr	r3, [r7, #32]
 8006d86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	1ad2      	subs	r2, r2, r3
 8006d90:	2308      	movs	r3, #8
 8006d92:	005b      	lsls	r3, r3, #1
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d91f      	bls.n	8006dd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	f003 0307 	and.w	r3, r3, #7
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00a      	beq.n	8006dc0 <pvPortMalloc+0xf8>
	__asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	613b      	str	r3, [r7, #16]
}
 8006dbc:	bf00      	nop
 8006dbe:	e7fe      	b.n	8006dbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc2:	685a      	ldr	r2, [r3, #4]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	1ad2      	subs	r2, r2, r3
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dd2:	69b8      	ldr	r0, [r7, #24]
 8006dd4:	f000 f90c 	bl	8006ff0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006dd8:	4b1f      	ldr	r3, [pc, #124]	; (8006e58 <pvPortMalloc+0x190>)
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	4a1d      	ldr	r2, [pc, #116]	; (8006e58 <pvPortMalloc+0x190>)
 8006de4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006de6:	4b1c      	ldr	r3, [pc, #112]	; (8006e58 <pvPortMalloc+0x190>)
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	4b1d      	ldr	r3, [pc, #116]	; (8006e60 <pvPortMalloc+0x198>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d203      	bcs.n	8006dfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006df2:	4b19      	ldr	r3, [pc, #100]	; (8006e58 <pvPortMalloc+0x190>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a1a      	ldr	r2, [pc, #104]	; (8006e60 <pvPortMalloc+0x198>)
 8006df8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	4b15      	ldr	r3, [pc, #84]	; (8006e54 <pvPortMalloc+0x18c>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	431a      	orrs	r2, r3
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006e0e:	4b15      	ldr	r3, [pc, #84]	; (8006e64 <pvPortMalloc+0x19c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	3301      	adds	r3, #1
 8006e14:	4a13      	ldr	r2, [pc, #76]	; (8006e64 <pvPortMalloc+0x19c>)
 8006e16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e18:	f7ff fa36 	bl	8006288 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8006e22:	f7f9 fcef 	bl	8000804 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	f003 0307 	and.w	r3, r3, #7
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00a      	beq.n	8006e46 <pvPortMalloc+0x17e>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	60fb      	str	r3, [r7, #12]
}
 8006e42:	bf00      	nop
 8006e44:	e7fe      	b.n	8006e44 <pvPortMalloc+0x17c>
	return pvReturn;
 8006e46:	69fb      	ldr	r3, [r7, #28]
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3728      	adds	r7, #40	; 0x28
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	20008460 	.word	0x20008460
 8006e54:	20008474 	.word	0x20008474
 8006e58:	20008464 	.word	0x20008464
 8006e5c:	20008458 	.word	0x20008458
 8006e60:	20008468 	.word	0x20008468
 8006e64:	2000846c 	.word	0x2000846c

08006e68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d04d      	beq.n	8006f16 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e7a:	2308      	movs	r3, #8
 8006e7c:	425b      	negs	r3, r3
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4413      	add	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	685a      	ldr	r2, [r3, #4]
 8006e8c:	4b24      	ldr	r3, [pc, #144]	; (8006f20 <vPortFree+0xb8>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4013      	ands	r3, r2
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10a      	bne.n	8006eac <vPortFree+0x44>
	__asm volatile
 8006e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9a:	f383 8811 	msr	BASEPRI, r3
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	f3bf 8f4f 	dsb	sy
 8006ea6:	60fb      	str	r3, [r7, #12]
}
 8006ea8:	bf00      	nop
 8006eaa:	e7fe      	b.n	8006eaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d00a      	beq.n	8006eca <vPortFree+0x62>
	__asm volatile
 8006eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb8:	f383 8811 	msr	BASEPRI, r3
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f3bf 8f4f 	dsb	sy
 8006ec4:	60bb      	str	r3, [r7, #8]
}
 8006ec6:	bf00      	nop
 8006ec8:	e7fe      	b.n	8006ec8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	4b14      	ldr	r3, [pc, #80]	; (8006f20 <vPortFree+0xb8>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01e      	beq.n	8006f16 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d11a      	bne.n	8006f16 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	4b0e      	ldr	r3, [pc, #56]	; (8006f20 <vPortFree+0xb8>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	43db      	mvns	r3, r3
 8006eea:	401a      	ands	r2, r3
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ef0:	f7ff f9bc 	bl	800626c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <vPortFree+0xbc>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4413      	add	r3, r2
 8006efe:	4a09      	ldr	r2, [pc, #36]	; (8006f24 <vPortFree+0xbc>)
 8006f00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f02:	6938      	ldr	r0, [r7, #16]
 8006f04:	f000 f874 	bl	8006ff0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006f08:	4b07      	ldr	r3, [pc, #28]	; (8006f28 <vPortFree+0xc0>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	4a06      	ldr	r2, [pc, #24]	; (8006f28 <vPortFree+0xc0>)
 8006f10:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006f12:	f7ff f9b9 	bl	8006288 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f16:	bf00      	nop
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}
 8006f1e:	bf00      	nop
 8006f20:	20008474 	.word	0x20008474
 8006f24:	20008464 	.word	0x20008464
 8006f28:	20008470 	.word	0x20008470

08006f2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f38:	4b27      	ldr	r3, [pc, #156]	; (8006fd8 <prvHeapInit+0xac>)
 8006f3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f003 0307 	and.w	r3, r3, #7
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00c      	beq.n	8006f60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	3307      	adds	r3, #7
 8006f4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 0307 	bic.w	r3, r3, #7
 8006f52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	4a1f      	ldr	r2, [pc, #124]	; (8006fd8 <prvHeapInit+0xac>)
 8006f5c:	4413      	add	r3, r2
 8006f5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f64:	4a1d      	ldr	r2, [pc, #116]	; (8006fdc <prvHeapInit+0xb0>)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f6a:	4b1c      	ldr	r3, [pc, #112]	; (8006fdc <prvHeapInit+0xb0>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	4413      	add	r3, r2
 8006f76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f78:	2208      	movs	r2, #8
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	1a9b      	subs	r3, r3, r2
 8006f7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f023 0307 	bic.w	r3, r3, #7
 8006f86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4a15      	ldr	r2, [pc, #84]	; (8006fe0 <prvHeapInit+0xb4>)
 8006f8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f8e:	4b14      	ldr	r3, [pc, #80]	; (8006fe0 <prvHeapInit+0xb4>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2200      	movs	r2, #0
 8006f94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f96:	4b12      	ldr	r3, [pc, #72]	; (8006fe0 <prvHeapInit+0xb4>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	1ad2      	subs	r2, r2, r3
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006fac:	4b0c      	ldr	r3, [pc, #48]	; (8006fe0 <prvHeapInit+0xb4>)
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	4a0a      	ldr	r2, [pc, #40]	; (8006fe4 <prvHeapInit+0xb8>)
 8006fba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	4a09      	ldr	r2, [pc, #36]	; (8006fe8 <prvHeapInit+0xbc>)
 8006fc2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006fc4:	4b09      	ldr	r3, [pc, #36]	; (8006fec <prvHeapInit+0xc0>)
 8006fc6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006fca:	601a      	str	r2, [r3, #0]
}
 8006fcc:	bf00      	nop
 8006fce:	3714      	adds	r7, #20
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	20000458 	.word	0x20000458
 8006fdc:	20008458 	.word	0x20008458
 8006fe0:	20008460 	.word	0x20008460
 8006fe4:	20008468 	.word	0x20008468
 8006fe8:	20008464 	.word	0x20008464
 8006fec:	20008474 	.word	0x20008474

08006ff0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ff8:	4b28      	ldr	r3, [pc, #160]	; (800709c <prvInsertBlockIntoFreeList+0xac>)
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	e002      	b.n	8007004 <prvInsertBlockIntoFreeList+0x14>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	429a      	cmp	r2, r3
 800700c:	d8f7      	bhi.n	8006ffe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	4413      	add	r3, r2
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	429a      	cmp	r2, r3
 800701e:	d108      	bne.n	8007032 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	441a      	add	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	441a      	add	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	429a      	cmp	r2, r3
 8007044:	d118      	bne.n	8007078 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	4b15      	ldr	r3, [pc, #84]	; (80070a0 <prvInsertBlockIntoFreeList+0xb0>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	429a      	cmp	r2, r3
 8007050:	d00d      	beq.n	800706e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685a      	ldr	r2, [r3, #4]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	441a      	add	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	601a      	str	r2, [r3, #0]
 800706c:	e008      	b.n	8007080 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800706e:	4b0c      	ldr	r3, [pc, #48]	; (80070a0 <prvInsertBlockIntoFreeList+0xb0>)
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	601a      	str	r2, [r3, #0]
 8007076:	e003      	b.n	8007080 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	429a      	cmp	r2, r3
 8007086:	d002      	beq.n	800708e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800708e:	bf00      	nop
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	20008458 	.word	0x20008458
 80070a0:	20008460 	.word	0x20008460

080070a4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 80070a4:	b480      	push	{r7}
 80070a6:	af00      	add	r7, sp, #0
  // Calling farward to touchgfx_init in C++ domain
  //touchgfx_init();
}
 80070a8:	bf00      	nop
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  // Calling farward to touchgfx_taskEntry in C++ domain
  //touchgfx_taskEntry();
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
	...

080070c8 <__libc_init_array>:
 80070c8:	b570      	push	{r4, r5, r6, lr}
 80070ca:	4d0d      	ldr	r5, [pc, #52]	; (8007100 <__libc_init_array+0x38>)
 80070cc:	4c0d      	ldr	r4, [pc, #52]	; (8007104 <__libc_init_array+0x3c>)
 80070ce:	1b64      	subs	r4, r4, r5
 80070d0:	10a4      	asrs	r4, r4, #2
 80070d2:	2600      	movs	r6, #0
 80070d4:	42a6      	cmp	r6, r4
 80070d6:	d109      	bne.n	80070ec <__libc_init_array+0x24>
 80070d8:	4d0b      	ldr	r5, [pc, #44]	; (8007108 <__libc_init_array+0x40>)
 80070da:	4c0c      	ldr	r4, [pc, #48]	; (800710c <__libc_init_array+0x44>)
 80070dc:	f000 f820 	bl	8007120 <_init>
 80070e0:	1b64      	subs	r4, r4, r5
 80070e2:	10a4      	asrs	r4, r4, #2
 80070e4:	2600      	movs	r6, #0
 80070e6:	42a6      	cmp	r6, r4
 80070e8:	d105      	bne.n	80070f6 <__libc_init_array+0x2e>
 80070ea:	bd70      	pop	{r4, r5, r6, pc}
 80070ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80070f0:	4798      	blx	r3
 80070f2:	3601      	adds	r6, #1
 80070f4:	e7ee      	b.n	80070d4 <__libc_init_array+0xc>
 80070f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80070fa:	4798      	blx	r3
 80070fc:	3601      	adds	r6, #1
 80070fe:	e7f2      	b.n	80070e6 <__libc_init_array+0x1e>
 8007100:	080071b0 	.word	0x080071b0
 8007104:	080071b0 	.word	0x080071b0
 8007108:	080071b0 	.word	0x080071b0
 800710c:	080071b4 	.word	0x080071b4

08007110 <memset>:
 8007110:	4402      	add	r2, r0
 8007112:	4603      	mov	r3, r0
 8007114:	4293      	cmp	r3, r2
 8007116:	d100      	bne.n	800711a <memset+0xa>
 8007118:	4770      	bx	lr
 800711a:	f803 1b01 	strb.w	r1, [r3], #1
 800711e:	e7f9      	b.n	8007114 <memset+0x4>

08007120 <_init>:
 8007120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007122:	bf00      	nop
 8007124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007126:	bc08      	pop	{r3}
 8007128:	469e      	mov	lr, r3
 800712a:	4770      	bx	lr

0800712c <_fini>:
 800712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712e:	bf00      	nop
 8007130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007132:	bc08      	pop	{r3}
 8007134:	469e      	mov	lr, r3
 8007136:	4770      	bx	lr
